import { Type } from '@scalar/typebox'

import { compose } from '@/schemas/compose'

import { OAuthFlowsObjectSchema } from './oauthflows'
import {
  XScalarSecretHTTPSchema,
  XScalarSecretTokenSchema,
} from '@/schemas/extensions/security/x-scalar-security-secrets'

export const DescriptionSchema = Type.Object({
  /** A description for security scheme. CommonMark syntax MAY be used for rich text representation. */
  description: Type.Optional(Type.String()),
})

export const ApiKeySchema = compose(
  DescriptionSchema,
  XScalarSecretTokenSchema,
  Type.Object({
    /** The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect". */
    type: Type.Optional(Type.Literal('apiKey')),
    /** The name of the header, query or cookie parameter to be used. */
    name: Type.Optional(Type.String()),
    /** The location of the API key. Valid values are "query", "header", or "cookie". */
    in: Type.Optional(Type.String()),
  }),
)

export const HttpSchema = compose(
  DescriptionSchema,
  XScalarSecretTokenSchema,
  XScalarSecretHTTPSchema,
  Type.Object({
    /** The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect". */
    type: Type.Optional(Type.Literal('http')),
    /** The name of the HTTP Authentication scheme to be used in the Authorization header as defined in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry. The value is case-insensitive, as defined in RFC7235. */
    scheme: Type.Optional(Type.String()),
    /** A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. */
    bearerFormat: Type.Optional(Type.String()),
  }),
)

export const OAuth2 = compose(
  DescriptionSchema,
  Type.Object({
    /** The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect". */
    type: Type.Optional(Type.Literal('oauth2')),
    /** An object containing configuration information for the flow types supported. */
    flows: Type.Optional(OAuthFlowsObjectSchema),
  }),
)

export const OpenIdConnect = compose(
  DescriptionSchema,
  Type.Object({
    /** The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect". */
    type: Type.Optional(Type.Literal('openIdConnect')),
    /** Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata. */
    openIdConnectUrl: Type.Optional(Type.String()),
  }),
)

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and [[OpenID-Connect-Core]]. Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use cases is Authorization Code Grant flow with PKCE.
 */
export const SecuritySchemeObjectSchema = Type.Union([ApiKeySchema, HttpSchema, OAuth2, OpenIdConnect])
