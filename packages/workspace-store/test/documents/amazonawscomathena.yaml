openapi: 3.0.0
info:
  version: 2017-05-18
  x-release: v4
  title: Amazon Athena
  description: <p>Amazon Athena is an interactive query service that lets you use standard SQL to analyze data directly in Amazon S3. You can point Athena at your data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay only for the queries you run. Athena scales automatically—executing queries in parallel—so results are fast, even with large datasets and complex queries. For more information, see <a href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is Amazon Athena</a> in the <i>Amazon Athena User Guide</i>.</p> <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the driver or later with the Amazon Athena API. Earlier version drivers do not support the API. For more information and to download the driver, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing Amazon Athena with JDBC</a>.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="https://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: athena
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/athena-2017-05-18.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/athena/
servers:
  - url: http://athena.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Athena multi-region endpoint
  - url: https://athena.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Athena multi-region endpoint
  - url: http://athena.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Athena endpoint for China (Beijing) and China (Ningxia)
  - url: https://athena.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Athena endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=AmazonAthena.BatchGetNamedQuery:
    post:
      operationId: BatchGetNamedQuery
      description: Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Requires you to have access to the workgroup in which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the list of named query IDs in the specified workgroup. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of query execution IDs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetNamedQueryInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.BatchGetNamedQuery
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.BatchGetPreparedStatement:
    post:
      operationId: BatchGetPreparedStatement
      description: Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in <code>UnprocessedPreparedStatementNames</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetPreparedStatementOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetPreparedStatementInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.BatchGetPreparedStatement
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.BatchGetQueryExecution:
    post:
      operationId: BatchGetQueryExecution
      description: Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. Requires you to have access to the workgroup in which the queries ran. To get a list of query execution IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details about named queries.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetQueryExecutionInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.BatchGetQueryExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateDataCatalog:
    post:
      operationId: CreateDataCatalog
      description: Creates (registers) a data catalog with the specified name and properties. Catalogs created are visible to all users of the same Amazon Web Services account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDataCatalogOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDataCatalogInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateDataCatalog
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateNamedQuery:
    post:
      operationId: CreateNamedQuery
      description: <p>Creates a named query in the specified workgroup. Requires that you have access to the workgroup.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNamedQueryInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateNamedQuery
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateNotebook:
    post:
      operationId: CreateNotebook
      description: Creates an empty <code>ipynb</code> file in the specified Apache Spark enabled workgroup. Throws an error if a file in the workgroup with the same name already exists.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateNotebookOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNotebookInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateNotebook
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreatePreparedStatement:
    post:
      operationId: CreatePreparedStatement
      description: Creates a prepared statement for use with SQL queries in Athena.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePreparedStatementOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePreparedStatementInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreatePreparedStatement
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreatePresignedNotebookUrl:
    post:
      operationId: CreatePresignedNotebookUrl
      description: Gets an authentication token and the URL at which the notebook can be accessed. During programmatic access, <code>CreatePresignedNotebookUrl</code> must be called every 10 minutes to refresh the authentication token. For information about granting programmatic access, see <a href="https://docs.aws.amazon.com/athena/latest/ug/setting-up.html#setting-up-grant-programmatic-access">Grant programmatic access</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePresignedNotebookUrlResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePresignedNotebookUrlRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreatePresignedNotebookUrl
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateWorkGroup:
    post:
      operationId: CreateWorkGroup
      description: Creates a workgroup with the specified name. A workgroup can be an Apache Spark enabled workgroup or an Athena SQL workgroup.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkGroupInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateWorkGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteDataCatalog:
    post:
      operationId: DeleteDataCatalog
      description: Deletes a data catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDataCatalogOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDataCatalogInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteDataCatalog
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteNamedQuery:
    post:
      operationId: DeleteNamedQuery
      description: <p>Deletes the named query if you have access to the workgroup in which the query was saved.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteNamedQueryInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteNamedQuery
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteNotebook:
    post:
      operationId: DeleteNotebook
      description: Deletes the specified notebook.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteNotebookOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteNotebookInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteNotebook
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeletePreparedStatement:
    post:
      operationId: DeletePreparedStatement
      description: Deletes the prepared statement with the specified name from the specified workgroup.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePreparedStatementOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePreparedStatementInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeletePreparedStatement
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteWorkGroup:
    post:
      operationId: DeleteWorkGroup
      description: Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteWorkGroupInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteWorkGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ExportNotebook:
    post:
      operationId: ExportNotebook
      description: Exports the specified notebook and its metadata.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportNotebookOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportNotebookInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ExportNotebook
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetCalculationExecution:
    post:
      operationId: GetCalculationExecution
      description: Describes a previously submitted calculation execution.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCalculationExecutionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCalculationExecutionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetCalculationExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetCalculationExecutionCode:
    post:
      operationId: GetCalculationExecutionCode
      description: Retrieves the unencrypted code that was executed for the calculation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCalculationExecutionCodeResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCalculationExecutionCodeRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetCalculationExecutionCode
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetCalculationExecutionStatus:
    post:
      operationId: GetCalculationExecutionStatus
      description: Gets the status of a current calculation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCalculationExecutionStatusResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCalculationExecutionStatusRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetCalculationExecutionStatus
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetDataCatalog:
    post:
      operationId: GetDataCatalog
      description: Returns the specified data catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataCatalogOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDataCatalogInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetDataCatalog
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetDatabase:
    post:
      operationId: GetDatabase
      description: Returns a database object for the specified database and data catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatabaseOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: MetadataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDatabaseInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetDatabase
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetNamedQuery:
    post:
      operationId: GetNamedQuery
      description: Returns information about a single query. Requires that you have access to the workgroup in which the query was saved.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetNamedQueryInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetNamedQuery
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetNotebookMetadata:
    post:
      operationId: GetNotebookMetadata
      description: Retrieves notebook metadata for the specified notebook ID.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotebookMetadataOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetNotebookMetadataInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetNotebookMetadata
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetPreparedStatement:
    post:
      operationId: GetPreparedStatement
      description: Retrieves the prepared statement with the specified name from the specified workgroup.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPreparedStatementOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPreparedStatementInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetPreparedStatement
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetQueryExecution:
    post:
      operationId: GetQueryExecution
      description: Returns information about a single execution of a query if you have access to the workgroup in which the query ran. Each time a query executes, information about the query execution is saved with a unique ID.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryExecutionInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetQueryExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetQueryResults:
    post:
      operationId: GetQueryResults
      description: <p>Streams the results of a single query execution specified by <code>QueryExecutionId</code> from the Athena query results location in Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with query results, recent queries, and output files</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query but returns results. Use <a>StartQueryExecution</a> to run a query.</p> <p>To stream query results successfully, the IAM principal with permission to call <code>GetQueryResults</code> also must have permissions to the Amazon S3 <code>GetObject</code> action for the Athena query results location.</p> <important> <p>IAM principals with permission to the Amazon S3 <code>GetObject</code> action for the query results location are able to retrieve query results from Amazon S3 even if permission to the <code>GetQueryResults</code> action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.</p> </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryResultsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryResultsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetQueryResults
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetQueryRuntimeStatistics:
    post:
      operationId: GetQueryRuntimeStatistics
      description: Returns query execution runtime statistics related to a single execution of a query if you have access to the workgroup in which the query ran. Query execution runtime statistics are returned only when <a>QueryExecutionStatus$State</a> is in a SUCCEEDED or FAILED state. Stage-level input and output row count and data size statistics are not shown when a query has row-level filters defined in Lake Formation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryRuntimeStatisticsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryRuntimeStatisticsInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetQueryRuntimeStatistics
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetSession:
    post:
      operationId: GetSession
      description: Gets the full details of a previously created session, including the session status and configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSessionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetSession
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetSessionStatus:
    post:
      operationId: GetSessionStatus
      description: Gets the current status of a session.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionStatusResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSessionStatusRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetSessionStatus
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetTableMetadata:
    post:
      operationId: GetTableMetadata
      description: Returns table metadata for the specified catalog, database, and table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTableMetadataOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: MetadataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTableMetadataInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetTableMetadata
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetWorkGroup:
    post:
      operationId: GetWorkGroup
      description: Returns information about the workgroup with the specified name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkGroupInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetWorkGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ImportNotebook:
    post:
      operationId: ImportNotebook
      description: Imports a single <code>ipynb</code> file to a Spark enabled workgroup. The maximum file size that can be imported is 10 megabytes. If an <code>ipynb</code> file with the same name already exists in the workgroup, throws an error.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportNotebookOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportNotebookInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ImportNotebook
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListApplicationDPUSizes:
    post:
      operationId: ListApplicationDPUSizes
      description: "Returns the supported DPU sizes for the supported application runtimes (for example, <code>Athena notebook version 1</code>). "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListApplicationDPUSizesOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListApplicationDPUSizesInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListApplicationDPUSizes
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListCalculationExecutions:
    post:
      operationId: ListCalculationExecutions
      description: Lists the calculations that have been submitted to a session in descending order. Newer calculations are listed first; older calculations are listed later.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCalculationExecutionsResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCalculationExecutionsRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListCalculationExecutions
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListDataCatalogs:
    post:
      operationId: ListDataCatalogs
      description: <p>Lists the data catalogs in the current Amazon Web Services account.</p> <note> <p>In the Athena console, data catalogs are listed as "data sources" on the <b>Data sources</b> page under the <b>Data source name</b> column.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataCatalogsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDataCatalogsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListDataCatalogs
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListDatabases:
    post:
      operationId: ListDatabases
      description: Lists the databases in the specified data catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatabasesOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: MetadataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDatabasesInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListDatabases
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListEngineVersions:
    post:
      operationId: ListEngineVersions
      description: Returns a list of engine versions that are available to choose from, including the Auto option.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEngineVersionsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListEngineVersionsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListEngineVersions
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListExecutors:
    post:
      operationId: ListExecutors
      description: Lists, in descending order, the executors that joined a session. Newer executors are listed first; older executors are listed later. The result can be optionally filtered by state.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListExecutorsResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListExecutorsRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListExecutors
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListNamedQueries:
    post:
      operationId: ListNamedQueries
      description: <p>Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNamedQueriesOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListNamedQueriesInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListNamedQueries
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListNotebookMetadata:
    post:
      operationId: ListNotebookMetadata
      description: Displays the notebook files for the specified workgroup in paginated format.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNotebookMetadataOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListNotebookMetadataInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListNotebookMetadata
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListNotebookSessions:
    post:
      operationId: ListNotebookSessions
      description: Lists, in descending order, the sessions that have been created in a notebook that are in an active state like <code>CREATING</code>, <code>CREATED</code>, <code>IDLE</code> or <code>BUSY</code>. Newer sessions are listed first; older sessions are listed later.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNotebookSessionsResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListNotebookSessionsRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListNotebookSessions
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListPreparedStatements:
    post:
      operationId: ListPreparedStatements
      description: Lists the prepared statements in the specified workgroup.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPreparedStatementsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListPreparedStatementsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListPreparedStatements
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListQueryExecutions:
    post:
      operationId: ListQueryExecutions
      description: <p>Provides a list of available query execution IDs for the queries in the specified workgroup. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryExecutionsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListQueryExecutionsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListQueryExecutions
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListSessions:
    post:
      operationId: ListSessions
      description: Lists the sessions in a workgroup that are in an active state like <code>CREATING</code>, <code>CREATED</code>, <code>IDLE</code>, or <code>BUSY</code>. Newer sessions are listed first; older sessions are listed later.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSessionsResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSessionsRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListSessions
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListTableMetadata:
    post:
      operationId: ListTableMetadata
      description: Lists the metadata for the tables in the specified data catalog database.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTableMetadataOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: MetadataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTableMetadataInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListTableMetadata
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Lists the tags associated with an Athena workgroup or data catalog resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListTagsForResource
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListWorkGroups:
    post:
      operationId: ListWorkGroups
      description: Lists available workgroups for the account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkGroupsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListWorkGroupsInput"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListWorkGroups
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StartCalculationExecution:
    post:
      operationId: StartCalculationExecution
      description: Submits calculations for execution within a session. You can supply the code to run as an inline code block within the request.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartCalculationExecutionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartCalculationExecutionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StartCalculationExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StartQueryExecution:
    post:
      operationId: StartQueryExecution
      description: Runs the SQL query statements contained in the <code>Query</code>. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires <a>GetDataCatalog</a> permission to the catalog. For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartQueryExecutionInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StartQueryExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StartSession:
    post:
      operationId: StartSession
      description: Creates a session for running calculations within a workgroup. The session is ready when it reaches an <code>IDLE</code> state.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartSessionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: SessionAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionAlreadyExistsException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartSessionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StartSession
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StopCalculationExecution:
    post:
      operationId: StopCalculationExecution
      description: <p>Requests the cancellation of a calculation. A <code>StopCalculationExecution</code> call on a calculation that is already in a terminal state (for example, <code>STOPPED</code>, <code>FAILED</code>, or <code>COMPLETED</code>) succeeds but has no effect.</p> <note> <p>Cancelling a calculation is done on a best effort basis. If a calculation cannot be cancelled, you can be charged for its completion. If you are concerned about being charged for a calculation that cannot be cancelled, consider terminating the session in which the calculation is running.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopCalculationExecutionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopCalculationExecutionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StopCalculationExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StopQueryExecution:
    post:
      operationId: StopQueryExecution
      description: <p>Stops a query execution. Requires you to have access to the workgroup in which the query ran.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopQueryExecutionInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StopQueryExecution
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.TagResource:
    post:
      operationId: TagResource
      description: 'Adds one or more tags to an Athena resource. A tag is a label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.TagResource
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.TerminateSession:
    post:
      operationId: TerminateSession
      description: Terminates an active session. A <code>TerminateSession</code> call on a session that is already inactive (for example, in a <code>FAILED</code>, <code>TERMINATED</code> or <code>TERMINATING</code> state) succeeds but has no effect. Calculations running in the session when <code>TerminateSession</code> is called are forcefully stopped, but may display as <code>FAILED</code> instead of <code>STOPPED</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminateSessionResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateSessionRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.TerminateSession
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UntagResource:
    post:
      operationId: UntagResource
      description: Removes one or more tags from a data catalog or workgroup resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UntagResource
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateDataCatalog:
    post:
      operationId: UpdateDataCatalog
      description: Updates the data catalog that has the specified name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDataCatalogOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDataCatalogInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateDataCatalog
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateNamedQuery:
    post:
      operationId: UpdateNamedQuery
      description: Updates a <a>NamedQuery</a> object. The database or workgroup cannot be updated.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNamedQueryInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateNamedQuery
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateNotebook:
    post:
      operationId: UpdateNotebook
      description: Updates the contents of a Spark notebook.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateNotebookOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNotebookInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateNotebook
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateNotebookMetadata:
    post:
      operationId: UpdateNotebookMetadata
      description: Updates the metadata for a notebook.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateNotebookMetadataOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNotebookMetadataInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateNotebookMetadata
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdatePreparedStatement:
    post:
      operationId: UpdatePreparedStatement
      description: Updates a prepared statement.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePreparedStatementOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreparedStatementInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdatePreparedStatement
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateWorkGroup:
    post:
      operationId: UpdateWorkGroup
      description: Updates the workgroup with the specified name. The workgroup's name cannot be changed. Only <code>ConfigurationUpdates</code> can be specified.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkGroupInput"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateWorkGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchGetNamedQueryOutput:
      type: object
      properties:
        NamedQueries:
          allOf:
            - $ref: "#/components/schemas/NamedQueryList"
            - description: Information about the named query IDs submitted.
        UnprocessedNamedQueryIds:
          allOf:
            - $ref: "#/components/schemas/UnprocessedNamedQueryIdList"
            - description: Information about provided query IDs.
    BatchGetNamedQueryInput:
      type: object
      required:
        - NamedQueryIds
      title: BatchGetNamedQueryInput
      properties:
        NamedQueryIds:
          allOf:
            - $ref: "#/components/schemas/NamedQueryIdList"
            - description: An array of query IDs.
      description: Contains an array of named query IDs.
    InternalServerException: {}
    InvalidRequestException: {}
    BatchGetPreparedStatementOutput:
      type: object
      properties:
        PreparedStatements:
          allOf:
            - $ref: "#/components/schemas/PreparedStatementDetailsList"
            - description: The list of prepared statements returned.
        UnprocessedPreparedStatementNames:
          allOf:
            - $ref: "#/components/schemas/UnprocessedPreparedStatementNameList"
            - description: A list of one or more prepared statements that were requested but could not be returned.
    BatchGetPreparedStatementInput:
      type: object
      required:
        - PreparedStatementNames
        - WorkGroup
      title: BatchGetPreparedStatementInput
      properties:
        PreparedStatementNames:
          allOf:
            - $ref: "#/components/schemas/PreparedStatementNameList"
            - description: A list of prepared statement names to return.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup to which the prepared statements belong.
    BatchGetQueryExecutionOutput:
      type: object
      properties:
        QueryExecutions:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionList"
            - description: Information about a query execution.
        UnprocessedQueryExecutionIds:
          allOf:
            - $ref: "#/components/schemas/UnprocessedQueryExecutionIdList"
            - description: Information about the query executions that failed to run.
    BatchGetQueryExecutionInput:
      type: object
      required:
        - QueryExecutionIds
      title: BatchGetQueryExecutionInput
      properties:
        QueryExecutionIds:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionIdList"
            - description: An array of query execution IDs.
      description: Contains an array of query execution IDs.
    CreateDataCatalogOutput:
      type: object
      properties: {}
    CreateDataCatalogInput:
      type: object
      required:
        - Name
        - Type
      title: CreateDataCatalogInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog to create. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
        Type:
          allOf:
            - $ref: "#/components/schemas/DataCatalogType"
            - description: "The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog."
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: A description of the data catalog to be created.
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: <p>Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue Data Catalog belongs.</p> <p> <code>catalog-id=<i>catalog_id</i> </code> </p> <ul> <li> <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p> </li> <li> <p>Queries that specify a Glue Data Catalog other than the default <code>AwsDataCatalog</code> must be run on Athena engine version 2.</p> </li> <li> <p>In Regions where Athena engine version 2 is not available, creating new Glue data catalogs results in an <code>INVALID_INPUT</code> error.</p> </li> </ul> </li> </ul>
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagList"
            - description: A list of comma separated tags to add to the data catalog that is created.
    CreateNamedQueryOutput:
      type: object
      properties:
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique ID of the query.
    CreateNamedQueryInput:
      type: object
      required:
        - Name
        - Database
        - QueryString
      title: CreateNamedQueryInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The query name.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The query description.
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseString"
            - description: The database to which the query belongs.
        QueryString:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The contents of the query with all query statements.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/IdempotencyToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup in which the named query is being created.
    CreateNotebookOutput:
      type: object
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: A unique identifier for the notebook.
    CreateNotebookInput:
      type: object
      required:
        - WorkGroup
        - Name
      title: CreateNotebookInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the Spark enabled workgroup in which the notebook will be created.
        Name:
          allOf:
            - $ref: "#/components/schemas/NotebookName"
            - description: The name of the <code>ipynb</code> file to be created in the Spark workgroup, without the <code>.ipynb</code> extension.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/ClientRequestToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    TooManyRequestsException: {}
    CreatePreparedStatementOutput:
      type: object
      properties: {}
    CreatePreparedStatementInput:
      type: object
      required:
        - StatementName
        - WorkGroup
        - QueryStatement
      title: CreatePreparedStatementInput
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup to which the prepared statement belongs.
        QueryStatement:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The query string for the prepared statement.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The description of the prepared statement.
    CreatePresignedNotebookUrlResponse:
      type: object
      required:
        - NotebookUrl
        - AuthToken
        - AuthTokenExpirationTime
      properties:
        NotebookUrl:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The URL of the notebook. The URL includes the authentication token and notebook file name and points directly to the opened notebook.
        AuthToken:
          allOf:
            - $ref: "#/components/schemas/AuthToken"
            - description: The authentication token for the notebook.
        AuthTokenExpirationTime:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The UTC epoch time when the authentication token expires.
    CreatePresignedNotebookUrlRequest:
      type: object
      required:
        - SessionId
      title: CreatePresignedNotebookUrlRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
    ResourceNotFoundException: {}
    CreateWorkGroupOutput:
      type: object
      properties: {}
    CreateWorkGroupInput:
      type: object
      required:
        - Name
      title: CreateWorkGroupInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup name.
        Configuration:
          allOf:
            - $ref: "#/components/schemas/WorkGroupConfiguration"
            - description: Contains configuration information for creating an Athena SQL workgroup or Spark enabled Athena workgroup. Athena SQL workgroup configuration includes the location in Amazon S3 where query and calculation results are stored, the encryption configuration, if any, used for encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is specified, and whether workgroup's settings (specified with <code>EnforceWorkGroupConfiguration</code>) in the <code>WorkGroupConfiguration</code> override client-side settings. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
        Description:
          allOf:
            - $ref: "#/components/schemas/WorkGroupDescriptionString"
            - description: The workgroup description.
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagList"
            - description: A list of comma separated tags to add to the workgroup that is created.
    DeleteDataCatalogOutput:
      type: object
      properties: {}
    DeleteDataCatalogInput:
      type: object
      required:
        - Name
      title: DeleteDataCatalogInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog to delete.
    DeleteNamedQueryOutput:
      type: object
      properties: {}
    DeleteNamedQueryInput:
      type: object
      required:
        - NamedQueryId
      title: DeleteNamedQueryInput
      properties:
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique ID of the query to delete.
    DeleteNotebookOutput:
      type: object
      properties: {}
    DeleteNotebookInput:
      type: object
      required:
        - NotebookId
      title: DeleteNotebookInput
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook to delete.
    DeletePreparedStatementOutput:
      type: object
      properties: {}
    DeletePreparedStatementInput:
      type: object
      required:
        - StatementName
        - WorkGroup
      title: DeletePreparedStatementInput
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement to delete.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to which the statement to be deleted belongs.
    DeleteWorkGroupOutput:
      type: object
      properties: {}
    DeleteWorkGroupInput:
      type: object
      required:
        - WorkGroup
      title: DeleteWorkGroupInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The unique name of the workgroup to delete.
        RecursiveDeleteOption:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: The option to delete the workgroup and its contents even if the workgroup contains any named queries, query executions, or notebooks.
    ExportNotebookOutput:
      type: object
      properties:
        NotebookMetadata:
          allOf:
            - $ref: "#/components/schemas/NotebookMetadata"
            - description: The notebook metadata, including notebook ID, notebook name, and workgroup name.
        Payload:
          allOf:
            - $ref: "#/components/schemas/Payload"
            - description: The content of the exported notebook.
    ExportNotebookInput:
      type: object
      required:
        - NotebookId
      title: ExportNotebookInput
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook to export.
    GetCalculationExecutionResponse:
      type: object
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID that the calculation ran in.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The description of the calculation execution.
        WorkingDirectory:
          allOf:
            - $ref: "#/components/schemas/S3Uri"
            - description: The Amazon S3 location in which calculation results are stored.
        Status:
          allOf:
            - $ref: "#/components/schemas/CalculationStatus"
            - description: Contains information about the status of the calculation.
        Statistics:
          allOf:
            - $ref: "#/components/schemas/CalculationStatistics"
            - description: Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.
        Result:
          allOf:
            - $ref: "#/components/schemas/CalculationResult"
            - description: Contains result information. This field is populated only if the calculation is completed.
    GetCalculationExecutionRequest:
      type: object
      required:
        - CalculationExecutionId
      title: GetCalculationExecutionRequest
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
    GetCalculationExecutionCodeResponse:
      type: object
      properties:
        CodeBlock:
          allOf:
            - $ref: "#/components/schemas/CodeBlock"
            - description: The unencrypted code that was executed for the calculation.
    GetCalculationExecutionCodeRequest:
      type: object
      required:
        - CalculationExecutionId
      title: GetCalculationExecutionCodeRequest
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
    GetCalculationExecutionStatusResponse:
      type: object
      properties:
        Status:
          allOf:
            - $ref: "#/components/schemas/CalculationStatus"
            - description: Contains information about the calculation execution status.
        Statistics:
          allOf:
            - $ref: "#/components/schemas/CalculationStatistics"
            - description: Contains information about the DPU execution time and progress.
    GetCalculationExecutionStatusRequest:
      type: object
      required:
        - CalculationExecutionId
      title: GetCalculationExecutionStatusRequest
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
    GetDataCatalogOutput:
      type: object
      properties:
        DataCatalog:
          allOf:
            - $ref: "#/components/schemas/DataCatalog"
            - description: The data catalog returned.
    GetDataCatalogInput:
      type: object
      required:
        - Name
      title: GetDataCatalogInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog to return.
    GetDatabaseOutput:
      type: object
      properties:
        Database:
          allOf:
            - $ref: "#/components/schemas/Database"
            - description: The database returned.
    GetDatabaseInput:
      type: object
      required:
        - CatalogName
        - DatabaseName
      title: GetDatabaseInput
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog that contains the database to return.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the database to return.
    MetadataException: {}
    GetNamedQueryOutput:
      type: object
      properties:
        NamedQuery:
          allOf:
            - $ref: "#/components/schemas/NamedQuery"
            - description: Information about the query.
    GetNamedQueryInput:
      type: object
      required:
        - NamedQueryId
      title: GetNamedQueryInput
      properties:
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique ID of the query. Use <a>ListNamedQueries</a> to get query IDs.
    GetNotebookMetadataOutput:
      type: object
      properties:
        NotebookMetadata:
          allOf:
            - $ref: "#/components/schemas/NotebookMetadata"
            - description: The metadata that is returned for the specified notebook ID.
    GetNotebookMetadataInput:
      type: object
      required:
        - NotebookId
      title: GetNotebookMetadataInput
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook whose metadata is to be retrieved.
    GetPreparedStatementOutput:
      type: object
      properties:
        PreparedStatement:
          allOf:
            - $ref: "#/components/schemas/PreparedStatement"
            - description: The name of the prepared statement that was retrieved.
    GetPreparedStatementInput:
      type: object
      required:
        - StatementName
        - WorkGroup
      title: GetPreparedStatementInput
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement to retrieve.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to which the statement to be retrieved belongs.
    GetQueryExecutionOutput:
      type: object
      properties:
        QueryExecution:
          allOf:
            - $ref: "#/components/schemas/QueryExecution"
            - description: Information about the query execution.
    GetQueryExecutionInput:
      type: object
      required:
        - QueryExecutionId
      title: GetQueryExecutionInput
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique ID of the query execution.
    GetQueryResultsOutput:
      type: object
      properties:
        UpdateCount:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: "The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. "
        ResultSet:
          allOf:
            - $ref: "#/components/schemas/ResultSet"
            - description: The results of the query execution.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    GetQueryResultsInput:
      type: object
      required:
        - QueryExecutionId
      title: GetQueryResultsInput
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique ID of the query execution.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxQueryResults"
            - description: The maximum number of results (rows) to return in this request.
    GetQueryRuntimeStatisticsOutput:
      type: object
      properties:
        QueryRuntimeStatistics:
          allOf:
            - $ref: "#/components/schemas/QueryRuntimeStatistics"
            - description: Runtime statistics about the query execution.
    GetQueryRuntimeStatisticsInput:
      type: object
      required:
        - QueryExecutionId
      title: GetQueryRuntimeStatisticsInput
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique ID of the query execution.
    GetSessionResponse:
      type: object
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The session description.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to which the session belongs.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <a>ListEngineVersions</a>.
        EngineConfiguration:
          allOf:
            - $ref: "#/components/schemas/EngineConfiguration"
            - description: Contains engine configuration information like DPU usage.
        NotebookVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The notebook version.
        SessionConfiguration:
          allOf:
            - $ref: "#/components/schemas/SessionConfiguration"
            - description: Contains the workgroup configuration information used by the session.
        Status:
          allOf:
            - $ref: "#/components/schemas/SessionStatus"
            - description: Contains information about the status of the session.
        Statistics:
          allOf:
            - $ref: "#/components/schemas/SessionStatistics"
            - description: Contains the DPU execution time.
    GetSessionRequest:
      type: object
      required:
        - SessionId
      title: GetSessionRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
    GetSessionStatusResponse:
      type: object
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        Status:
          allOf:
            - $ref: "#/components/schemas/SessionStatus"
            - description: Contains information about the status of the session.
    GetSessionStatusRequest:
      type: object
      required:
        - SessionId
      title: GetSessionStatusRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
    GetTableMetadataOutput:
      type: object
      properties:
        TableMetadata:
          allOf:
            - $ref: "#/components/schemas/TableMetadata"
            - description: An object that contains table metadata.
    GetTableMetadataInput:
      type: object
      required:
        - CatalogName
        - DatabaseName
        - TableName
      title: GetTableMetadataInput
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog that contains the database and table metadata to return.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the database that contains the table metadata to return.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the table for which metadata is returned.
    GetWorkGroupOutput:
      type: object
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroup"
            - description: Information about the workgroup.
    GetWorkGroupInput:
      type: object
      required:
        - WorkGroup
      title: GetWorkGroupInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup.
    ImportNotebookOutput:
      type: object
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID assigned to the imported notebook.
    ImportNotebookInput:
      type: object
      required:
        - WorkGroup
        - Name
        - Payload
        - Type
      title: ImportNotebookInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the Spark enabled workgroup to import the notebook to.
        Name:
          allOf:
            - $ref: "#/components/schemas/NotebookName"
            - description: The name of the notebook to import.
        Payload:
          allOf:
            - $ref: "#/components/schemas/Payload"
            - description: The notebook content to be imported.
        Type:
          allOf:
            - $ref: "#/components/schemas/NotebookType"
            - description: The notebook content type. Currently, the only valid type is <code>IPYNB</code>.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/ClientRequestToken"
            - description: <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    ListApplicationDPUSizesOutput:
      type: object
      properties:
        ApplicationDPUSizes:
          allOf:
            - $ref: "#/components/schemas/ApplicationDPUSizesList"
            - description: A list of the supported DPU sizes that the application runtime supports.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListApplicationDPUSizesInput:
      type: object
      title: ListApplicationDPUSizesInput
      properties:
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxApplicationDPUSizesCount"
            - description: Specifies the maximum number of results to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.
    ListCalculationExecutionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        Calculations:
          allOf:
            - $ref: "#/components/schemas/CalculationsList"
            - description: A list of <a>CalculationSummary</a> objects.
    ListCalculationExecutionsRequest:
      type: object
      required:
        - SessionId
      title: ListCalculationExecutionsRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        StateFilter:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionState"
            - description: <p>A filter for a specific calculation execution state. A description of each state follows.</p> <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxCalculationsCount"
            - description: The maximum number of calculation executions to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListDataCatalogsOutput:
      type: object
      properties:
        DataCatalogsSummary:
          allOf:
            - $ref: "#/components/schemas/DataCatalogSummaryList"
            - description: A summary list of data catalogs.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ListDataCatalogsInput:
      type: object
      title: ListDataCatalogsInput
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxDataCatalogsCount"
            - description: Specifies the maximum number of data catalogs to return.
    ListDatabasesOutput:
      type: object
      properties:
        DatabaseList:
          allOf:
            - $ref: "#/components/schemas/DatabaseList"
            - description: A list of databases from a data catalog.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ListDatabasesInput:
      type: object
      required:
        - CatalogName
      title: ListDatabasesInput
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog that contains the databases to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxDatabasesCount"
            - description: Specifies the maximum number of results to return.
    ListEngineVersionsOutput:
      type: object
      properties:
        EngineVersions:
          allOf:
            - $ref: "#/components/schemas/EngineVersionsList"
            - description: A list of engine versions that are available to choose from.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListEngineVersionsInput:
      type: object
      title: ListEngineVersionsInput
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxEngineVersionsCount"
            - description: The maximum number of engine versions to return in this request.
    ListExecutorsResponse:
      type: object
      required:
        - SessionId
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        ExecutorsSummary:
          allOf:
            - $ref: "#/components/schemas/ExecutorsSummaryList"
            - description: Contains summary information about the executor.
    ListExecutorsRequest:
      type: object
      required:
        - SessionId
      title: ListExecutorsRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        ExecutorStateFilter:
          allOf:
            - $ref: "#/components/schemas/ExecutorState"
            - description: <p>A filter for a specific executor state. A description of each state follows.</p> <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The executor has been started.</p> <p> <code>REGISTERED</code> - The executor has been registered.</p> <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The executor is no longer running.</p> <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxListExecutorsCount"
            - description: The maximum number of executors to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListNamedQueriesOutput:
      type: object
      properties:
        NamedQueryIds:
          allOf:
            - $ref: "#/components/schemas/NamedQueryIdList"
            - description: The list of unique query IDs.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListNamedQueriesInput:
      type: object
      title: ListNamedQueriesInput
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxNamedQueriesCount"
            - description: The maximum number of queries to return in this request.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
    ListNotebookMetadataOutput:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        NotebookMetadataList:
          allOf:
            - $ref: "#/components/schemas/NotebookMetadataArray"
            - description: The list of notebook metadata for the specified workgroup.
    ListNotebookMetadataInput:
      type: object
      required:
        - WorkGroup
      title: ListNotebookMetadataInput
      properties:
        Filters:
          allOf:
            - $ref: "#/components/schemas/FilterDefinition"
            - description: Search filter string.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxNotebooksCount"
            - description: Specifies the maximum number of results to return.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the Spark enabled workgroup to retrieve notebook metadata for.
    ListNotebookSessionsResponse:
      type: object
      required:
        - NotebookSessionsList
      properties:
        NotebookSessionsList:
          allOf:
            - $ref: "#/components/schemas/NotebookSessionsList"
            - description: A list of the sessions belonging to the notebook.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListNotebookSessionsRequest:
      type: object
      required:
        - NotebookId
      title: ListNotebookSessionsRequest
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook to list sessions for.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxSessionsCount"
            - description: The maximum number of notebook sessions to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListPreparedStatementsOutput:
      type: object
      properties:
        PreparedStatements:
          allOf:
            - $ref: "#/components/schemas/PreparedStatementsList"
            - description: The list of prepared statements for the workgroup.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListPreparedStatementsInput:
      type: object
      required:
        - WorkGroup
      title: ListPreparedStatementsInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to list the prepared statements for.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxPreparedStatementsCount"
            - description: The maximum number of results to return in this request.
    ListQueryExecutionsOutput:
      type: object
      properties:
        QueryExecutionIds:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionIdList"
            - description: The unique IDs of each query execution as an array of strings.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token to be used by the next request if this request is truncated.
    ListQueryExecutionsInput:
      type: object
      title: ListQueryExecutionsInput
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxQueryExecutionsCount"
            - description: The maximum number of query executions to return in this request.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
    ListSessionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        Sessions:
          allOf:
            - $ref: "#/components/schemas/SessionsList"
            - description: A list of sessions.
    ListSessionsRequest:
      type: object
      required:
        - WorkGroup
      title: ListSessionsRequest
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to which the session belongs.
        StateFilter:
          allOf:
            - $ref: "#/components/schemas/SessionState"
            - description: <p>A filter for a specific session state. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxSessionsCount"
            - description: The maximum number of sessions to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/SessionManagerToken"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListTableMetadataOutput:
      type: object
      properties:
        TableMetadataList:
          allOf:
            - $ref: "#/components/schemas/TableMetadataList"
            - description: A list of table metadata.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ListTableMetadataInput:
      type: object
      required:
        - CatalogName
        - DatabaseName
      title: ListTableMetadataInput
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog for which table metadata should be returned.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the database for which table metadata should be returned.
        Expression:
          allOf:
            - $ref: "#/components/schemas/ExpressionString"
            - description: A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxTableMetadataCount"
            - description: Specifies the maximum number of results to return.
    ListTagsForResourceOutput:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagList"
            - description: The list of tags associated with the specified resource.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token to be used by the next request if this request is truncated.
    ListTagsForResourceInput:
      type: object
      required:
        - ResourceARN
      title: ListTagsForResourceInput
      properties:
        ResourceARN:
          allOf:
            - $ref: "#/components/schemas/AmazonResourceName"
            - description: Lists the tags for the resource with the specified ARN.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxTagsCount"
            - description: The maximum number of results to be returned per request that lists the tags for the resource.
    ListWorkGroupsOutput:
      type: object
      properties:
        WorkGroups:
          allOf:
            - $ref: "#/components/schemas/WorkGroupsList"
            - description: A list of <a>WorkGroupSummary</a> objects that include the names, descriptions, creation times, and states for each workgroup.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    ListWorkGroupsInput:
      type: object
      title: ListWorkGroupsInput
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxWorkGroupsCount"
            - description: The maximum number of workgroups to return in this request.
    StartCalculationExecutionResponse:
      type: object
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
        State:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionState"
            - description: <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    StartCalculationExecutionRequest:
      type: object
      required:
        - SessionId
      title: StartCalculationExecutionRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: A description of the calculation.
        CalculationConfiguration:
          allOf:
            - $ref: "#/components/schemas/CalculationConfiguration"
            - deprecated: true
              description: "Contains configuration information for the calculation.Kepler Post GA Tasks : https://sim.amazon.com/issues/ATHENA-39828"
        CodeBlock:
          allOf:
            - $ref: "#/components/schemas/CodeBlock"
            - description: A string that contains the code of the calculation.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/IdempotencyToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the calculation is idempotent (executes only once). If another <code>StartCalculationExecutionRequest</code> is received, the same response is returned and another calculation is not created. If a parameter has changed, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    StartQueryExecutionOutput:
      type: object
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique ID of the query that ran as a result of this request.
    StartQueryExecutionInput:
      type: object
      required:
        - QueryString
      title: StartQueryExecutionInput
      properties:
        QueryString:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The SQL query statements to be executed.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/IdempotencyToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
        QueryExecutionContext:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionContext"
            - description: The database within which the query executes.
        ResultConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultConfiguration"
            - description: Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup in which the query is being started.
        ExecutionParameters:
          allOf:
            - $ref: "#/components/schemas/ExecutionParameters"
            - description: A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
        ResultReuseConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultReuseConfiguration"
            - description: Specifies the query result reuse behavior for the query.
    StartSessionResponse:
      type: object
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        State:
          allOf:
            - $ref: "#/components/schemas/SessionState"
            - description: <p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    StartSessionRequest:
      type: object
      required:
        - WorkGroup
        - EngineConfiguration
      title: StartSessionRequest
      properties:
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The session description.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup to which the session belongs.
        EngineConfiguration:
          allOf:
            - $ref: "#/components/schemas/EngineConfiguration"
            - description: Contains engine data processing unit (DPU) configuration settings and parameter mappings.
        NotebookVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The notebook version. This value is supplied automatically for notebook sessions in the Athena console and is not required for programmatic session access. The only valid notebook version is <code>Athena notebook version 1</code>. If you specify a value for <code>NotebookVersion</code>, you must also specify a value for <code>NotebookId</code>. See <a>EngineConfiguration$AdditionalConfigs</a>.
        SessionIdleTimeoutInMinutes:
          allOf:
            - $ref: "#/components/schemas/SessionIdleTimeoutInMinutes"
            - description: The idle timeout in minutes for the session.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/IdempotencyToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the session is idempotent (executes only once). If another <code>StartSessionRequest</code> is received, the same response is returned and another session is not created. If a parameter has changed, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    SessionAlreadyExistsException: {}
    StopCalculationExecutionResponse:
      type: object
      properties:
        State:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionState"
            - description: <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    StopCalculationExecutionRequest:
      type: object
      required:
        - CalculationExecutionId
      title: StopCalculationExecutionRequest
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
    StopQueryExecutionOutput:
      type: object
      properties: {}
    StopQueryExecutionInput:
      type: object
      required:
        - QueryExecutionId
      title: StopQueryExecutionInput
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique ID of the query execution to stop.
    TagResourceOutput:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - ResourceARN
        - Tags
      title: TagResourceInput
      properties:
        ResourceARN:
          allOf:
            - $ref: "#/components/schemas/AmazonResourceName"
            - description: Specifies the ARN of the Athena resource (workgroup or data catalog) to which tags are to be added.
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagList"
            - description: A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource.
    TerminateSessionResponse:
      type: object
      properties:
        State:
          allOf:
            - $ref: "#/components/schemas/SessionState"
            - description: <p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    TerminateSessionRequest:
      type: object
      required:
        - SessionId
      title: TerminateSessionRequest
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
    UntagResourceOutput:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceARN
        - TagKeys
      title: UntagResourceInput
      properties:
        ResourceARN:
          allOf:
            - $ref: "#/components/schemas/AmazonResourceName"
            - description: Specifies the ARN of the resource from which tags are to be removed.
        TagKeys:
          allOf:
            - $ref: "#/components/schemas/TagKeyList"
            - description: A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource.
    UpdateDataCatalogOutput:
      type: object
      properties: {}
    UpdateDataCatalogInput:
      type: object
      required:
        - Name
        - Type
      title: UpdateDataCatalogInput
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog to update. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
        Type:
          allOf:
            - $ref: "#/components/schemas/DataCatalogType"
            - description: Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: New or modified text that describes the data catalog.
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: <p>Specifies the Lambda function or functions to use for updating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> </ul>
    UpdateNamedQueryOutput:
      type: object
      properties: {}
    UpdateNamedQueryInput:
      type: object
      required:
        - NamedQueryId
        - Name
        - QueryString
      title: UpdateNamedQueryInput
      properties:
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique identifier (UUID) of the query.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the query.
        Description:
          allOf:
            - $ref: "#/components/schemas/NamedQueryDescriptionString"
            - description: The query description.
        QueryString:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The contents of the query with all query statements.
    UpdateNotebookOutput:
      type: object
      properties: {}
    UpdateNotebookInput:
      type: object
      required:
        - NotebookId
        - Payload
        - Type
      title: UpdateNotebookInput
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook to update.
        Payload:
          allOf:
            - $ref: "#/components/schemas/Payload"
            - description: The updated content for the notebook.
        Type:
          allOf:
            - $ref: "#/components/schemas/NotebookType"
            - description: The notebook content type. Currently, the only valid type is <code>IPYNB</code>.
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The active notebook session ID. Required if the notebook has an active session.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/ClientRequestToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    UpdateNotebookMetadataOutput:
      type: object
      properties: {}
    UpdateNotebookMetadataInput:
      type: object
      required:
        - NotebookId
        - Name
      title: UpdateNotebookMetadataInput
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The ID of the notebook to update the metadata for.
        ClientRequestToken:
          allOf:
            - $ref: "#/components/schemas/ClientRequestToken"
            - description: <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
        Name:
          allOf:
            - $ref: "#/components/schemas/NotebookName"
            - description: The name to update the notebook to.
    UpdatePreparedStatementOutput:
      type: object
      properties: {}
    UpdatePreparedStatementInput:
      type: object
      required:
        - StatementName
        - WorkGroup
        - QueryStatement
      title: UpdatePreparedStatementInput
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup for the prepared statement.
        QueryStatement:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The query string for the prepared statement.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The description of the prepared statement.
    UpdateWorkGroupOutput:
      type: object
      properties: {}
    UpdateWorkGroupInput:
      type: object
      required:
        - WorkGroup
      title: UpdateWorkGroupInput
      properties:
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The specified workgroup that will be updated.
        Description:
          allOf:
            - $ref: "#/components/schemas/WorkGroupDescriptionString"
            - description: The workgroup description.
        ConfigurationUpdates:
          allOf:
            - $ref: "#/components/schemas/WorkGroupConfigurationUpdates"
            - description: Contains configuration updates for an Athena SQL workgroup.
        State:
          allOf:
            - $ref: "#/components/schemas/WorkGroupState"
            - description: The workgroup state that will be updated for the given workgroup.
    S3AclOption:
      type: string
      enum:
        - BUCKET_OWNER_FULL_CONTROL
    AclConfiguration:
      type: object
      required:
        - S3AclOption
      properties:
        S3AclOption:
          allOf:
            - $ref: "#/components/schemas/S3AclOption"
            - description: The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. If a query runs in a workgroup and the workgroup overrides client-side settings, then the Amazon S3 canned ACL specified in the workgroup's settings is used for all queries that run in the workgroup. For more information about Amazon S3 canned ACLs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl">Canned ACL</a> in the <i>Amazon S3 User Guide</i>.
      description: Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. When Athena stores query results in Amazon S3, the canned ACL is set with the <code>x-amz-acl</code> request header. For more information about S3 Object Ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview">Object Ownership settings</a> in the <i>Amazon S3 User Guide</i>.
    Age:
      type: integer
      minimum: 0
      maximum: 10080
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    NameString:
      type: string
      minLength: 1
      maxLength: 128
    SupportedDPUSizeList:
      type: array
      items:
        $ref: "#/components/schemas/Integer"
    ApplicationDPUSizes:
      type: object
      properties:
        ApplicationRuntimeId:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the supported application runtime (for example, <code>Athena notebook version 1</code>).
        SupportedDPUSizes:
          allOf:
            - $ref: "#/components/schemas/SupportedDPUSizeList"
            - description: A list of the supported DPU sizes that the application runtime supports.
      description: Contains the application runtime IDs and their supported DPU sizes.
    ApplicationDPUSizesList:
      type: array
      items:
        $ref: "#/components/schemas/ApplicationDPUSizes"
    ErrorCategory:
      type: integer
      minimum: 1
      maximum: 3
    ErrorType:
      type: integer
      minimum: 0
      maximum: 9999
    Boolean:
      type: boolean
    String:
      type: string
    AthenaError:
      type: object
      properties:
        ErrorCategory:
          allOf:
            - $ref: "#/components/schemas/ErrorCategory"
            - description: <p>An integer value that specifies the category of a query failure error. The following list shows the category for each integer value.</p> <p> <b>1</b> - System</p> <p> <b>2</b> - User</p> <p> <b>3</b> - Other</p>
        ErrorType:
          allOf:
            - $ref: "#/components/schemas/ErrorType"
            - description: An integer value that provides specific information about an Athena query error. For the meaning of specific values, see the <a href="https://docs.aws.amazon.com/athena/latest/ug/error-reference.html#error-reference-error-type-reference">Error Type Reference</a> in the <i>Amazon Athena User Guide</i>.
        Retryable:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: True if the query might succeed if resubmitted.
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Contains a short description of the error that occurred.
      description: Provides information about an Athena query error. The <code>AthenaError</code> feature provides standardized error information to help you understand failed queries and take steps after a query failure occurs. <code>AthenaError</code> includes an <code>ErrorCategory</code> field that specifies whether the cause of the failed query is due to system error, user error, or other error.
    AuthToken:
      type: string
      maxLength: 2048
    AwsAccountId:
      type: string
      pattern: ^[0-9]+$
      minLength: 12
      maxLength: 12
    NamedQueryIdList:
      type: array
      items:
        $ref: "#/components/schemas/NamedQueryId"
      minItems: 1
      maxItems: 50
    NamedQueryList:
      type: array
      items:
        $ref: "#/components/schemas/NamedQuery"
    UnprocessedNamedQueryIdList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedNamedQueryId"
    PreparedStatementNameList:
      type: array
      items:
        $ref: "#/components/schemas/StatementName"
    WorkGroupName:
      type: string
      pattern: "[a-zA-Z0-9._-]{1,128}"
    PreparedStatementDetailsList:
      type: array
      items:
        $ref: "#/components/schemas/PreparedStatement"
    UnprocessedPreparedStatementNameList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedPreparedStatementName"
    QueryExecutionIdList:
      type: array
      items:
        $ref: "#/components/schemas/QueryExecutionId"
      minItems: 1
      maxItems: 50
    QueryExecutionList:
      type: array
      items:
        $ref: "#/components/schemas/QueryExecution"
    UnprocessedQueryExecutionIdList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedQueryExecutionId"
    BoxedBoolean:
      type: boolean
    BytesScannedCutoffValue:
      type: integer
      minimum: 10000000
    CodeBlock:
      type: string
      maxLength: 68000
    CalculationConfiguration:
      type: object
      properties:
        CodeBlock:
          allOf:
            - $ref: "#/components/schemas/CodeBlock"
            - description: A string that contains the code for the calculation.
      description: Contains configuration information for the calculation.
    CalculationExecutionId:
      type: string
      minLength: 1
      maxLength: 36
    CalculationExecutionState:
      type: string
      enum:
        - CREATING
        - CREATED
        - QUEUED
        - RUNNING
        - CANCELING
        - CANCELED
        - COMPLETED
        - FAILED
    S3Uri:
      type: string
      pattern: ^(https|s3|S3)://([^/]+)/?(.*)$
      maxLength: 1024
    CalculationResultType:
      type: string
      pattern: \w+\/[-+.\w]+
      minLength: 1
      maxLength: 256
    CalculationResult:
      type: object
      properties:
        StdOutS3Uri:
          allOf:
            - $ref: "#/components/schemas/S3Uri"
            - description: The Amazon S3 location of the <code>stdout</code> file for the calculation.
        StdErrorS3Uri:
          allOf:
            - $ref: "#/components/schemas/S3Uri"
            - description: The Amazon S3 location of the <code>stderr</code> error messages file for the calculation.
        ResultS3Uri:
          allOf:
            - $ref: "#/components/schemas/S3Uri"
            - description: The Amazon S3 location of the folder for the calculation results.
        ResultType:
          allOf:
            - $ref: "#/components/schemas/CalculationResultType"
            - description: The data format of the calculation result.
      description: Contains information about an application-specific calculation result.
    Long:
      type: integer
    DescriptionString:
      type: string
      minLength: 1
      maxLength: 1024
    CalculationStatistics:
      type: object
      properties:
        DpuExecutionInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The data processing unit execution time in milliseconds for the calculation.
        Progress:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The progress of the calculation.
      description: Contains statistics for a notebook calculation.
    Date:
      type: string
      format: date-time
    CalculationStatus:
      type: object
      properties:
        SubmissionDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time the calculation was submitted for processing.
        CompletionDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time the calculation completed processing.
        State:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionState"
            - description: <p>The state of the calculation execution. A description of each state follows.</p> <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
        StateChangeReason:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The reason for the calculation state change (for example, the calculation was canceled because the session was terminated).
      description: Contains information about the status of a notebook calculation.
    CalculationSummary:
      type: object
      properties:
        CalculationExecutionId:
          allOf:
            - $ref: "#/components/schemas/CalculationExecutionId"
            - description: The calculation execution UUID.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: A description of the calculation.
        Status:
          allOf:
            - $ref: "#/components/schemas/CalculationStatus"
            - description: Contains information about the status of the calculation.
      description: Summary information for a notebook calculation.
    CalculationsList:
      type: array
      items:
        $ref: "#/components/schemas/CalculationSummary"
      minItems: 0
      maxItems: 100
    CatalogNameString:
      type: string
      minLength: 1
      maxLength: 256
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ClientRequestToken:
      type: string
      pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
      minLength: 1
      maxLength: 36
    TypeString:
      type: string
      minLength: 0
      maxLength: 4096
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    CommentString:
      type: string
      minLength: 0
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    Column:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the column.
        Type:
          allOf:
            - $ref: "#/components/schemas/TypeString"
            - description: The data type of the column.
        Comment:
          allOf:
            - $ref: "#/components/schemas/CommentString"
            - description: Optional information about the column.
      description: Contains metadata for a column in a table.
    Integer:
      type: integer
    ColumnNullable:
      type: string
      enum:
        - NOT_NULL
        - NULLABLE
        - UNKNOWN
    ColumnInfo:
      type: object
      required:
        - Name
        - Type
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The catalog to which the query results belong.
        SchemaName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The schema name (database name) to which the query results belong.
        TableName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The table name for the query results.
        Name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the column.
        Label:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A column label.
        Type:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The data type of the column.
        Precision:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits.
        Scale:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: For <code>DECIMAL</code> data types, specifies the total number of digits in the fractional part of the value. Defaults to 0.
        Nullable:
          allOf:
            - $ref: "#/components/schemas/ColumnNullable"
            - description: Indicates the column's nullable status.
        CaseSensitive:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Indicates whether values in the column are case-sensitive.
      description: Information about the columns in a query execution result.
    ColumnInfoList:
      type: array
      items:
        $ref: "#/components/schemas/ColumnInfo"
    ColumnList:
      type: array
      items:
        $ref: "#/components/schemas/Column"
    CoordinatorDpuSize:
      type: integer
      minimum: 1
      maximum: 1
    DataCatalogType:
      type: string
      enum:
        - LAMBDA
        - GLUE
        - HIVE
    ParametersMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ParametersMapValue"
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    DatabaseString:
      type: string
      minLength: 1
      maxLength: 255
    QueryString:
      type: string
      minLength: 1
      maxLength: 262144
    IdempotencyToken:
      type: string
      minLength: 32
      maxLength: 128
    NamedQueryId:
      type: string
      pattern: \S+
      minLength: 1
      maxLength: 128
    NotebookName:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]\\+"
    NotebookId:
      type: string
      pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
      minLength: 1
      maxLength: 36
    StatementName:
      type: string
      pattern: "[a-zA-Z_][a-zA-Z0-9_@:]{1,256}"
      minLength: 1
      maxLength: 256
    SessionId:
      type: string
      minLength: 1
      maxLength: 256
    WorkGroupConfiguration:
      type: object
      properties:
        ResultConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultConfiguration"
            - description: 'The configuration for the workgroup, which includes the location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query and calculation results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <a>ResultConfiguration$OutputLocation</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with query results, recent queries, and output files</a>.'
        EnforceWorkGroupConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        PublishCloudWatchMetricsEnabled:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
        BytesScannedCutoffPerQuery:
          allOf:
            - $ref: "#/components/schemas/BytesScannedCutoffValue"
            - description: The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
        RequesterPaysEnabled:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/EngineVersion"
            - description: The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.
        AdditionalConfiguration:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Specifies a user defined JSON string that is passed to the notebook engine.
        ExecutionRole:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: Role used in a session for accessing the user's resources.
        CustomerContentEncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/CustomerContentEncryptionConfiguration"
            - description: Specifies the KMS key that is used to encrypt the user's data stores in Athena.
        EnableMinimumEncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: <p>Enforces a minimal level of encryption for the workgroup for query and calculation results that are written to Amazon S3. When enabled, workgroup users can set encryption only to the minimum level set by the administrator or higher when they submit queries.</p> <p>The <code>EnforceWorkGroupConfiguration</code> setting takes precedence over the <code>EnableMinimumEncryptionConfiguration</code> flag. This means that if <code>EnforceWorkGroupConfiguration</code> is true, the <code>EnableMinimumEncryptionConfiguration</code> flag is ignored, and the workgroup configuration for encryption is used.</p>
      description: "The configuration of the workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption option, if any, used for query and calculation results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. "
    WorkGroupDescriptionString:
      type: string
      minLength: 0
      maxLength: 1024
    KmsKey:
      type: string
      pattern: ^arn:aws[a-z\-]*:kms:([a-z0-9\-]+):\d{12}:key/?[a-zA-Z_0-9+=,.@\-_/]+$|^arn:aws[a-z\-]*:kms:([a-z0-9\-]+):\d{12}:alias/?[a-zA-Z_0-9+=,.@\-_/]+$|^alias/[a-zA-Z0-9/_-]+$|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}
      minLength: 1
      maxLength: 2048
    CustomerContentEncryptionConfiguration:
      type: object
      required:
        - KmsKey
      properties:
        KmsKey:
          allOf:
            - $ref: "#/components/schemas/KmsKey"
            - description: The KMS key that is used to encrypt the user's data stores in Athena.
      description: Specifies the KMS key that is used to encrypt the user's data stores in Athena.
    DataCatalog:
      type: object
      required:
        - Name
        - Type
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: An optional description of the data catalog.
        Type:
          allOf:
            - $ref: "#/components/schemas/DataCatalogType"
            - description: "The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog."
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p> <p> <code>catalog-id=<i>catalog_id</i> </code> </p> <ul> <li> <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p> </li> <li> <p>Queries that specify a Glue Data Catalog other than the default <code>AwsDataCatalog</code> must be run on Athena engine version 2.</p> </li> </ul> </li> </ul>
      description: <p>Contains information about a data catalog in an Amazon Web Services account.</p> <note> <p>In the Athena console, data catalogs are listed as "data sources" on the <b>Data sources</b> page under the <b>Data source name</b> column.</p> </note>
    DataCatalogSummary:
      type: object
      properties:
        CatalogName:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
        Type:
          allOf:
            - $ref: "#/components/schemas/DataCatalogType"
            - description: The data catalog type.
      description: The summary information for the data catalog, which includes its name and type.
    DataCatalogSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/DataCatalogSummary"
    Database:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the database.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: An optional description of the database.
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: A set of custom key/value pairs.
      description: Contains metadata information for a database in a data catalog.
    DatabaseList:
      type: array
      items:
        $ref: "#/components/schemas/Database"
    datumString:
      type: string
    Datum:
      type: object
      properties:
        VarCharValue:
          allOf:
            - $ref: "#/components/schemas/datumString"
            - description: The value of the datum.
      description: A piece of data (a field in the table).
    DefaultExecutorDpuSize:
      type: integer
      minimum: 1
      maximum: 1
    EncryptionOption:
      type: string
      enum:
        - SSE_S3
        - SSE_KMS
        - CSE_KMS
    EncryptionConfiguration:
      type: object
      required:
        - EncryptionOption
      properties:
        EncryptionOption:
          allOf:
            - $ref: "#/components/schemas/EncryptionOption"
            - description: <p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE_S3</code>), server-side encryption with KMS-managed keys (<code>SSE_KMS</code>), or client-side encryption with KMS-managed keys (<code>CSE_KMS</code>) is used.</p> <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup. </p>
        KmsKey:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: For <code>SSE_KMS</code> and <code>CSE_KMS</code>, this is the KMS key ARN or ID.
      description: If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.
    MaxConcurrentDpus:
      type: integer
      minimum: 2
      maximum: 5000
    EngineConfiguration:
      type: object
      required:
        - MaxConcurrentDpus
      properties:
        CoordinatorDpuSize:
          allOf:
            - $ref: "#/components/schemas/CoordinatorDpuSize"
            - description: The number of DPUs to use for the coordinator. A coordinator is a special executor that orchestrates processing work and manages other executors in a notebook session.
        MaxConcurrentDpus:
          allOf:
            - $ref: "#/components/schemas/MaxConcurrentDpus"
            - description: The maximum number of DPUs that can run concurrently.
        DefaultExecutorDpuSize:
          allOf:
            - $ref: "#/components/schemas/DefaultExecutorDpuSize"
            - description: The default number of DPUs to use for executors. An executor is the smallest unit of compute that a notebook session can request from Athena.
        AdditionalConfigs:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: Contains additional notebook engine <code>MAP&lt;string, string&gt;</code> parameter mappings in the form of key-value pairs. To specify an Athena notebook that the Jupyter server will download and serve, specify a value for the <a>StartSessionRequest$NotebookVersion</a> field, and then add a key named <code>NotebookId</code> to <code>AdditionalConfigs</code> that has the value of the Athena notebook ID.
      description: Contains data processing unit (DPU) configuration settings and parameter mappings for a notebook engine.
    EngineVersion:
      type: object
      properties:
        SelectedEngineVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The engine version requested by the user. Possible values are determined by the output of <code>ListEngineVersions</code>, including AUTO. The default is AUTO.
        EffectiveEngineVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a <code>CreateWorkGroup</code> or <code>UpdateWorkGroup</code> operation, the <code>EffectiveEngineVersion</code> field is ignored.
      description: The Athena engine version for running queries, or the PySpark engine version for running sessions.
    EngineVersionsList:
      type: array
      items:
        $ref: "#/components/schemas/EngineVersion"
      minItems: 0
      maxItems: 10
    ErrorCode:
      type: string
      description: The error code returned when the query execution failed to process, or when the processing request for the named query failed.
      minLength: 1
      maxLength: 256
    ErrorMessage:
      type: string
    ExecutionParameter:
      type: string
      minLength: 1
      maxLength: 1024
    ExecutionParameters:
      type: array
      items:
        $ref: "#/components/schemas/ExecutionParameter"
      minItems: 1
    ExecutorId:
      type: string
      pattern: .*
      maxLength: 100000
    ExecutorState:
      type: string
      enum:
        - CREATING
        - CREATED
        - REGISTERED
        - TERMINATING
        - TERMINATED
        - FAILED
    ExecutorType:
      type: string
      enum:
        - COORDINATOR
        - GATEWAY
        - WORKER
    ExecutorsSummary:
      type: object
      required:
        - ExecutorId
      properties:
        ExecutorId:
          allOf:
            - $ref: "#/components/schemas/ExecutorId"
            - description: The UUID of the executor.
        ExecutorType:
          allOf:
            - $ref: "#/components/schemas/ExecutorType"
            - description: The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).
        StartDateTime:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The date and time that the executor started.
        TerminationDateTime:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The date and time that the executor was terminated.
        ExecutorState:
          allOf:
            - $ref: "#/components/schemas/ExecutorState"
            - description: <p>The processing state of the executor. A description of each state follows.</p> <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The executor has been started.</p> <p> <code>REGISTERED</code> - The executor has been registered.</p> <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The executor is no longer running.</p> <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
        ExecutorSize:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.
      description: Contains summary information about an executor.
    ExecutorsSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/ExecutorsSummary"
    NotebookMetadata:
      type: object
      properties:
        NotebookId:
          allOf:
            - $ref: "#/components/schemas/NotebookId"
            - description: The notebook ID.
        Name:
          allOf:
            - $ref: "#/components/schemas/NotebookName"
            - description: The name of the notebook.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the Spark enabled workgroup to which the notebook belongs.
        CreationTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The time when the notebook was created.
        Type:
          allOf:
            - $ref: "#/components/schemas/NotebookType"
            - description: The type of notebook. Currently, the only valid type is <code>IPYNB</code>.
        LastModifiedTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The time when the notebook was last modified.
      description: Contains metadata for notebook, including the notebook name, ID, workgroup, and time created.
    Payload:
      type: string
      minLength: 1
      maxLength: 10485760
    ExpressionString:
      type: string
      minLength: 0
      maxLength: 256
    FilterDefinition:
      type: object
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NotebookName"
            - description: The name of the notebook to search for.
      description: A string for searching notebook names.
    NamedQuery:
      type: object
      required:
        - Name
        - Database
        - QueryString
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The query name.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The query description.
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseString"
            - description: The database to which the query belongs.
        QueryString:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The SQL statements that make up the query.
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique identifier of the query.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup that contains the named query.
      description: A query, where <code>QueryString</code> contains the SQL statements that make up the query.
    PreparedStatement:
      type: object
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement.
        QueryStatement:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The query string for the prepared statement.
        WorkGroupName:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup to which the prepared statement belongs.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The description of the prepared statement.
        LastModifiedTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The last modified time of the prepared statement.
      description: A prepared SQL statement for use with Athena.
    QueryExecutionId:
      type: string
      pattern: \S+
      minLength: 1
      maxLength: 128
    QueryExecution:
      type: object
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique identifier for each query execution.
        Query:
          allOf:
            - $ref: "#/components/schemas/QueryString"
            - description: The SQL query statements which the query execution ran.
        StatementType:
          allOf:
            - $ref: "#/components/schemas/StatementType"
            - description: The type of query statement that was run. <code>DDL</code> indicates DDL query statements. <code>DML</code> indicates DML (Data Manipulation Language) query statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or <code>DESCRIBE TABLE</code>.
        ResultConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultConfiguration"
            - description: The location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup.
        ResultReuseConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultReuseConfiguration"
            - description: Specifies the query result reuse behavior that was used for the query.
        QueryExecutionContext:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionContext"
            - description: The database in which the query execution occurred.
        Status:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionStatus"
            - description: The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
        Statistics:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionStatistics"
            - description: Query execution statistics, such as the amount of data scanned, the amount of time that the query took to process, and the type of statement that was run.
        WorkGroup:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup in which the query ran.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/EngineVersion"
            - description: The engine version that executed the query.
        ExecutionParameters:
          allOf:
            - $ref: "#/components/schemas/ExecutionParameters"
            - description: A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
        SubstatementType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The kind of query statement that was run.
      description: Information about a single instance of a query execution.
    Token:
      type: string
      minLength: 1
      maxLength: 1024
    MaxQueryResults:
      type: integer
      minimum: 1
      maximum: 1000
    ResultSet:
      type: object
      properties:
        Rows:
          allOf:
            - $ref: "#/components/schemas/RowList"
            - description: The rows in the table.
        ResultSetMetadata:
          allOf:
            - $ref: "#/components/schemas/ResultSetMetadata"
            - description: The metadata that describes the column structure and data types of a table of query results.
      description: The metadata and rows that make up a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.
    QueryRuntimeStatistics:
      type: object
      properties:
        Timeline:
          $ref: "#/components/schemas/QueryRuntimeStatisticsTimeline"
        Rows:
          $ref: "#/components/schemas/QueryRuntimeStatisticsRows"
        OutputStage:
          allOf:
            - $ref: "#/components/schemas/QueryStage"
            - description: Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan.
      description: The query execution timeline, statistics on input and output rows and bytes, and the different query stages that form the query execution plan.
    SessionConfiguration:
      type: object
      properties:
        ExecutionRole:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: The ARN of the execution role used for the session.
        WorkingDirectory:
          allOf:
            - $ref: "#/components/schemas/ResultOutputLocation"
            - description: The Amazon S3 location that stores information for the notebook.
        IdleTimeoutSeconds:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The idle timeout in seconds for the session.
        EncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
      description: Contains session configuration information.
    SessionStatus:
      type: object
      properties:
        StartDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time that the session started.
        LastModifiedDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The most recent date and time that the session was modified.
        EndDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time that the session ended.
        IdleSinceDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time starting at which the session became idle. Can be empty if the session is not currently idle.
        State:
          allOf:
            - $ref: "#/components/schemas/SessionState"
            - description: <p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
        StateChangeReason:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The reason for the session state change (for example, canceled because the session was terminated).
      description: Contains information about the status of a session.
    SessionStatistics:
      type: object
      properties:
        DpuExecutionInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The data processing unit execution time for a session in milliseconds.
      description: Contains statistics for a session.
    TableMetadata:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the table.
        CreateTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time that the table was created.
        LastAccessTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The last time the table was accessed.
        TableType:
          allOf:
            - $ref: "#/components/schemas/TableTypeString"
            - description: The type of table. In Athena, only <code>EXTERNAL_TABLE</code> is supported.
        Columns:
          allOf:
            - $ref: "#/components/schemas/ColumnList"
            - description: A list of the columns in the table.
        PartitionKeys:
          allOf:
            - $ref: "#/components/schemas/ColumnList"
            - description: A list of the partition keys in the table.
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: A set of custom key/value pairs for table properties.
      description: Contains metadata for a table.
    WorkGroup:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The workgroup name.
        State:
          allOf:
            - $ref: "#/components/schemas/WorkGroupState"
            - description: "The state of the workgroup: ENABLED or DISABLED."
        Configuration:
          allOf:
            - $ref: "#/components/schemas/WorkGroupConfiguration"
            - description: The configuration of the workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption configuration, if any, used for query and calculation results; whether the Amazon CloudWatch Metrics are enabled for the workgroup; whether workgroup settings override client-side settings; and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
        Description:
          allOf:
            - $ref: "#/components/schemas/WorkGroupDescriptionString"
            - description: The workgroup description.
        CreationTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time the workgroup was created.
      description: A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    NotebookType:
      type: string
      enum:
        - IPYNB
    KeyString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    MaxApplicationDPUSizesCount:
      type: integer
      minimum: 1
      maximum: 100
    MaxCalculationsCount:
      type: integer
      minimum: 1
      maximum: 100
    SessionManagerToken:
      type: string
      maxLength: 2048
    MaxDataCatalogsCount:
      type: integer
      minimum: 2
      maximum: 50
    MaxDatabasesCount:
      type: integer
      minimum: 1
      maximum: 50
    MaxEngineVersionsCount:
      type: integer
      minimum: 1
      maximum: 10
    MaxListExecutorsCount:
      type: integer
      minimum: 1
      maximum: 100
    MaxNamedQueriesCount:
      type: integer
      minimum: 0
      maximum: 50
    MaxNotebooksCount:
      type: integer
      minimum: 1
      maximum: 50
    NotebookMetadataArray:
      type: array
      items:
        $ref: "#/components/schemas/NotebookMetadata"
    MaxSessionsCount:
      type: integer
      minimum: 1
      maximum: 100
    NotebookSessionsList:
      type: array
      description: A list of notebook sessions.
      items:
        $ref: "#/components/schemas/NotebookSessionSummary"
      minItems: 0
      maxItems: 10
    MaxPreparedStatementsCount:
      type: integer
      minimum: 1
      maximum: 50
    PreparedStatementsList:
      type: array
      items:
        $ref: "#/components/schemas/PreparedStatementSummary"
      minItems: 0
      maxItems: 50
    MaxQueryExecutionsCount:
      type: integer
      minimum: 0
      maximum: 50
    SessionState:
      type: string
      enum:
        - CREATING
        - CREATED
        - IDLE
        - BUSY
        - TERMINATING
        - TERMINATED
        - DEGRADED
        - FAILED
    SessionsList:
      type: array
      items:
        $ref: "#/components/schemas/SessionSummary"
      minItems: 0
      maxItems: 100
    MaxTableMetadataCount:
      type: integer
      minimum: 1
      maximum: 50
    TableMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/TableMetadata"
    MaxTagsCount:
      type: integer
      minimum: 75
    MaxWorkGroupsCount:
      type: integer
      minimum: 1
      maximum: 50
    WorkGroupsList:
      type: array
      items:
        $ref: "#/components/schemas/WorkGroupSummary"
      minItems: 0
      maxItems: 50
    NamedQueryDescriptionString:
      type: string
      minLength: 0
      maxLength: 1024
    NotebookSessionSummary:
      type: object
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The notebook session ID.
        CreationTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The time when the notebook session was created.
      description: Contains the notebook session ID and notebook session creation time.
    ParametersMapValue:
      type: string
      maxLength: 51200
    PreparedStatementSummary:
      type: object
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of the prepared statement.
        LastModifiedTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The last modified time of the prepared statement.
      description: The name and last modified time of the prepared statement.
    StatementType:
      type: string
      enum:
        - DDL
        - DML
        - UTILITY
    ResultConfiguration:
      type: object
      properties:
        OutputLocation:
          allOf:
            - $ref: "#/components/schemas/ResultOutputLocation"
            - description: 'The location in Amazon S3 where your query and calculation results are stored, such as <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with query results, recent queries, and output files</a>. If workgroup settings override client-side settings, then the query uses the settings specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.'
        EncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/EncryptionConfiguration"
            - description: If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the encryption configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        ExpectedBucketOwner:
          allOf:
            - $ref: "#/components/schemas/AwsAccountId"
            - description: <p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>. If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it makes Amazon S3 calls to your specified output location. If the <code>ExpectedBucketOwner</code> Amazon Web Services account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.</p> <p>This is a client-side setting. If workgroup settings override client-side settings, then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
        AclConfiguration:
          allOf:
            - $ref: "#/components/schemas/AclConfiguration"
            - description: Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the ACL configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. For more information, see <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
      description: The location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query and calculation results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
    ResultReuseConfiguration:
      type: object
      properties:
        ResultReuseByAgeConfiguration:
          allOf:
            - $ref: "#/components/schemas/ResultReuseByAgeConfiguration"
            - description: Specifies whether previous query results are reused, and if so, their maximum age.
      description: Specifies the query result reuse behavior for the query.
    QueryExecutionContext:
      type: object
      properties:
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseString"
            - description: The name of the database used in the query execution. The database must exist in the catalog.
        Catalog:
          allOf:
            - $ref: "#/components/schemas/CatalogNameString"
            - description: The name of the data catalog used in the query execution.
      description: The database and data catalog context in which the query execution occurs.
    QueryExecutionStatus:
      type: object
      properties:
        State:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionState"
            - description: <p>The state of query execution. <code>QUEUED</code> indicates that the query has been submitted to the service, and Athena will execute the query as soon as resources are available. <code>RUNNING</code> indicates that the query is in execution phase. <code>SUCCEEDED</code> indicates that the query completed without errors. <code>FAILED</code> indicates that the query experienced an error and did not complete processing. <code>CANCELLED</code> indicates that a user input interrupted query execution.</p> <note> <p>Athena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from <code>RUNNING</code> or <code>FAILED</code> to <code>QUEUED</code>. </p> </note>
        StateChangeReason:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Further detail about the status of the query.
        SubmissionDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time that the query was submitted.
        CompletionDateTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The date and time that the query completed.
        AthenaError:
          allOf:
            - $ref: "#/components/schemas/AthenaError"
            - description: Provides information about an Athena query error.
      description: The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
    QueryExecutionStatistics:
      type: object
      properties:
        EngineExecutionTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that the query took to execute.
        DataScannedInBytes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of bytes in the data that was queried.
        DataManifestLocation:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The location and file name of a data manifest file. The manifest file is saved to the Athena query results location in Amazon S3. The manifest file tracks files that the query wrote to Amazon S3. If the query fails, the manifest file also tracks files that the query intended to write. The manifest is useful for identifying orphaned files resulting from a failed query. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with Query Results, Output Files, and Query History</a> in the <i>Amazon Athena User Guide</i>.
        TotalExecutionTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to run the query.
        QueryQueueTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue.
        QueryPlanningTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time.
        ServiceProcessingTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query.
        ResultReuseInformation:
          allOf:
            - $ref: "#/components/schemas/ResultReuseInformation"
            - description: Contains information about whether previous query results were reused for the query.
      description: The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run.
    QueryExecutionState:
      type: string
      enum:
        - QUEUED
        - RUNNING
        - SUCCEEDED
        - FAILED
        - CANCELLED
    ResultReuseInformation:
      type: object
      required:
        - ReusedPreviousResult
      properties:
        ReusedPreviousResult:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: True if a previous query result was reused; false if the result was generated from a new run of the query.
      description: Contains information about whether the result of a previous query was reused.
    QueryRuntimeStatisticsTimeline:
      type: object
      properties:
        QueryQueueTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue.
        QueryPlanningTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time.
        EngineExecutionTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that the query took to execute.
        ServiceProcessingTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query.
        TotalExecutionTimeInMillis:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that Athena took to run the query.
      description: Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time.
    QueryRuntimeStatisticsRows:
      type: object
      properties:
        InputRows:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of rows read to execute the query.
        InputBytes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of bytes read to execute the query.
        OutputBytes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of bytes returned by the query.
        OutputRows:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of rows returned by the query.
      description: Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query.
    QueryStage:
      type: object
      properties:
        StageId:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The identifier for a stage.
        State:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: State of the stage after query execution.
        OutputBytes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of bytes output from the stage after execution.
        OutputRows:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of rows output from the stage after execution.
        InputBytes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of bytes input into the stage for execution.
        InputRows:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of rows input into the stage for execution.
        ExecutionTime:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: Time taken to execute this stage.
        QueryStagePlan:
          allOf:
            - $ref: "#/components/schemas/QueryStagePlanNode"
            - description: Stage plan information such as name, identifier, sub plans, and source stages.
        SubStages:
          allOf:
            - $ref: "#/components/schemas/QueryStages"
            - description: List of sub query stages that form this stage execution plan.
      description: Stage statistics such as input and output rows and bytes, execution time and stage state. This information also includes substages and the query stage plan.
    QueryStagePlanNode:
      type: object
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Name of the query stage plan that describes the operation this stage is performing as part of query execution.
        Identifier:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Information about the operation this query stage plan node is performing.
        Children:
          allOf:
            - $ref: "#/components/schemas/QueryStagePlanNodes"
            - description: Stage plan information such as name, identifier, sub plans, and remote sources of child plan nodes/
        RemoteSources:
          allOf:
            - $ref: "#/components/schemas/StringList"
            - description: Source plan node IDs.
      description: Stage plan information such as name, identifier, sub plans, and remote sources.
    QueryStages:
      type: array
      items:
        $ref: "#/components/schemas/QueryStage"
    QueryStagePlanNodes:
      type: array
      items:
        $ref: "#/components/schemas/QueryStagePlanNode"
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    ResultOutputLocation:
      type: string
    ResultConfigurationUpdates:
      type: object
      properties:
        OutputLocation:
          allOf:
            - $ref: "#/components/schemas/ResultOutputLocation"
            - description: The location in Amazon S3 where your query and calculation results are stored, such as <code>s3://path/to/query/bucket/</code>. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with query results, recent queries, and output files</a>. If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup. The "workgroup settings override" is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
        RemoveOutputLocation:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to "true", indicates that the previously-specified query results location (also known as a client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the <code>OutputLocation</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>OutputLocation</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        EncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/EncryptionConfiguration"
            - description: The encryption configuration for query and calculation results.
        RemoveEncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to "true", indicates that the previously-specified encryption configuration (also known as the client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the <code>EncryptionConfiguration</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>EncryptionConfiguration</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        ExpectedBucketOwner:
          allOf:
            - $ref: "#/components/schemas/AwsAccountId"
            - description: <p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>. If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it makes Amazon S3 calls to your specified output location. If the <code>ExpectedBucketOwner</code> Amazon Web Services account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.</p> <p>If workgroup settings override client-side settings, then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
        RemoveExpectedBucketOwner:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to "true", removes the Amazon Web Services account ID previously specified for <a>ResultConfiguration$ExpectedBucketOwner</a>. If set to "false" or not set, and a value is present in the <code>ExpectedBucketOwner</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>ExpectedBucketOwner</code> in the workgroup's <code>ResultConfiguration</code> is updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        AclConfiguration:
          allOf:
            - $ref: "#/components/schemas/AclConfiguration"
            - description: The ACL configuration for the query results.
        RemoveAclConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to <code>true</code>, indicates that the previously-specified ACL configuration for queries in this workgroup should be ignored and set to null. If set to <code>false</code> or not set, and a value is present in the <code>AclConfiguration</code> of <code>ResultConfigurationUpdates</code>, the <code>AclConfiguration</code> in the workgroup's <code>ResultConfiguration</code> is updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
      description: The information about the updates in the query results, such as output location and encryption configuration for the query results.
    ResultReuseByAgeConfiguration:
      type: object
      required:
        - Enabled
      properties:
        Enabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: True if previous query results can be reused when the query is run; otherwise, false. The default is false.
        MaxAgeInMinutes:
          allOf:
            - $ref: "#/components/schemas/Age"
            - description: Specifies, in minutes, the maximum age of a previous query result that Athena should consider for reuse. The default is 60.
      description: Specifies whether previous query results are reused, and if so, their maximum age.
    RowList:
      type: array
      items:
        $ref: "#/components/schemas/Row"
    ResultSetMetadata:
      type: object
      properties:
        ColumnInfo:
          allOf:
            - $ref: "#/components/schemas/ColumnInfoList"
            - description: Information about the columns returned in a query result metadata.
      description: The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.
    RoleArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 20
      maxLength: 2048
    datumList:
      type: array
      items:
        $ref: "#/components/schemas/Datum"
    Row:
      type: object
      properties:
        Data:
          allOf:
            - $ref: "#/components/schemas/datumList"
            - description: The data that populates a row in a query result table.
      description: The rows that make up a query result table.
    SessionIdleTimeoutInMinutes:
      type: integer
      minimum: 1
      maximum: 480
    SessionSummary:
      type: object
      properties:
        SessionId:
          allOf:
            - $ref: "#/components/schemas/SessionId"
            - description: The session ID.
        Description:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: The session description.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/EngineVersion"
            - description: The engine version used by the session (for example, <code>PySpark engine version 3</code>).
        NotebookVersion:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The notebook version.
        Status:
          allOf:
            - $ref: "#/components/schemas/SessionStatus"
            - description: Contains information about the session status.
      description: Contains summary information about a session.
    Timestamp:
      type: string
      format: date-time
    TableTypeString:
      type: string
      maxLength: 255
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      properties:
        Key:
          allOf:
            - $ref: "#/components/schemas/TagKey"
            - description: "A tag key. The tag key length is from 1 to 128 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys are case-sensitive and must be unique per resource. "
        Value:
          allOf:
            - $ref: "#/components/schemas/TagValue"
            - description: "A tag value. The tag value length is from 0 to 256 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag values are case-sensitive. "
      description: 'A label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas. '
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    UnprocessedNamedQueryId:
      type: object
      properties:
        NamedQueryId:
          allOf:
            - $ref: "#/components/schemas/NamedQueryId"
            - description: The unique identifier of the named query.
        ErrorCode:
          allOf:
            - $ref: "#/components/schemas/ErrorCode"
            - description: The error code returned when the processing request for the named query failed, if applicable.
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/ErrorMessage"
            - description: The error message returned when the processing request for the named query failed, if applicable.
      description: Information about a named query ID that could not be processed.
    UnprocessedPreparedStatementName:
      type: object
      properties:
        StatementName:
          allOf:
            - $ref: "#/components/schemas/StatementName"
            - description: The name of a prepared statement that could not be returned due to an error.
        ErrorCode:
          allOf:
            - $ref: "#/components/schemas/ErrorCode"
            - description: The error code returned when the request for the prepared statement failed.
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/ErrorMessage"
            - description: <p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p> <ul> <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li> <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li> <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li> </ul>
      description: The name of a prepared statement that could not be returned.
    UnprocessedQueryExecutionId:
      type: object
      properties:
        QueryExecutionId:
          allOf:
            - $ref: "#/components/schemas/QueryExecutionId"
            - description: The unique identifier of the query execution.
        ErrorCode:
          allOf:
            - $ref: "#/components/schemas/ErrorCode"
            - description: The error code returned when the query execution failed to process, if applicable.
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/ErrorMessage"
            - description: The error message returned when the query execution failed to process, if applicable.
      description: Describes a query execution that failed to process.
    WorkGroupConfigurationUpdates:
      type: object
      properties:
        EnforceWorkGroupConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to "true", the settings for the workgroup override client-side settings. If set to "false" client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
        ResultConfigurationUpdates:
          allOf:
            - $ref: "#/components/schemas/ResultConfigurationUpdates"
            - description: The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results.
        PublishCloudWatchMetricsEnabled:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: Indicates whether this workgroup enables publishing metrics to Amazon CloudWatch.
        BytesScannedCutoffPerQuery:
          allOf:
            - $ref: "#/components/schemas/BytesScannedCutoffValue"
            - description: The upper limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
        RemoveBytesScannedCutoffPerQuery:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: "Indicates that the data usage control limit per query is removed. <a>WorkGroupConfiguration$BytesScannedCutoffPerQuery</a> "
        RequesterPaysEnabled:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: If set to <code>true</code>, allows members assigned to a workgroup to specify Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/EngineVersion"
            - description: The engine version requested when a workgroup is updated. After the update, all queries on the workgroup run on the requested engine version. If no value was previously set, the default is Auto. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.
        RemoveCustomerContentEncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: Removes content encryption configuration for a workgroup.
        AdditionalConfiguration:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Contains a user defined string in JSON format for a Spark-enabled workgroup.
        ExecutionRole:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: Contains the ARN of the execution role for the workgroup
        CustomerContentEncryptionConfiguration:
          $ref: "#/components/schemas/CustomerContentEncryptionConfiguration"
        EnableMinimumEncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/BoxedBoolean"
            - description: <p>Enforces a minimal level of encryption for the workgroup for query and calculation results that are written to Amazon S3. When enabled, workgroup users can set encryption only to the minimum level set by the administrator or higher when they submit queries. This setting does not apply to Spark-enabled workgroups.</p> <p>The <code>EnforceWorkGroupConfiguration</code> setting takes precedence over the <code>EnableMinimumEncryptionConfiguration</code> flag. This means that if <code>EnforceWorkGroupConfiguration</code> is true, the <code>EnableMinimumEncryptionConfiguration</code> flag is ignored, and the workgroup configuration for encryption is used.</p>
      description: The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.
    WorkGroupState:
      type: string
      enum:
        - ENABLED
        - DISABLED
    WorkGroupSummary:
      type: object
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/WorkGroupName"
            - description: The name of the workgroup.
        State:
          allOf:
            - $ref: "#/components/schemas/WorkGroupState"
            - description: The state of the workgroup.
        Description:
          allOf:
            - $ref: "#/components/schemas/WorkGroupDescriptionString"
            - description: The workgroup description.
        CreationTime:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: The workgroup creation date and time.
        EngineVersion:
          allOf:
            - $ref: "#/components/schemas/EngineVersion"
            - description: The engine version setting for all queries on the workgroup. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.
      description: The summary information for the workgroup, which includes its name, state, description, and the date and time it was created.
security:
  - hmac: []
