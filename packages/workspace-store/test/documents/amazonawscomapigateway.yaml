openapi: 3.0.0
info:
  version: 2015-07-09
  x-release: v4
  title: Amazon API Gateway
  description: <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: apigateway
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigateway-2015-07-09.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/apigateway/
servers:
  - url: http://apigateway.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon API Gateway multi-region endpoint
  - url: https://apigateway.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon API Gateway multi-region endpoint
  - url: http://apigateway.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
  - url: https://apigateway.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /apikeys:
    post:
      operationId: CreateApiKey
      description: "Create an ApiKey resource. "
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the ApiKey.
                  type: string
                description:
                  description: The description of the ApiKey.
                  type: string
                enabled:
                  description: Specifies whether the ApiKey can be used by callers.
                  type: boolean
                generateDistinctId:
                  description: Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
                  type: boolean
                value:
                  description: Specifies a value of the API key.
                  type: string
                stageKeys:
                  description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
                  type: array
                  items:
                    $ref: "#/components/schemas/StageKey"
                customerId:
                  description: An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
                  type: string
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApiKeys
      description: Gets information about the current ApiKeys resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeys"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: name
          in: query
          required: false
          description: The name of queried API keys.
          schema:
            type: string
        - name: customerId
          in: query
          required: false
          description: The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.
          schema:
            type: string
        - name: includeValues
          in: query
          required: false
          description: A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.
          schema:
            type: boolean
  "/restapis/{restapi_id}/authorizers":
    post:
      operationId: CreateAuthorizer
      description: Adds a new Authorizer resource to an existing RestApi resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizer"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  description: The name of the authorizer.
                  type: string
                type:
                  description: The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
                  type: string
                  enum:
                    - TOKEN
                    - REQUEST
                    - COGNITO_USER_POOLS
                providerARNs:
                  description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. "
                  type: array
                  items:
                    $ref: "#/components/schemas/ProviderARN"
                authType:
                  description: Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
                  type: string
                authorizerUri:
                  description: Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.
                  type: string
                authorizerCredentials:
                  description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
                  type: string
                identitySource:
                  description: The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
                  type: string
                identityValidationExpression:
                  description: A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.
                  type: string
                authorizerResultTtlInSeconds:
                  description: The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
                  type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAuthorizers
      description: Describe an existing Authorizers resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizers"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/domainnames/{domain_name}/basepathmappings":
    post:
      operationId: CreateBasePathMapping
      description: Creates a new BasePathMapping resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasePathMapping"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The domain name of the BasePathMapping resource to create.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restApiId
              properties:
                basePath:
                  description: The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.
                  type: string
                restApiId:
                  description: The string identifier of the associated RestApi.
                  type: string
                stage:
                  description: The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetBasePathMappings
      description: Represents a collection of BasePathMapping resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasePathMappings"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The domain name of a BasePathMapping resource.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/deployments":
    post:
      operationId: CreateDeployment
      description: Creates a Deployment resource, which makes a specified RestApi callable over the internet.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageName:
                  description: The name of the Stage resource for the Deployment resource to create.
                  type: string
                stageDescription:
                  description: The description of the Stage resource for the Deployment resource to create.
                  type: string
                description:
                  description: The description for the Deployment resource to create.
                  type: string
                cacheClusterEnabled:
                  description: Enables a cache cluster for the Stage resource specified in the input.
                  type: boolean
                cacheClusterSize:
                  description: Returns the size of the CacheCluster.
                  type: string
                  enum:
                    - "0.5"
                    - "1.6"
                    - "6.1"
                    - "13.5"
                    - "28.4"
                    - "58.2"
                    - "118"
                    - "237"
                variables:
                  description: A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                canarySettings:
                  description: The input configuration for a canary deployment.
                  type: object
                  properties:
                    percentTraffic:
                      allOf:
                        - $ref: "#/components/schemas/Double"
                        - description: The percentage (0.0-100.0) of traffic routed to the canary deployment.
                    stageVariableOverrides:
                      allOf:
                        - $ref: "#/components/schemas/MapOfStringToString"
                        - description: A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
                    useStageCache:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
                tracingEnabled:
                  description: Specifies whether active tracing with X-ray is enabled for the Stage.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDeployments
      description: Gets information about a Deployments collection.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployments"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/documentation/parts":
    post:
      operationId: CreateDocumentationPart
      description: Creates a documentation part.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationPart"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - location
                - properties
              properties:
                location:
                  description: Specifies the target API entity to which the documentation applies.
                  type: object
                  properties:
                    type:
                      allOf:
                        - $ref: "#/components/schemas/DocumentationPartType"
                        - description: The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.
                    path:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.
                    method:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.
                    statusCode:
                      allOf:
                        - $ref: "#/components/schemas/DocumentationPartLocationStatusCode"
                        - description: The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.
                    name:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.
                properties:
                  description: The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDocumentationParts
      description: Gets documentation parts.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationParts"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: "The type of API entities of the to-be-retrieved documentation parts. "
          schema:
            type: string
            enum:
              - API
              - AUTHORIZER
              - MODEL
              - RESOURCE
              - METHOD
              - PATH_PARAMETER
              - QUERY_PARAMETER
              - REQUEST_HEADER
              - REQUEST_BODY
              - RESPONSE
              - RESPONSE_HEADER
              - RESPONSE_BODY
        - name: name
          in: query
          required: false
          description: The name of API entities of the to-be-retrieved documentation parts.
          schema:
            type: string
        - name: path
          in: query
          required: false
          description: The path of API entities of the to-be-retrieved documentation parts.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: locationStatus
          in: query
          required: false
          description: The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving DocumentationPart resources with content and <code>UNDOCUMENTED</code> for DocumentationPart resources without content.
          schema:
            type: string
            enum:
              - DOCUMENTED
              - UNDOCUMENTED
    put:
      operationId: ImportDocumentationParts
      description: Imports documentation parts
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationPartIds"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: mode
          in: query
          required: false
          description: A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>) any existing DocumentationParts definition or to merge (<code>MERGE</code>) the new definition into the existing one. The default value is <code>MERGE</code>.
          schema:
            type: string
            enum:
              - merge
              - overwrite
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.
                  type: string
  "/restapis/{restapi_id}/documentation/versions":
    post:
      operationId: CreateDocumentationVersion
      description: Creates a documentation version
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationVersion"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - documentationVersion
              properties:
                documentationVersion:
                  description: The version identifier of the new snapshot.
                  type: string
                stageName:
                  description: The stage name to be associated with the new documentation snapshot.
                  type: string
                description:
                  description: A description about the new documentation snapshot.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDocumentationVersions
      description: Gets documentation versions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationVersions"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  /domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a new domain name.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainName"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
              properties:
                domainName:
                  description: The name of the DomainName resource.
                  type: string
                certificateName:
                  description: The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
                  type: string
                certificateBody:
                  description: "[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority."
                  type: string
                certificatePrivateKey:
                  description: "[Deprecated] Your edge-optimized endpoint's domain name certificate's private key."
                  type: string
                certificateChain:
                  description: "[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path."
                  type: string
                certificateArn:
                  description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
                  type: string
                regionalCertificateName:
                  description: The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
                  type: string
                regionalCertificateArn:
                  description: The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
                  type: string
                endpointConfiguration:
                  description: "The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. "
                  type: object
                  properties:
                    types:
                      allOf:
                        - $ref: "#/components/schemas/ListOfEndpointType"
                        - description: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.
                    vpcEndpointIds:
                      allOf:
                        - $ref: "#/components/schemas/ListOfString"
                        - description: A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                securityPolicy:
                  description: The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
                  type: string
                  enum:
                    - TLS_1_0
                    - TLS_1_2
                mutualTlsAuthentication:
                  description: The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
                  type: object
                  properties:
                    truststoreUri:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
                    truststoreVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket
                ownershipVerificationCertificateArn:
                  description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDomainNames
      description: Represents a collection of DomainName resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainNames"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/models":
    post:
      operationId: CreateModel
      description: Adds a new Model resource to an existing RestApi resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The RestApi identifier under which the Model will be created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contentType
              properties:
                name:
                  description: The name of the model. Must be alphanumeric.
                  type: string
                description:
                  description: The description of the model.
                  type: string
                schema:
                  description: The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.
                  type: string
                contentType:
                  description: The content-type for the model.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetModels
      description: Describes existing Models defined for a RestApi resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/requestvalidators":
    post:
      operationId: CreateRequestValidator
      description: Creates a RequestValidator of a given RestApi.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestValidator"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the to-be-created RequestValidator.
                  type: string
                validateRequestBody:
                  description: A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).
                  type: boolean
                validateRequestParameters:
                  description: A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRequestValidators
      description: Gets the RequestValidators collection of a given RestApi.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestValidators"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/resources/{parent_id}":
    post:
      operationId: CreateResource
      description: Creates a Resource resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: parent_id
          in: path
          required: true
          description: The parent resource's identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pathPart
              properties:
                pathPart:
                  description: The last path segment for this resource.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /restapis:
    post:
      operationId: CreateRestApi
      description: Creates a new RestApi resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApi"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: The name of the RestApi.
                  type: string
                description:
                  description: The description of the RestApi.
                  type: string
                version:
                  description: A version identifier for the API.
                  type: string
                cloneFrom:
                  description: The ID of the RestApi that you want to clone from.
                  type: string
                binaryMediaTypes:
                  description: The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
                  type: array
                  items:
                    $ref: "#/components/schemas/String"
                minimumCompressionSize:
                  description: A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
                  type: integer
                apiKeySource:
                  description: "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer."
                  type: string
                  enum:
                    - HEADER
                    - AUTHORIZER
                endpointConfiguration:
                  description: "The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. "
                  type: object
                  properties:
                    types:
                      allOf:
                        - $ref: "#/components/schemas/ListOfEndpointType"
                        - description: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.
                    vpcEndpointIds:
                      allOf:
                        - $ref: "#/components/schemas/ListOfString"
                        - description: A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
                policy:
                  description: A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
                  type: string
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                disableExecuteApiEndpoint:
                  description: Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRestApis
      description: Lists the RestApis resources for your collection.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApis"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/restapis/{restapi_id}/stages":
    post:
      operationId: CreateStage
      description: "Creates a new Stage resource that references a pre-existing Deployment for the API. "
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stageName
                - deploymentId
              properties:
                stageName:
                  description: The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
                  type: string
                deploymentId:
                  description: The identifier of the Deployment resource for the Stage resource.
                  type: string
                description:
                  description: The description of the Stage resource.
                  type: string
                cacheClusterEnabled:
                  description: Whether cache clustering is enabled for the stage.
                  type: boolean
                cacheClusterSize:
                  description: Returns the size of the CacheCluster.
                  type: string
                  enum:
                    - "0.5"
                    - "1.6"
                    - "6.1"
                    - "13.5"
                    - "28.4"
                    - "58.2"
                    - "118"
                    - "237"
                variables:
                  description: A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                documentationVersion:
                  description: The version of the associated API documentation.
                  type: string
                canarySettings:
                  description: Configuration settings of a canary deployment.
                  type: object
                  properties:
                    percentTraffic:
                      allOf:
                        - $ref: "#/components/schemas/Double"
                        - description: The percent (0-100) of traffic diverted to a canary deployment.
                    deploymentId:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The ID of the canary deployment.
                    stageVariableOverrides:
                      allOf:
                        - $ref: "#/components/schemas/MapOfStringToString"
                        - description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
                    useStageCache:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
                tracingEnabled:
                  description: Specifies whether active tracing with X-ray is enabled for the Stage.
                  type: boolean
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetStages
      description: Gets information about one or more Stage resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stages"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: deploymentId
          in: query
          required: false
          description: The stages' deployment identifiers.
          schema:
            type: string
  /usageplans:
    post:
      operationId: CreateUsagePlan
      description: "Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. "
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlan"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: The name of the usage plan.
                  type: string
                description:
                  description: The description of the usage plan.
                  type: string
                apiStages:
                  description: The associated API stages of the usage plan.
                  type: array
                  items:
                    $ref: "#/components/schemas/ApiStage"
                throttle:
                  description: " The API request rate limits."
                  type: object
                  properties:
                    burstLimit:
                      allOf:
                        - $ref: "#/components/schemas/Integer"
                        - description: The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
                    rateLimit:
                      allOf:
                        - $ref: "#/components/schemas/Double"
                        - description: The API target request rate limit.
                quota:
                  description: Quotas configured for a usage plan.
                  type: object
                  properties:
                    limit:
                      allOf:
                        - $ref: "#/components/schemas/Integer"
                        - description: The target maximum number of requests that can be made in a given time period.
                    offset:
                      allOf:
                        - $ref: "#/components/schemas/Integer"
                        - description: The number of requests subtracted from the given limit in the initial time period.
                    period:
                      allOf:
                        - $ref: "#/components/schemas/QuotaPeriodType"
                        - description: The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetUsagePlans
      description: Gets all the usage plans of the caller's account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlans"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: keyId
          in: query
          required: false
          description: The identifier of the API key associated with the usage plans.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/usageplans/{usageplanId}/keys":
    post:
      operationId: CreateUsagePlanKey
      description: Creates a usage plan key for adding an existing API key to a usage plan.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlanKey"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyId
                - keyType
              properties:
                keyId:
                  description: The identifier of a UsagePlanKey resource for a plan customer.
                  type: string
                keyType:
                  description: The type of a UsagePlanKey resource for a plan customer.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetUsagePlanKeys
      description: Gets all the usage plan keys representing the API keys added to a specified usage plan.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlanKeys"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: name
          in: query
          required: false
          description: A query parameter specifying the name of the to-be-returned usage plan keys.
          schema:
            type: string
  /vpclinks:
    post:
      operationId: CreateVpcLink
      description: Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcLink"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - targetArns
              properties:
                name:
                  description: The name used to label and identify the VPC link.
                  type: string
                description:
                  description: The description of the VPC link.
                  type: string
                targetArns:
                  description: The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
                  type: array
                  items:
                    $ref: "#/components/schemas/String"
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetVpcLinks
      description: Gets the VpcLinks collection under the caller's account in a selected region.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcLinks"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  "/apikeys/{api_Key}":
    delete:
      operationId: DeleteApiKey
      description: Deletes the ApiKey resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: api_Key
          in: path
          required: true
          description: The identifier of the ApiKey resource to be deleted.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApiKey
      description: Gets information about the current ApiKey resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: api_Key
          in: path
          required: true
          description: The identifier of the ApiKey resource.
          schema:
            type: string
        - name: includeValue
          in: query
          required: false
          description: A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.
          schema:
            type: boolean
    patch:
      operationId: UpdateApiKey
      description: Changes information about an ApiKey resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: api_Key
          in: path
          required: true
          description: The identifier of the ApiKey resource to be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/authorizers/{authorizer_id}":
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an existing Authorizer resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: The identifier of the Authorizer resource.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAuthorizer
      description: Describe an existing Authorizer resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizer"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: The identifier of the Authorizer resource.
          schema:
            type: string
    post:
      operationId: TestInvokeAuthorizer
      description: Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestInvokeAuthorizerResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: Specifies a test invoke authorizer request's Authorizer ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                headers:
                  description: A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                multiValueHeaders:
                  description: The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ListOfString"
                pathWithQueryString:
                  description: The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
                  type: string
                body:
                  description: The simulated request body of an incoming invocation request.
                  type: string
                stageVariables:
                  description: A key-value map of stage variables to simulate an invocation on a deployed Stage.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                additionalContext:
                  description: A key-value map of additional context variables.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateAuthorizer
      description: Updates an existing Authorizer resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizer"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: authorizer_id
          in: path
          required: true
          description: The identifier of the Authorizer resource.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/domainnames/{domain_name}/basepathmappings/{base_path}":
    delete:
      operationId: DeleteBasePathMapping
      description: Deletes the BasePathMapping resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The domain name of the BasePathMapping resource to delete.
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: <p>The base path name of the BasePathMapping resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetBasePathMapping
      description: Describe a BasePathMapping resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasePathMapping"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The domain name of the BasePathMapping resource to be described.
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.
          schema:
            type: string
    patch:
      operationId: UpdateBasePathMapping
      description: Changes information about the BasePathMapping resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasePathMapping"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The domain name of the BasePathMapping resource to change.
          schema:
            type: string
        - name: base_path
          in: path
          required: true
          description: <p>The base path of the BasePathMapping resource to change.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/clientcertificates/{clientcertificate_id}":
    delete:
      operationId: DeleteClientCertificate
      description: Deletes the ClientCertificate resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: The identifier of the ClientCertificate resource to be deleted.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetClientCertificate
      description: Gets information about the current ClientCertificate resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificate"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: The identifier of the ClientCertificate resource to be described.
          schema:
            type: string
    patch:
      operationId: UpdateClientCertificate
      description: Changes information about an ClientCertificate resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificate"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: clientcertificate_id
          in: path
          required: true
          description: The identifier of the ClientCertificate resource to be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/deployments/{deployment_id}":
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: The identifier of the Deployment resource to delete.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDeployment
      description: Gets information about a Deployment resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: The identifier of the Deployment resource to get information about.
          schema:
            type: string
        - name: embed
          in: query
          required: false
          description: A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>"apisummary"</code> string. For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateDeployment
      description: Changes information about a Deployment resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: deployment_id
          in: path
          required: true
          description: The replacement identifier for the Deployment resource to change information about.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/documentation/parts/{part_id}":
    delete:
      operationId: DeleteDocumentationPart
      description: Deletes a documentation part
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: The identifier of the to-be-deleted documentation part.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDocumentationPart
      description: Gets a documentation part.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationPart"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
    patch:
      operationId: UpdateDocumentationPart
      description: Updates a documentation part.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationPart"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: part_id
          in: path
          required: true
          description: The identifier of the to-be-updated documentation part.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/documentation/versions/{doc_version}":
    delete:
      operationId: DeleteDocumentationVersion
      description: Deletes a documentation version.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: The version identifier of a to-be-deleted documentation snapshot.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDocumentationVersion
      description: Gets a documentation version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationVersion"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: The version identifier of the to-be-retrieved documentation snapshot.
          schema:
            type: string
    patch:
      operationId: UpdateDocumentationVersion
      description: Updates a documentation version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationVersion"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi..
          schema:
            type: string
        - name: doc_version
          in: path
          required: true
          description: The version identifier of the to-be-updated documentation version.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/domainnames/{domain_name}":
    delete:
      operationId: DeleteDomainName
      description: Deletes the DomainName resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The name of the DomainName resource to be deleted.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDomainName
      description: Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainName"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The name of the DomainName resource.
          schema:
            type: string
    patch:
      operationId: UpdateDomainName
      description: Changes information about the DomainName resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainName"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domain_name
          in: path
          required: true
          description: The name of the DomainName resource to be changed.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/gatewayresponses/{response_type}":
    delete:
      operationId: DeleteGatewayResponse
      description: Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: The response type of the associated GatewayResponse.
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
              - WAF_FILTERED
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetGatewayResponse
      description: Gets a GatewayResponse of a specified response type on the given RestApi.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: The response type of the associated GatewayResponse.
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
              - WAF_FILTERED
    put:
      operationId: PutGatewayResponse
      description: Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: The response type of the associated GatewayResponse
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
              - WAF_FILTERED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  description: The status code.
                  type: string
                  pattern: "[1-5]\\d\\d"
                responseParameters:
                  description: Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                responseTemplates:
                  description: Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateGatewayResponse
      description: Updates a GatewayResponse of a specified response type on the given RestApi.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: response_type
          in: path
          required: true
          description: The response type of the associated GatewayResponse.
          schema:
            type: string
            enum:
              - DEFAULT_4XX
              - DEFAULT_5XX
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED
              - INVALID_API_KEY
              - ACCESS_DENIED
              - AUTHORIZER_FAILURE
              - AUTHORIZER_CONFIGURATION_ERROR
              - INVALID_SIGNATURE
              - EXPIRED_TOKEN
              - MISSING_AUTHENTICATION_TOKEN
              - INTEGRATION_FAILURE
              - INTEGRATION_TIMEOUT
              - API_CONFIGURATION_ERROR
              - UNSUPPORTED_MEDIA_TYPE
              - BAD_REQUEST_PARAMETERS
              - BAD_REQUEST_BODY
              - REQUEST_TOO_LARGE
              - THROTTLED
              - QUOTA_EXCEEDED
              - WAF_FILTERED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration":
    delete:
      operationId: DeleteIntegration
      description: Represents a delete integration.
      responses:
        "204":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a delete integration request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a delete integration request's HTTP method.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegration
      description: Get the integration settings.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a get integration request's resource identifier
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a get integration request's HTTP method.
          schema:
            type: string
    put:
      operationId: PutIntegration
      description: Sets up a method's integration.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a put integration request's resource ID.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies the HTTP method for the integration.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  description: "The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. "
                  type: string
                  enum:
                    - HTTP
                    - AWS
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                httpMethod:
                  description: The HTTP method for the integration.
                  type: string
                uri:
                  description: Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.
                  type: string
                connectionType:
                  description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                connectionId:
                  description: The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.
                  type: string
                credentials:
                  description: Specifies whether credentials are required for a put integration.
                  type: string
                requestParameters:
                  description: A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                requestTemplates:
                  description: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                passthroughBehavior:
                  description: "Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. "
                  type: string
                cacheNamespace:
                  description: Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.
                  type: string
                cacheKeyParameters:
                  description: A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.
                  type: array
                  items:
                    $ref: "#/components/schemas/String"
                contentHandling:
                  description: <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                timeoutInMillis:
                  description: Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
                  type: integer
                tlsConfig:
                  description: Specifies the TLS configuration for an integration.
                  type: object
                  properties:
                    insecureSkipVerification:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: <p>Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations.</p> <important> <p>Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks.</p> </important>
    patch:
      operationId: UpdateIntegration
      description: Represents an update integration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Represents an update integration request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Represents an update integration request's HTTP method.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}":
    delete:
      operationId: DeleteIntegrationResponse
      description: Represents a delete integration response.
      responses:
        "204":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a delete integration response request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a delete integration response request's HTTP method.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: Specifies a delete integration response request's status code.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegrationResponse
      description: Represents a get integration response.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a get integration response request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a get integration response request's HTTP method.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: Specifies a get integration response request's status code.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
    put:
      operationId: PutIntegrationResponse
      description: Represents a put integration.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a put integration response request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a put integration response request's HTTP method.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: Specifies the status code that is used to map the integration response to an existing MethodResponse.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selectionPattern:
                  description: Specifies the selection pattern of a put integration response.
                  type: string
                responseParameters:
                  description: A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                responseTemplates:
                  description: Specifies a put integration response's templates.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                contentHandling:
                  description: <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
    patch:
      operationId: UpdateIntegrationResponse
      description: Represents an update integration response.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies an update integration response request's resource identifier.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies an update integration response request's HTTP method.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: Specifies an update integration response request's status code.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}":
    delete:
      operationId: DeleteMethod
      description: Deletes an existing Method resource.
      responses:
        "204":
          description: Success
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the Method resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetMethod
      description: Describe an existing Method resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Method"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the Method resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies the method request's HTTP method type.
          schema:
            type: string
    put:
      operationId: PutMethod
      description: Add a method to an existing Resource resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Method"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the new Method resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies the method request's HTTP method type.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizationType
              properties:
                authorizationType:
                  description: The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
                  type: string
                authorizerId:
                  description: Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
                  type: string
                apiKeyRequired:
                  description: Specifies whether the method required a valid ApiKey.
                  type: boolean
                operationName:
                  description: A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.
                  type: string
                requestParameters:
                  description: A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/NullableBoolean"
                requestModels:
                  description: Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                requestValidatorId:
                  description: The identifier of a RequestValidator for validating the method request.
                  type: string
                authorizationScopes:
                  description: A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
                  type: array
                  items:
                    $ref: "#/components/schemas/String"
    post:
      operationId: TestInvokeMethod
      description: Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestInvokeMethodResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: Specifies a test invoke method request's resource ID.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: Specifies a test invoke method request's HTTP method.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathWithQueryString:
                  description: The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
                  type: string
                body:
                  description: The simulated request body of an incoming invocation request.
                  type: string
                headers:
                  description: A key-value map of headers to simulate an incoming invocation request.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                multiValueHeaders:
                  description: The headers as a map from string to list of values to simulate an incoming invocation request.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ListOfString"
                clientCertificateId:
                  description: A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
                  type: string
                stageVariables:
                  description: A key-value map of stage variables to simulate an invocation on a deployed Stage.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateMethod
      description: Updates an existing Method resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Method"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the Method resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}":
    delete:
      operationId: DeleteMethodResponse
      description: Deletes an existing MethodResponse resource.
      responses:
        "204":
          description: Success
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the MethodResponse resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: The status code identifier for the MethodResponse resource.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetMethodResponse
      description: Describes a MethodResponse resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodResponse"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the MethodResponse resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: The status code for the MethodResponse resource.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
    put:
      operationId: PutMethodResponse
      description: Adds a MethodResponse to an existing Method resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodResponse"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the Method resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: The method response's status code.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                responseParameters:
                  description: A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/NullableBoolean"
                responseModels:
                  description: Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateMethodResponse
      description: Updates an existing MethodResponse resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodResponse"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The Resource identifier for the MethodResponse resource.
          schema:
            type: string
        - name: http_method
          in: path
          required: true
          description: The HTTP verb of the Method resource.
          schema:
            type: string
        - name: status_code
          in: path
          required: true
          description: The status code for the MethodResponse resource.
          schema:
            type: string
            pattern: "[1-5]\\d\\d"
            description: The status code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/models/{model_name}":
    delete:
      operationId: DeleteModel
      description: Deletes a model.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: The name of the model to delete.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetModel
      description: Describes an existing model defined for a RestApi resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The RestApi identifier under which the Model exists.
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: The name of the model as an identifier.
          schema:
            type: string
        - name: flatten
          in: query
          required: false
          description: A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.
          schema:
            type: boolean
    patch:
      operationId: UpdateModel
      description: Changes information about a model.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: The name of the model to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}":
    delete:
      operationId: DeleteRequestValidator
      description: Deletes a RequestValidator of a given RestApi.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: The identifier of the RequestValidator to be deleted.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRequestValidator
      description: Gets a RequestValidator of a given RestApi.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestValidator"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: The identifier of the RequestValidator to be retrieved.
          schema:
            type: string
    patch:
      operationId: UpdateRequestValidator
      description: Updates a RequestValidator of a given RestApi.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestValidator"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: requestvalidator_id
          in: path
          required: true
          description: The identifier of RequestValidator to be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/resources/{resource_id}":
    delete:
      operationId: DeleteResource
      description: Deletes a Resource resource.
      responses:
        "202":
          description: Success
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The identifier of the Resource resource.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetResource
      description: Lists information about a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The identifier for the Resource resource.
          schema:
            type: string
        - name: embed
          in: query
          required: false
          description: A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/String"
    patch:
      operationId: UpdateResource
      description: Changes information about a Resource resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          description: The identifier of the Resource resource.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}":
    delete:
      operationId: DeleteRestApi
      description: Deletes the specified API.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRestApi
      description: Lists the RestApi resource in the collection.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApi"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
    put:
      operationId: PutRestApi
      description: A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApi"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: mode
          in: query
          required: false
          description: The <code>mode</code> query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".
          schema:
            type: string
            enum:
              - merge
              - overwrite
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
        - name: parameters
          in: query
          required: false
          description: Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>.
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/String"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.
                  type: string
    patch:
      operationId: UpdateRestApi
      description: Changes information about the specified API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApi"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/stages/{stage_name}":
    delete:
      operationId: DeleteStage
      description: Deletes a Stage resource.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the Stage resource to delete.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetStage
      description: Gets information about a Stage resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the Stage resource to get information about.
          schema:
            type: string
    patch:
      operationId: UpdateStage
      description: Changes information about a Stage resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the Stage resource to change information about.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/usageplans/{usageplanId}":
    delete:
      operationId: DeleteUsagePlan
      description: Deletes a usage plan of a given plan Id.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the to-be-deleted usage plan.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetUsagePlan
      description: Gets a usage plan of a given plan identifier.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlan"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The identifier of the UsagePlan resource to be retrieved.
          schema:
            type: string
    patch:
      operationId: UpdateUsagePlan
      description: Updates a usage plan of a given plan Id.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlan"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the to-be-updated usage plan.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/usageplans/{usageplanId}/keys/{keyId}":
    delete:
      operationId: DeleteUsagePlanKey
      description: Deletes a usage plan key and remove the underlying API key from the associated usage plan.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: The Id of the UsagePlanKey resource to be deleted.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetUsagePlanKey
      description: Gets a usage plan key of a given key identifier.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagePlanKey"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.
          schema:
            type: string
  "/vpclinks/{vpclink_id}":
    delete:
      operationId: DeleteVpcLink
      description: Deletes an existing VpcLink of a specified identifier.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetVpcLink
      description: Gets a specified VPC link under the caller's account in a region.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcLink"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
          schema:
            type: string
    patch:
      operationId: UpdateVpcLink
      description: Updates an existing VpcLink of a specified identifier.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcLink"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: vpclink_id
          in: path
          required: true
          description: The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers":
    delete:
      operationId: FlushStageAuthorizersCache
      description: Flushes all authorizer cache entries on a stage.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the stage to flush.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/restapis/{restapi_id}/stages/{stage_name}/cache/data":
    delete:
      operationId: FlushStageCache
      description: Flushes a stage's cache.
      responses:
        "202":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the stage to flush its cache.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /clientcertificates:
    post:
      operationId: GenerateClientCertificate
      description: Generates a ClientCertificate resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificate"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the ClientCertificate.
                  type: string
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetClientCertificates
      description: Gets a collection of ClientCertificate resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificates"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
  /account:
    get:
      operationId: GetAccount
      description: Gets information about the current Account resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    patch:
      operationId: UpdateAccount
      description: Changes information about the current Account resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
  "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}":
    get:
      operationId: GetExport
      description: Exports a deployed version of a RestApi in a specified format.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the Stage that will be exported.
          schema:
            type: string
        - name: export_type
          in: path
          required: true
          description: The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
          schema:
            type: string
        - name: parameters
          in: query
          required: false
          description: "A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool"
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/String"
        - name: Accept
          in: header
          required: false
          description: The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/restapis/{restapi_id}/gatewayresponses":
    get:
      operationId: GetGatewayResponses
      description: Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResponses"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/restapis/{restapi_id}/models/{model_name}/default_template":
    get:
      operationId: GetModelTemplate
      description: Generates a sample mapping template that can be used to transform a payload into the structure of a model.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "480":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: model_name
          in: path
          required: true
          description: The name of the model for which to generate a template.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/restapis/{restapi_id}/resources":
    get:
      operationId: GetResources
      description: Lists information about a collection of Resource resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resources"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
        - name: embed
          in: query
          required: false
          description: A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}":
    get:
      operationId: GetSdk
      description: Generates a client SDK for a RestApi and Stage.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SdkResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: restapi_id
          in: path
          required: true
          description: The string identifier of the associated RestApi.
          schema:
            type: string
        - name: stage_name
          in: path
          required: true
          description: The name of the Stage that the SDK will use.
          schema:
            type: string
        - name: sdk_type
          in: path
          required: true
          description: The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.
          schema:
            type: string
        - name: parameters
          in: query
          required: false
          description: "A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>, a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. "
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/sdktypes/{sdktype_id}":
    get:
      operationId: GetSdkType
      description: Gets an SDK type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SdkType"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: sdktype_id
          in: path
          required: true
          description: The identifier of the queried SdkType instance.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /sdktypes:
    get:
      operationId: GetSdkTypes
      description: Gets SDK types
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SdkTypes"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{resource_arn}":
    get:
      operationId: GetTags
      description: Gets the Tags collection for a given resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tags"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: The ARN of a resource that can be tagged.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: (Not currently supported) The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: (Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: TagResource
      description: Adds or updates a tag on a given resource.
      responses:
        "204":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: The ARN of a resource that can be tagged.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
  "/usageplans/{usageplanId}/usage#startDate&endDate":
    get:
      operationId: GetUsage
      description: Gets the usage data of a usage plan in a specified time interval.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the usage plan associated with the usage data.
          schema:
            type: string
        - name: keyId
          in: query
          required: false
          description: The Id of the API key associated with the resultant usage data.
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          description: The starting date (e.g., 2016-01-01) of the usage data.
          schema:
            type: string
        - name: endDate
          in: query
          required: true
          description: The ending date (e.g., 2016-12-31) of the usage data.
          schema:
            type: string
        - name: position
          in: query
          required: false
          description: The current pagination position in the paged result set.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /apikeys#mode=import&format:
    post:
      operationId: ImportApiKeys
      description: Import API keys from an external source, such as a CSV-formatted file.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyIds"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: format
          in: query
          required: true
          description: A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.
          schema:
            type: string
            enum:
              - csv
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.
          schema:
            type: boolean
        - name: mode
          in: query
          required: true
          schema:
            type: string
            enum:
              - import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The payload of the POST request to import API keys. For the payload format, see API Key File Format.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /restapis#mode=import:
    post:
      operationId: ImportRestApi
      description: A feature of the API Gateway control service for creating a new API from an external API definition file.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestApi"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: failonwarnings
          in: query
          required: false
          description: A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
          schema:
            type: boolean
        - name: parameters
          in: query
          required: false
          description: <p>A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.</p> <p> To exclude DocumentationParts from the import, set <code>parameters</code> as <code>ignore=documentation</code>.</p> <p> To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.</p> <p> To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.</p> <p>For example, the AWS CLI command to exclude documentation from the imported API is:</p> <p>The AWS CLI command to set the regional endpoint on the imported API is:</p>
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/String"
        - name: mode
          in: query
          required: true
          schema:
            type: string
            enum:
              - import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{resource_arn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Removes a tag from a given resource.
      responses:
        "204":
          description: Success
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: resource_arn
          in: path
          required: true
          description: The ARN of a resource that can be tagged.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: The Tag keys to delete.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/String"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/usageplans/{usageplanId}/keys/{keyId}/usage":
    patch:
      operationId: UpdateUsage
      description: Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: usageplanId
          in: path
          required: true
          description: The Id of the usage plan associated with the usage data.
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          description: The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/PatchOperation"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ApiKey:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of the API Key.
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The value of the API Key.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the API Key.
        customerId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the API Key.
        enabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether the API Key can be used by callers.
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the API Key was created.
        lastUpdatedDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the API Key was last updated.
        stageKeys:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of Stage resources that are associated with the ApiKey resource.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
      description: A resource that can be distributed to callers for executing Method resources that require an API key. API keys can be mapped to any Stage on any RestApi, which indicates that the callers with the API key can make requests to that stage.
    StageKey:
      type: object
      properties:
        restApiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The string identifier of the associated RestApi.
        stageName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The stage name associated with the stage key.
      description: A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>.
    String:
      type: string
    BadRequestException: {}
    ConflictException: {}
    LimitExceededException: {}
    NotFoundException: {}
    UnauthorizedException: {}
    TooManyRequestsException: {}
    Authorizer:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier for the authorizer resource.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the authorizer.
        type:
          allOf:
            - $ref: "#/components/schemas/AuthorizerType"
            - description: The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
        providerARNs:
          allOf:
            - $ref: "#/components/schemas/ListOfARNs"
            - description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. "
        authType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        authorizerUri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.
        authorizerCredentials:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        identitySource:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>, <code>method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional. "
        identityValidationExpression:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.
        authorizerResultTtlInSeconds:
          allOf:
            - $ref: "#/components/schemas/NullableInteger"
            - description: The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
      description: Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.
    ProviderARN:
      type: string
    BasePathMapping:
      type: object
      properties:
        basePath:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The base path name that callers of the API must provide as part of the URL after the domain name.
        restApiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The string identifier of the associated RestApi.
        stage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the associated stage.
      description: Represents the base path that callers of the API must provide as part of the URL after the domain name.
    Deployment:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier for the deployment resource.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description for the deployment resource.
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the deployment resource was created.
        apiSummary:
          allOf:
            - $ref: "#/components/schemas/PathToMapOfMethodSnapshot"
            - description: A summary of the RestApi at the date and time that the deployment resource was created.
      description: An immutable representation of a RestApi resource that can be called by users using Stages. A deployment must be associated with a Stage for it to be callable over the Internet.
    Double:
      type: number
      format: double
    MapOfStringToString:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    Boolean:
      type: boolean
    ServiceUnavailableException: {}
    DocumentationPart:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The DocumentationPart identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.
        location:
          allOf:
            - $ref: "#/components/schemas/DocumentationPartLocation"
            - description: The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
        properties:
          description: 'A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>"{ \"description\": \"The API does ...\" }"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.'
      description: A documentation part for a targeted API entity.
    DocumentationPartType:
      type: string
      enum:
        - API
        - AUTHORIZER
        - MODEL
        - RESOURCE
        - METHOD
        - PATH_PARAMETER
        - QUERY_PARAMETER
        - REQUEST_HEADER
        - REQUEST_BODY
        - RESPONSE
        - RESPONSE_HEADER
        - RESPONSE_BODY
    DocumentationPartLocationStatusCode:
      type: string
      pattern: ^([1-5]\d\d|\*|\s*)$
    DocumentationVersion:
      type: object
      properties:
        version:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version identifier of the API documentation snapshot.
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date when the API documentation snapshot is created.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the API documentation snapshot.
      description: A snapshot of the documentation of an API.
    DomainName:
      type: object
      properties:
        domainName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The custom domain name as an API host name, for example, <code>my-api.example.com</code>.
        certificateName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the certificate that will be used by edge-optimized endpoint for this domain name.
        certificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        certificateUploadDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        regionalDomainName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.
        regionalHostedZoneId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. "
        regionalCertificateName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the certificate that will be used for validating the regional domain name.
        regionalCertificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        distributionDomainName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.
        distributionHostedZoneId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. "
        endpointConfiguration:
          allOf:
            - $ref: "#/components/schemas/EndpointConfiguration"
            - description: "The endpoint configuration of this DomainName showing the endpoint types of the domain name. "
        domainNameStatus:
          allOf:
            - $ref: "#/components/schemas/DomainNameStatus"
            - description: The status of the DomainName migration. The valid values are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.
        domainNameStatusMessage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: An optional text message containing detailed information about status of the DomainName migration.
        securityPolicy:
          allOf:
            - $ref: "#/components/schemas/SecurityPolicy"
            - description: The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
        mutualTlsAuthentication:
          allOf:
            - $ref: "#/components/schemas/MutualTlsAuthentication"
            - description: The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
        ownershipVerificationCertificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      description: Represents a custom domain name as a user-friendly host name of an API (RestApi).
    ListOfEndpointType:
      type: array
      items:
        $ref: "#/components/schemas/EndpointType"
    ListOfString:
      type: array
      items:
        $ref: "#/components/schemas/String"
    Model:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier for the model resource.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the model. Must be an alphanumeric string.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the model.
        schema:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
        contentType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The content-type for the model.
      description: Represents the data structure of a method's request or response payload.
    RequestValidator:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of this RequestValidator.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of this RequestValidator
        validateRequestBody:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether to validate a request body according to the configured Model schema.
        validateRequestParameters:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).
      description: A set of validation rules for incoming Method requests.
    Resource:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The resource's identifier.
        parentId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The parent resource's identifier.
        pathPart:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The last path segment for this resource.
        path:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The full path for this resource.
        resourceMethods:
          allOf:
            - $ref: "#/components/schemas/MapOfMethod"
            - description: Gets an API resource's method of a given HTTP verb.
      description: Represents an API resource.
    RestApi:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API's identifier. This identifier is unique across all of your APIs in API Gateway.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API's name.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API's description.
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the API was created.
        version:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A version identifier for the API.
        warnings:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: The warning messages reported when <code>failonwarnings</code> is turned on during API import.
        binaryMediaTypes:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        minimumCompressionSize:
          allOf:
            - $ref: "#/components/schemas/NullableInteger"
            - description: A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        apiKeySource:
          allOf:
            - $ref: "#/components/schemas/ApiKeySourceType"
            - description: "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer."
        endpointConfiguration:
          allOf:
            - $ref: "#/components/schemas/EndpointConfiguration"
            - description: "The endpoint configuration of this RestApi showing the endpoint types of the API. "
        policy:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
        disableExecuteApiEndpoint:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
      description: Represents a REST API.
    Stage:
      type: object
      properties:
        deploymentId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of the Deployment that the stage points to.
        clientCertificateId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of a client certificate for an API stage.
        stageName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The stage's description.
        cacheClusterEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether a cache cluster is enabled for the stage.
        cacheClusterSize:
          allOf:
            - $ref: "#/components/schemas/CacheClusterSize"
            - description: The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.
        cacheClusterStatus:
          allOf:
            - $ref: "#/components/schemas/CacheClusterStatus"
            - description: The status of the cache cluster for the stage, if enabled.
        methodSettings:
          allOf:
            - $ref: "#/components/schemas/MapOfMethodSettings"
            - description: "A map that defines the method settings for a Stage resource. Keys (designated as <code>/{method_setting_key</code> below) are method paths defined as <code>{resource_path}/{http_method}</code> for an individual method override, or <code>/\\*/\\*</code> for overriding all methods in the stage. "
        variables:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
        documentationVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the associated API documentation.
        accessLogSettings:
          allOf:
            - $ref: "#/components/schemas/AccessLogSettings"
            - description: Settings for logging access in this stage.
        canarySettings:
          allOf:
            - $ref: "#/components/schemas/CanarySettings"
            - description: Settings for the canary deployment in this stage.
        tracingEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether active tracing with X-ray is enabled for the Stage.
        webAclArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ARN of the WebAcl associated with the Stage.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the stage was created.
        lastUpdatedDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the stage last updated.
      description: Represents a unique identifier for a version of a deployed RestApi that is callable by users.
    UsagePlan:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of a UsagePlan resource.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of a usage plan.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of a usage plan.
        apiStages:
          allOf:
            - $ref: "#/components/schemas/ListOfApiStage"
            - description: The associated API stages of a usage plan.
        throttle:
          allOf:
            - $ref: "#/components/schemas/ThrottleSettings"
            - description: A map containing method level throttling information for API stage in a usage plan.
        quota:
          allOf:
            - $ref: "#/components/schemas/QuotaSettings"
            - description: The target maximum number of permitted requests per a given unit time interval.
        productCode:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
      description: Represents a usage plan used to specify who can assess associated API stages. Optionally, target request rate and quota limits can be set. In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html">Amazon Web Services Budgets</a> to monitor costs and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF</a> to manage API requests.
    ApiStage:
      type: object
      properties:
        apiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: API Id of the associated API stage in a usage plan.
        stage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: API stage name of the associated API stage in a usage plan.
        throttle:
          allOf:
            - $ref: "#/components/schemas/MapOfApiStageThrottleSettings"
            - description: Map containing method level throttling information for API stage in a usage plan.
      description: API stage name of the associated API stage in a usage plan.
    Integer:
      type: integer
    QuotaPeriodType:
      type: string
      enum:
        - DAY
        - WEEK
        - MONTH
    UsagePlanKey:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Id of a usage plan key.
        type:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>.
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The value of a usage plan key.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of a usage plan key.
      description: Represents a usage plan key to identify a plan customer.
    VpcLink:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name used to label and identify the VPC link.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the VPC link.
        targetArns:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
        status:
          allOf:
            - $ref: "#/components/schemas/VpcLinkStatus"
            - description: "The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>. "
        statusMessage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description about the VPC link status.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
      description: An API Gateway VPC link for a RestApi to access resources in an Amazon Virtual Private Cloud (VPC).
    ClientCertificate:
      type: object
      properties:
        clientCertificateId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of the client certificate.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the client certificate.
        pemEncodedCertificate:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .
        createdDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the client certificate was created.
        expirationDate:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The timestamp when the client certificate will expire.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
      description: Represents a client certificate used to configure client-side SSL authentication while sending requests to the integration endpoint.
    Account:
      type: object
      properties:
        cloudwatchRoleArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The ARN of an Amazon CloudWatch role for the current Account. "
        throttleSettings:
          allOf:
            - $ref: "#/components/schemas/ThrottleSettings"
            - description: Specifies the API request limits configured for the current Account.
        features:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>"UsagePlans"</code>.
        apiKeyVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the API keys used for the account.
      description: Represents an AWS account that is associated with API Gateway.
    ApiKeys:
      type: object
      properties:
        warnings:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of warning messages logged during the import of API keys when the <code>failOnWarnings</code> option is set to true.
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfApiKey"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of API keys as represented by an ApiKeys resource.
    Authorizers:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfAuthorizer"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of Authorizer resources.
    BasePathMappings:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfBasePathMapping"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of BasePathMapping resources.
    ClientCertificates:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfClientCertificate"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of ClientCertificate resources.
    Deployments:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfDeployment"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection resource that contains zero or more references to your existing deployments, and links that guide you on how to interact with your collection. The collection offers a paginated view of the contained deployments.
    DocumentationParts:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfDocumentationPart"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: The collection of documentation parts of an API.
    DocumentationVersions:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfDocumentationVersion"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: "The collection of documentation snapshots of an API. "
    DomainNames:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfDomainName"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of DomainName resources.
    ExportResponse:
      type: object
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The binary blob response to GetExport, which contains the export.
      description: The binary blob response to GetExport, which contains the generated SDK.
    GatewayResponse:
      type: object
      properties:
        responseType:
          allOf:
            - $ref: "#/components/schemas/GatewayResponseType"
            - description: The response type of the associated GatewayResponse.
        statusCode:
          allOf:
            - $ref: "#/components/schemas/StatusCode"
            - description: The HTTP status code for this GatewayResponse.
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        responseTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
        defaultResponse:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: "A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. "
      description: A gateway response of a given response type and status code, with optional response parameters and mapping templates.
    GatewayResponses:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfGatewayResponse"
            - xml:
                name: item
              description: Returns the entire collection, because of no pagination support.
      description: The collection of the GatewayResponse instances of a RestApi as a <code>responseType</code>-to-GatewayResponse object map of key-value pairs. As such, pagination is not supported for querying this collection.
    Integration:
      type: object
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/IntegrationType"
            - description: <p>Specifies an API method integration type. The valid value is one of the following:</p> <p>For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.</p>
        httpMethod:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the integration's HTTP method type.
        uri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p> <p>For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> </p>
        connectionType:
          allOf:
            - $ref: "#/components/schemas/ConnectionType"
            - description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
        connectionId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.
        credentials:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\*:user/\*</code>. To use resource-based permissions on supported AWS services, specify null.
        requestParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.
        requestTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        passthroughBehavior:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request."
        contentHandling:
          allOf:
            - $ref: "#/components/schemas/ContentHandlingStrategy"
            - description: <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
        timeoutInMillis:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        cacheNamespace:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.
        cacheKeyParameters:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.
        integrationResponses:
          allOf:
            - $ref: "#/components/schemas/MapOfIntegrationResponse"
            - description: Specifies the integration's responses.
        tlsConfig:
          allOf:
            - $ref: "#/components/schemas/TlsConfig"
            - description: Specifies the TLS configuration for an integration.
      description: Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.
    IntegrationResponse:
      type: object
      properties:
        statusCode:
          allOf:
            - $ref: "#/components/schemas/StatusCode"
            - description: Specifies the status code that is used to map the integration response to an existing MethodResponse.
        selectionPattern:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\n</code>) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.
        responseTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
        contentHandling:
          allOf:
            - $ref: "#/components/schemas/ContentHandlingStrategy"
            - description: <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
      description: Represents an integration response. The status code must map to an existing MethodResponse, and parameters and templates can be used to transform the back-end response.
    Method:
      type: object
      properties:
        httpMethod:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The method's HTTP verb.
        authorizationType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
        authorizerId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.
        apiKeyRequired:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: A boolean flag specifying whether a valid ApiKey is required to invoke this method.
        requestValidatorId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of a RequestValidator for request validation.
        operationName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.
        requestParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToBoolean"
            - description: A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
        requestModels:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
        methodResponses:
          allOf:
            - $ref: "#/components/schemas/MapOfMethodResponse"
            - description: "Gets a method response associated with a given HTTP status code. "
        methodIntegration:
          allOf:
            - $ref: "#/components/schemas/Integration"
            - description: Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.
        authorizationScopes:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
      description: " Represents a client-facing interface by which the client calls the API to access back-end resources. A Method resource is integrated with an Integration resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a Method resource, whereas an integration request is embodied in an Integration resource. On the other hand, a method response is represented by a MethodResponse resource, whereas an integration response is represented by an IntegrationResponse resource. "
    MethodResponse:
      type: object
      properties:
        statusCode:
          allOf:
            - $ref: "#/components/schemas/StatusCode"
            - description: The method response's status code.
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToBoolean"
            - description: A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)
        responseModels:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
      description: "Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template. "
    Template:
      type: object
      properties:
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Apache Velocity Template Language (VTL) template content used for the template resource.
      description: Represents a mapping template used to transform a payload.
    Models:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfModel"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of Model resources.
    RequestValidators:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfRequestValidator"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: A collection of RequestValidator resources of a given RestApi.
    Resources:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfResource"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of Resource resources.
    RestApis:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfRestApi"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Contains references to your APIs and links that guide you in how to interact with your collection. A collection offers a paginated view of your APIs.
    SdkResponse:
      type: object
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The binary blob response to GetSdk, which contains the generated SDK.
      description: The binary blob response to GetSdk, which contains the generated SDK.
    SdkType:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of an SdkType instance.
        friendlyName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user-friendly name of an SdkType instance.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of an SdkType.
        configurationProperties:
          allOf:
            - $ref: "#/components/schemas/ListOfSdkConfigurationProperty"
            - description: A list of configuration properties of an SdkType.
      description: A type of SDK that API Gateway can generate.
    SdkTypes:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfSdkType"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: The collection of SdkType instances.
    Stages:
      type: object
      properties:
        item:
          allOf:
            - $ref: "#/components/schemas/ListOfStage"
            - description: The current page of elements from this collection.
      description: A list of Stage resources that are associated with the ApiKey resource.
    Tags:
      type: object
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The collection of tags. Each tag element is associated with a given resource.
      description: The collection of tags. Each tag element is associated with a given resource.
    Usage:
      type: object
      properties:
        usagePlanId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The plan Id associated with this usage data.
        startDate:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The starting date of the usage data.
        endDate:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ending date of the usage data.
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/MapOfKeyUsages"
            - xml:
                name: values
              description: 'The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>.'
      description: Represents the usage data of a usage plan.
    UsagePlanKeys:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfUsagePlanKey"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents the collection of usage plan keys added to usage plans for the associated API keys and, possibly, other types of keys.
    UsagePlans:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfUsagePlan"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: Represents a collection of usage plans for an AWS account.
    VpcLinks:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/String"
        items:
          allOf:
            - $ref: "#/components/schemas/ListOfVpcLink"
            - xml:
                name: item
              description: The current page of elements from this collection.
      description: The collection of VPC links under the caller's account in a region.
    ApiKeyIds:
      type: object
      properties:
        ids:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of all the ApiKey identifiers.
        warnings:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of warning messages.
      description: The identifier of an ApiKey used in a UsagePlan.
    DocumentationPartIds:
      type: object
      properties:
        ids:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of the returned documentation part identifiers.
        warnings:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of warning messages reported during import of documentation parts.
      description: A collection of the imported DocumentationPart identifiers.
    NullableBoolean:
      type: boolean
    TestInvokeAuthorizerResponse:
      type: object
      properties:
        clientStatus:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.
        log:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API Gateway execution log for the test authorizer request.
        latency:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The execution latency of the test authorizer request.
        principalId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The principal identity returned by the Authorizer
        policy:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The JSON policy document returned by the Authorizer
        authorization:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToList"
            - description: The authorization response.
        claims:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.
      description: Represents the response of the test invoke request for a custom Authorizer
    TestInvokeMethodResponse:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The HTTP status code.
        body:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The body of the HTTP response.
        headers:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The headers of the HTTP response.
        multiValueHeaders:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToList"
            - description: The headers of the HTTP response as a map from string to list of values.
        log:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API Gateway execution log for the test invoke request.
        latency:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The execution latency of the test invoke request.
      description: Represents the response of the test invoke request in the HTTP method.
    PatchOperation:
      type: object
      properties:
        op:
          allOf:
            - $ref: "#/components/schemas/Op"
            - description: An update operation to be performed with this PATCH request. The valid value can be add, remove, replace or copy. Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message..
        path:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The op operation's target, as identified by a JSON Pointer value that references a location within the targeted resource. For example, if the target resource has an updateable property of {\"name\":\"value\"}, the path for this property is /name. If the name property value is a JSON object (e.g., {\"name\": {\"child/name\": \"child-value\"}}), the path for the child/name property will be /name/child~1name. Any slash (\"/\") character appearing in path names must be escaped with \"~1\", as shown in the example above. Each op operation can have only one path associated with it."
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "The new target value of the update operation. It is applicable for the add or replace operation. When using AWS CLI to update a property of a JSON value, enclose the JSON object with a pair of single quotes in a Linux shell, e.g., '{\"a\": ...}'."
        from:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The copy update operation's source as identified by a JSON-Pointer value referencing the location within the targeted resource to copy the value from. For example, to promote a canary deployment, you copy the canary deployment ID to the affiliated deployment ID by calling a PATCH request on a Stage resource with "op":"copy", "from":"/canarySettings/deploymentId" and "path":"/deploymentId".
      description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
    AccessLogSettings:
      type: object
      properties:
        format:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A single line format of the access logs of data, as specified by selected $context variables. The format must include at least <code>$context.requestId</code>.
        destinationArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.
      description: Access log settings, including the access log format and access log destination ARN.
    ThrottleSettings:
      type: object
      properties:
        burstLimit:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
        rateLimit:
          allOf:
            - $ref: "#/components/schemas/Double"
            - description: The API target request rate limit.
      description: " The API request rate limits."
    Timestamp:
      type: string
      format: date-time
    ApiKeySourceType:
      type: string
      enum:
        - HEADER
        - AUTHORIZER
    ListOfApiKey:
      type: array
      items:
        $ref: "#/components/schemas/ApiKey"
    ApiKeysFormat:
      type: string
      enum:
        - csv
    MapOfApiStageThrottleSettings:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ThrottleSettings"
    AuthorizerType:
      type: string
      enum:
        - TOKEN
        - REQUEST
        - COGNITO_USER_POOLS
      description: The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
    ListOfARNs:
      type: array
      items:
        $ref: "#/components/schemas/ProviderARN"
    NullableInteger:
      type: integer
    ListOfAuthorizer:
      type: array
      items:
        $ref: "#/components/schemas/Authorizer"
    ListOfBasePathMapping:
      type: array
      items:
        $ref: "#/components/schemas/BasePathMapping"
    Blob:
      type: string
    CacheClusterSize:
      type: string
      enum:
        - "0.5"
        - "1.6"
        - "6.1"
        - "13.5"
        - "28.4"
        - "58.2"
        - "118"
        - "237"
      description: Returns the size of the CacheCluster.
    CacheClusterStatus:
      type: string
      enum:
        - CREATE_IN_PROGRESS
        - AVAILABLE
        - DELETE_IN_PROGRESS
        - NOT_AVAILABLE
        - FLUSH_IN_PROGRESS
      description: Returns the status of the CacheCluster.
    CanarySettings:
      type: object
      properties:
        percentTraffic:
          allOf:
            - $ref: "#/components/schemas/Double"
            - description: The percent (0-100) of traffic diverted to a canary deployment.
        deploymentId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ID of the canary deployment.
        stageVariableOverrides:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
        useStageCache:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
      description: Configuration settings of a canary deployment.
    ListOfClientCertificate:
      type: array
      items:
        $ref: "#/components/schemas/ClientCertificate"
    ConnectionType:
      type: string
      enum:
        - INTERNET
        - VPC_LINK
    ContentHandlingStrategy:
      type: string
      enum:
        - CONVERT_TO_BINARY
        - CONVERT_TO_TEXT
    ListOfStageKeys:
      type: array
      items:
        $ref: "#/components/schemas/StageKey"
    CreateApiKeyRequest:
      type: object
      title: CreateApiKeyRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the ApiKey.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the ApiKey.
        enabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether the ApiKey can be used by callers.
        generateDistinctId:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies a value of the API key.
        stageKeys:
          allOf:
            - $ref: "#/components/schemas/ListOfStageKeys"
            - description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
        customerId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: Request to create an ApiKey resource.
    CreateAuthorizerRequest:
      type: object
      required:
        - name
        - type
      title: CreateAuthorizerRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the authorizer.
        type:
          allOf:
            - $ref: "#/components/schemas/AuthorizerType"
            - description: The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
        providerARNs:
          allOf:
            - $ref: "#/components/schemas/ListOfARNs"
            - description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. "
        authType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        authorizerUri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.
        authorizerCredentials:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        identitySource:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
        identityValidationExpression:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.
        authorizerResultTtlInSeconds:
          allOf:
            - $ref: "#/components/schemas/NullableInteger"
            - description: The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
      description: Request to add a new Authorizer to an existing RestApi resource.
    CreateBasePathMappingRequest:
      type: object
      required:
        - restApiId
      title: CreateBasePathMappingRequest
      properties:
        basePath:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.
        restApiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The string identifier of the associated RestApi.
        stage:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.
      description: Requests API Gateway to create a new BasePathMapping resource.
    DeploymentCanarySettings:
      type: object
      properties:
        percentTraffic:
          allOf:
            - $ref: "#/components/schemas/Double"
            - description: The percentage (0.0-100.0) of traffic routed to the canary deployment.
        stageVariableOverrides:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
        useStageCache:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
      description: The input configuration for a canary deployment.
    CreateDeploymentRequest:
      type: object
      title: CreateDeploymentRequest
      properties:
        stageName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the Stage resource for the Deployment resource to create.
        stageDescription:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the Stage resource for the Deployment resource to create.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description for the Deployment resource to create.
        cacheClusterEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Enables a cache cluster for the Stage resource specified in the input.
        cacheClusterSize:
          allOf:
            - $ref: "#/components/schemas/CacheClusterSize"
            - description: The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.
        variables:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
        canarySettings:
          allOf:
            - $ref: "#/components/schemas/DeploymentCanarySettings"
            - description: "The input configuration for the canary deployment when the deployment is a canary release deployment. "
        tracingEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Specifies whether active tracing with X-ray is enabled for the Stage.
      description: Requests API Gateway to create a Deployment resource.
    DocumentationPartLocation:
      type: object
      required:
        - type
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/DocumentationPartType"
            - description: The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.
        path:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.
        method:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.
        statusCode:
          allOf:
            - $ref: "#/components/schemas/DocumentationPartLocationStatusCode"
            - description: The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.
      description: Specifies the target API entity to which the documentation applies.
    CreateDocumentationPartRequest:
      type: object
      required:
        - location
        - properties
      title: CreateDocumentationPartRequest
      properties:
        location:
          allOf:
            - $ref: "#/components/schemas/DocumentationPartLocation"
            - description: The location of the targeted API entity of the to-be-created documentation part.
        properties:
          description: The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
      description: Creates a new documentation part of a given API.
    CreateDocumentationVersionRequest:
      type: object
      required:
        - documentationVersion
      title: CreateDocumentationVersionRequest
      properties:
        documentationVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version identifier of the new snapshot.
        stageName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The stage name to be associated with the new documentation snapshot.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description about the new documentation snapshot.
      description: Creates a new documentation version of a given API.
    EndpointConfiguration:
      type: object
      properties:
        types:
          allOf:
            - $ref: "#/components/schemas/ListOfEndpointType"
            - description: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.
        vpcEndpointIds:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.
      description: "The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. "
    SecurityPolicy:
      type: string
      enum:
        - TLS_1_0
        - TLS_1_2
    MutualTlsAuthenticationInput:
      type: object
      properties:
        truststoreUri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
        truststoreVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket
      description: The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
    CreateDomainNameRequest:
      type: object
      required:
        - domainName
      title: CreateDomainNameRequest
      properties:
        domainName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the DomainName resource.
        certificateName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
        certificateBody:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority."
        certificatePrivateKey:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "[Deprecated] Your edge-optimized endpoint's domain name certificate's private key."
        certificateChain:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path."
        certificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        regionalCertificateName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
        regionalCertificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
        endpointConfiguration:
          allOf:
            - $ref: "#/components/schemas/EndpointConfiguration"
            - description: "The endpoint configuration of this DomainName showing the endpoint types of the domain name. "
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
        securityPolicy:
          allOf:
            - $ref: "#/components/schemas/SecurityPolicy"
            - description: The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        mutualTlsAuthentication:
          $ref: "#/components/schemas/MutualTlsAuthenticationInput"
        ownershipVerificationCertificateArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      description: A request to create a new domain name.
    CreateModelRequest:
      type: object
      required:
        - name
        - contentType
      title: CreateModelRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the model. Must be alphanumeric.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the model.
        schema:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.
        contentType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The content-type for the model.
      description: Request to add a new Model to an existing RestApi resource.
    CreateRequestValidatorRequest:
      type: object
      title: CreateRequestValidatorRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the to-be-created RequestValidator.
        validateRequestBody:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).
        validateRequestParameters:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.
      description: Creates a RequestValidator of a given RestApi.
    CreateResourceRequest:
      type: object
      required:
        - pathPart
      title: CreateResourceRequest
      properties:
        pathPart:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The last path segment for this resource.
      description: Requests API Gateway to create a Resource resource.
    CreateRestApiRequest:
      type: object
      required:
        - name
      title: CreateRestApiRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the RestApi.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the RestApi.
        version:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A version identifier for the API.
        cloneFrom:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ID of the RestApi that you want to clone from.
        binaryMediaTypes:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        minimumCompressionSize:
          allOf:
            - $ref: "#/components/schemas/NullableInteger"
            - description: A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        apiKeySource:
          allOf:
            - $ref: "#/components/schemas/ApiKeySourceType"
            - description: "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer."
        endpointConfiguration:
          allOf:
            - $ref: "#/components/schemas/EndpointConfiguration"
            - description: "The endpoint configuration of this RestApi showing the endpoint types of the API. "
        policy:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
        disableExecuteApiEndpoint:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint
      description: The POST Request to add a new RestApi resource to your collection.
    CreateStageRequest:
      type: object
      required:
        - stageName
        - deploymentId
      title: CreateStageRequest
      properties:
        stageName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
        deploymentId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of the Deployment resource for the Stage resource.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the Stage resource.
        cacheClusterEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Whether cache clustering is enabled for the stage.
        cacheClusterSize:
          allOf:
            - $ref: "#/components/schemas/CacheClusterSize"
            - description: The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.
        variables:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
        documentationVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the associated API documentation.
        canarySettings:
          allOf:
            - $ref: "#/components/schemas/CanarySettings"
            - description: The canary deployment settings of this stage.
        tracingEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether active tracing with X-ray is enabled for the Stage.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: Requests API Gateway to create a Stage resource.
    CreateUsagePlanKeyRequest:
      type: object
      required:
        - keyId
        - keyType
      title: CreateUsagePlanKeyRequest
      properties:
        keyId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of a UsagePlanKey resource for a plan customer.
        keyType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The type of a UsagePlanKey resource for a plan customer.
      description: The POST request to create a usage plan key for adding an existing API key to a usage plan.
    ListOfApiStage:
      type: array
      items:
        $ref: "#/components/schemas/ApiStage"
    QuotaSettings:
      type: object
      properties:
        limit:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The target maximum number of requests that can be made in a given time period.
        offset:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The number of requests subtracted from the given limit in the initial time period.
        period:
          allOf:
            - $ref: "#/components/schemas/QuotaPeriodType"
            - description: The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
      description: Quotas configured for a usage plan.
    CreateUsagePlanRequest:
      type: object
      required:
        - name
      title: CreateUsagePlanRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of the usage plan.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the usage plan.
        apiStages:
          allOf:
            - $ref: "#/components/schemas/ListOfApiStage"
            - description: The associated API stages of the usage plan.
        throttle:
          allOf:
            - $ref: "#/components/schemas/ThrottleSettings"
            - description: The throttling limits of the usage plan.
        quota:
          allOf:
            - $ref: "#/components/schemas/QuotaSettings"
            - description: The quota of the usage plan.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload.
    CreateVpcLinkRequest:
      type: object
      required:
        - name
        - targetArns
      title: CreateVpcLinkRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name used to label and identify the VPC link.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the VPC link.
        targetArns:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
    DeleteApiKeyRequest:
      type: object
      title: DeleteApiKeyRequest
      properties: {}
      description: A request to delete the ApiKey resource.
    DeleteAuthorizerRequest:
      type: object
      title: DeleteAuthorizerRequest
      properties: {}
      description: Request to delete an existing Authorizer resource.
    DeleteBasePathMappingRequest:
      type: object
      title: DeleteBasePathMappingRequest
      properties: {}
      description: A request to delete the BasePathMapping resource.
    DeleteClientCertificateRequest:
      type: object
      title: DeleteClientCertificateRequest
      properties: {}
      description: A request to delete the ClientCertificate resource.
    DeleteDeploymentRequest:
      type: object
      title: DeleteDeploymentRequest
      properties: {}
      description: Requests API Gateway to delete a Deployment resource.
    DeleteDocumentationPartRequest:
      type: object
      title: DeleteDocumentationPartRequest
      properties: {}
      description: Deletes an existing documentation part of an API.
    DeleteDocumentationVersionRequest:
      type: object
      title: DeleteDocumentationVersionRequest
      properties: {}
      description: Deletes an existing documentation version of an API.
    DeleteDomainNameRequest:
      type: object
      title: DeleteDomainNameRequest
      properties: {}
      description: A request to delete the DomainName resource.
    GatewayResponseType:
      type: string
      enum:
        - DEFAULT_4XX
        - DEFAULT_5XX
        - RESOURCE_NOT_FOUND
        - UNAUTHORIZED
        - INVALID_API_KEY
        - ACCESS_DENIED
        - AUTHORIZER_FAILURE
        - AUTHORIZER_CONFIGURATION_ERROR
        - INVALID_SIGNATURE
        - EXPIRED_TOKEN
        - MISSING_AUTHENTICATION_TOKEN
        - INTEGRATION_FAILURE
        - INTEGRATION_TIMEOUT
        - API_CONFIGURATION_ERROR
        - UNSUPPORTED_MEDIA_TYPE
        - BAD_REQUEST_PARAMETERS
        - BAD_REQUEST_BODY
        - REQUEST_TOO_LARGE
        - THROTTLED
        - QUOTA_EXCEEDED
        - WAF_FILTERED
    DeleteGatewayResponseRequest:
      type: object
      title: DeleteGatewayResponseRequest
      properties: {}
      description: Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
    DeleteIntegrationRequest:
      type: object
      title: DeleteIntegrationRequest
      properties: {}
      description: Represents a delete integration request.
    StatusCode:
      type: string
      pattern: "[1-5]\\d\\d"
      description: The status code.
    DeleteIntegrationResponseRequest:
      type: object
      title: DeleteIntegrationResponseRequest
      properties: {}
      description: Represents a delete integration response request.
    DeleteMethodRequest:
      type: object
      title: DeleteMethodRequest
      properties: {}
      description: Request to delete an existing Method resource.
    DeleteMethodResponseRequest:
      type: object
      title: DeleteMethodResponseRequest
      properties: {}
      description: A request to delete an existing MethodResponse resource.
    DeleteModelRequest:
      type: object
      title: DeleteModelRequest
      properties: {}
      description: Request to delete an existing model in an existing RestApi resource.
    DeleteRequestValidatorRequest:
      type: object
      title: DeleteRequestValidatorRequest
      properties: {}
      description: Deletes a specified RequestValidator of a given RestApi.
    DeleteResourceRequest:
      type: object
      title: DeleteResourceRequest
      properties: {}
      description: Request to delete a Resource.
    DeleteRestApiRequest:
      type: object
      title: DeleteRestApiRequest
      properties: {}
      description: Request to delete the specified API from your collection.
    DeleteStageRequest:
      type: object
      title: DeleteStageRequest
      properties: {}
      description: Requests API Gateway to delete a Stage resource.
    DeleteUsagePlanKeyRequest:
      type: object
      title: DeleteUsagePlanKeyRequest
      properties: {}
      description: The DELETE request to delete a usage plan key and remove the underlying API key from the associated usage plan.
    DeleteUsagePlanRequest:
      type: object
      title: DeleteUsagePlanRequest
      properties: {}
      description: The DELETE request to delete a usage plan of a given plan Id.
    DeleteVpcLinkRequest:
      type: object
      title: DeleteVpcLinkRequest
      properties: {}
      description: Deletes an existing VpcLink of a specified identifier.
    PathToMapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MapOfMethodSnapshot"
    ListOfDeployment:
      type: array
      items:
        $ref: "#/components/schemas/Deployment"
    ListOfDocumentationPart:
      type: array
      items:
        $ref: "#/components/schemas/DocumentationPart"
    ListOfDocumentationVersion:
      type: array
      items:
        $ref: "#/components/schemas/DocumentationVersion"
    DomainNameStatus:
      type: string
      enum:
        - AVAILABLE
        - UPDATING
        - PENDING
        - PENDING_CERTIFICATE_REIMPORT
        - PENDING_OWNERSHIP_VERIFICATION
    MutualTlsAuthentication:
      type: object
      properties:
        truststoreUri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
        truststoreVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
        truststoreWarnings:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.
      description: The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
    ListOfDomainName:
      type: array
      items:
        $ref: "#/components/schemas/DomainName"
    EndpointType:
      type: string
      enum:
        - REGIONAL
        - EDGE
        - PRIVATE
      description: The endpoint type. The valid values are <code>EDGE</code> for edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code> for regional API endpoint setup, most suitable for calling from AWS Region; and <code>PRIVATE</code> for private APIs.
    FlushStageAuthorizersCacheRequest:
      type: object
      title: FlushStageAuthorizersCacheRequest
      properties: {}
      description: Request to flush authorizer cache entries on a specified stage.
    FlushStageCacheRequest:
      type: object
      title: FlushStageCacheRequest
      properties: {}
      description: Requests API Gateway to flush a stage's cache.
    ListOfGatewayResponse:
      type: array
      items:
        $ref: "#/components/schemas/GatewayResponse"
    GenerateClientCertificateRequest:
      type: object
      title: GenerateClientCertificateRequest
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the ClientCertificate.
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: A request to generate a ClientCertificate resource.
    GetAccountRequest:
      type: object
      title: GetAccountRequest
      properties: {}
      description: Requests API Gateway to get information about the current Account resource.
    GetApiKeyRequest:
      type: object
      title: GetApiKeyRequest
      properties: {}
      description: A request to get information about the current ApiKey resource.
    GetApiKeysRequest:
      type: object
      title: GetApiKeysRequest
      properties: {}
      description: A request to get information about the current ApiKeys resource.
    GetAuthorizerRequest:
      type: object
      title: GetAuthorizerRequest
      properties: {}
      description: Request to describe an existing Authorizer resource.
    GetAuthorizersRequest:
      type: object
      title: GetAuthorizersRequest
      properties: {}
      description: Request to describe an existing Authorizers resource.
    GetBasePathMappingRequest:
      type: object
      title: GetBasePathMappingRequest
      properties: {}
      description: Request to describe a BasePathMapping resource.
    GetBasePathMappingsRequest:
      type: object
      title: GetBasePathMappingsRequest
      properties: {}
      description: A request to get information about a collection of BasePathMapping resources.
    GetClientCertificateRequest:
      type: object
      title: GetClientCertificateRequest
      properties: {}
      description: A request to get information about the current ClientCertificate resource.
    GetClientCertificatesRequest:
      type: object
      title: GetClientCertificatesRequest
      properties: {}
      description: A request to get information about a collection of ClientCertificate resources.
    GetDeploymentRequest:
      type: object
      title: GetDeploymentRequest
      properties: {}
      description: Requests API Gateway to get information about a Deployment resource.
    GetDeploymentsRequest:
      type: object
      title: GetDeploymentsRequest
      properties: {}
      description: Requests API Gateway to get information about a Deployments collection.
    GetDocumentationPartRequest:
      type: object
      title: GetDocumentationPartRequest
      properties: {}
      description: Gets a specified documentation part of a given API.
    LocationStatusType:
      type: string
      enum:
        - DOCUMENTED
        - UNDOCUMENTED
    GetDocumentationPartsRequest:
      type: object
      title: GetDocumentationPartsRequest
      properties: {}
      description: Gets the documentation parts of an API. The result may be filtered by the type, name, or path of API entities (targets).
    GetDocumentationVersionRequest:
      type: object
      title: GetDocumentationVersionRequest
      properties: {}
      description: Gets a documentation snapshot of an API.
    GetDocumentationVersionsRequest:
      type: object
      title: GetDocumentationVersionsRequest
      properties: {}
      description: Gets the documentation versions of an API.
    GetDomainNameRequest:
      type: object
      title: GetDomainNameRequest
      properties: {}
      description: Request to get the name of a DomainName resource.
    GetDomainNamesRequest:
      type: object
      title: GetDomainNamesRequest
      properties: {}
      description: Request to describe a collection of DomainName resources.
    GetExportRequest:
      type: object
      title: GetExportRequest
      properties: {}
      description: Request a new export of a RestApi for a particular Stage.
    GetGatewayResponseRequest:
      type: object
      title: GetGatewayResponseRequest
      properties: {}
      description: Gets a GatewayResponse of a specified response type on the given RestApi.
    GetGatewayResponsesRequest:
      type: object
      title: GetGatewayResponsesRequest
      properties: {}
      description: Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
    GetIntegrationRequest:
      type: object
      title: GetIntegrationRequest
      properties: {}
      description: Represents a request to get the integration configuration.
    GetIntegrationResponseRequest:
      type: object
      title: GetIntegrationResponseRequest
      properties: {}
      description: Represents a get integration response request.
    GetMethodRequest:
      type: object
      title: GetMethodRequest
      properties: {}
      description: Request to describe an existing Method resource.
    GetMethodResponseRequest:
      type: object
      title: GetMethodResponseRequest
      properties: {}
      description: Request to describe a MethodResponse resource.
    GetModelRequest:
      type: object
      title: GetModelRequest
      properties: {}
      description: Request to list information about a model in an existing RestApi resource.
    GetModelTemplateRequest:
      type: object
      title: GetModelTemplateRequest
      properties: {}
      description: Request to generate a sample mapping template used to transform the payload.
    GetModelsRequest:
      type: object
      title: GetModelsRequest
      properties: {}
      description: Request to list existing Models defined for a RestApi resource.
    GetRequestValidatorRequest:
      type: object
      title: GetRequestValidatorRequest
      properties: {}
      description: Gets a RequestValidator of a given RestApi.
    GetRequestValidatorsRequest:
      type: object
      title: GetRequestValidatorsRequest
      properties: {}
      description: Gets the RequestValidators collection of a given RestApi.
    GetResourceRequest:
      type: object
      title: GetResourceRequest
      properties: {}
      description: Request to list information about a resource.
    GetResourcesRequest:
      type: object
      title: GetResourcesRequest
      properties: {}
      description: Request to list information about a collection of resources.
    GetRestApiRequest:
      type: object
      title: GetRestApiRequest
      properties: {}
      description: "The GET request to list an existing RestApi defined for your collection. "
    GetRestApisRequest:
      type: object
      title: GetRestApisRequest
      properties: {}
      description: The GET request to list existing RestApis defined for your collection.
    GetSdkRequest:
      type: object
      title: GetSdkRequest
      properties: {}
      description: Request a new generated client SDK for a RestApi and Stage.
    GetSdkTypeRequest:
      type: object
      title: GetSdkTypeRequest
      properties: {}
      description: Get an SdkType instance.
    GetSdkTypesRequest:
      type: object
      title: GetSdkTypesRequest
      properties: {}
      description: Get the SdkTypes collection.
    GetStageRequest:
      type: object
      title: GetStageRequest
      properties: {}
      description: Requests API Gateway to get information about a Stage resource.
    GetStagesRequest:
      type: object
      title: GetStagesRequest
      properties: {}
      description: Requests API Gateway to get information about one or more Stage resources.
    GetTagsRequest:
      type: object
      title: GetTagsRequest
      properties: {}
      description: Gets the Tags collection for a given resource.
    GetUsagePlanKeyRequest:
      type: object
      title: GetUsagePlanKeyRequest
      properties: {}
      description: The GET request to get a usage plan key of a given key identifier.
    GetUsagePlanKeysRequest:
      type: object
      title: GetUsagePlanKeysRequest
      properties: {}
      description: The GET request to get all the usage plan keys representing the API keys added to a specified usage plan.
    GetUsagePlanRequest:
      type: object
      title: GetUsagePlanRequest
      properties: {}
      description: The GET request to get a usage plan of a given plan identifier.
    GetUsagePlansRequest:
      type: object
      title: GetUsagePlansRequest
      properties: {}
      description: The GET request to get all the usage plans of the caller's account.
    GetUsageRequest:
      type: object
      title: GetUsageRequest
      properties: {}
      description: The GET request to get the usage data of a usage plan in a specified time interval.
    GetVpcLinkRequest:
      type: object
      title: GetVpcLinkRequest
      properties: {}
      description: Gets a specified VPC link under the caller's account in a region.
    GetVpcLinksRequest:
      type: object
      title: GetVpcLinksRequest
      properties: {}
      description: Gets the VpcLinks collection under the caller's account in a selected region.
    ImportApiKeysRequest:
      type: object
      required:
        - body
      title: ImportApiKeysRequest
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The payload of the POST request to import API keys. For the payload format, see API Key File Format.
      description: The POST request to import API keys from an external source, such as a CSV-formatted file.
    PutMode:
      type: string
      enum:
        - merge
        - overwrite
    ImportDocumentationPartsRequest:
      type: object
      required:
        - body
      title: ImportDocumentationPartsRequest
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.
      description: "Import documentation parts from an external (e.g., OpenAPI) definition file. "
    ImportRestApiRequest:
      type: object
      required:
        - body
      title: ImportRestApiRequest
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.
      description: A POST request to import an API to API Gateway using an input of an API definition file.
    IntegrationType:
      type: string
      enum:
        - HTTP
        - AWS
        - MOCK
        - HTTP_PROXY
        - AWS_PROXY
      description: "The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. "
    MapOfIntegrationResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/IntegrationResponse"
    TlsConfig:
      type: object
      properties:
        insecureSkipVerification:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: <p>Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations.</p> <important> <p>Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks.</p> </important>
      description: Specifies the TLS configuration for an integration.
    Long:
      type: integer
    ListOfLong:
      type: array
      items:
        $ref: "#/components/schemas/Long"
    ListOfModel:
      type: array
      items:
        $ref: "#/components/schemas/Model"
    ListOfPatchOperation:
      type: array
      description: A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
      items:
        $ref: "#/components/schemas/PatchOperation"
    ListOfRequestValidator:
      type: array
      items:
        $ref: "#/components/schemas/RequestValidator"
    ListOfResource:
      type: array
      items:
        $ref: "#/components/schemas/Resource"
    ListOfRestApi:
      type: array
      items:
        $ref: "#/components/schemas/RestApi"
    SdkConfigurationProperty:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The name of a an SdkType configuration property.
        friendlyName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user-friendly name of an SdkType configuration property.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of an SdkType configuration property.
        required:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).
        defaultValue:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The default value of an SdkType configuration property.
      description: A configuration property of an SDK type.
    ListOfSdkConfigurationProperty:
      type: array
      items:
        $ref: "#/components/schemas/SdkConfigurationProperty"
    ListOfSdkType:
      type: array
      items:
        $ref: "#/components/schemas/SdkType"
    ListOfStage:
      type: array
      items:
        $ref: "#/components/schemas/Stage"
    ListOfUsage:
      type: array
      items:
        $ref: "#/components/schemas/ListOfLong"
    ListOfUsagePlan:
      type: array
      items:
        $ref: "#/components/schemas/UsagePlan"
    ListOfUsagePlanKey:
      type: array
      items:
        $ref: "#/components/schemas/UsagePlanKey"
    ListOfVpcLink:
      type: array
      items:
        $ref: "#/components/schemas/VpcLink"
    MapOfKeyUsages:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ListOfUsage"
    MapOfMethod:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Method"
    MapOfMethodResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MethodResponse"
    MethodSetting:
      type: object
      properties:
        metricsEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is <code>/{method_setting_key}/metrics/enabled</code>, and the value is a Boolean.
        loggingLevel:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/loglevel</code>, and the available levels are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.
        dataTraceEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/dataTrace</code>, and the value is a Boolean.
        throttlingBurstLimit:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: Specifies the throttling burst limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/burstLimit</code>, and the value is an integer.
        throttlingRateLimit:
          allOf:
            - $ref: "#/components/schemas/Double"
            - description: Specifies the throttling rate limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/rateLimit</code>, and the value is a double.
        cachingEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/enabled</code>, and the value is a Boolean.
        cacheTtlInSeconds:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/ttlInSeconds</code>, and the value is an integer.
        cacheDataEncrypted:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether the cached responses are encrypted. The PATCH path for this setting is <code>/{method_setting_key}/caching/dataEncrypted</code>, and the value is a Boolean.
        requireAuthorizationForCacheControl:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is <code>/{method_setting_key}/caching/requireAuthorizationForCacheControl</code>, and the value is a Boolean.
        unauthorizedCacheControlHeaderStrategy:
          allOf:
            - $ref: "#/components/schemas/UnauthorizedCacheControlHeaderStrategy"
            - description: Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is <code>/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy</code>, and the available values are <code>FAIL_WITH_403</code>, <code>SUCCEED_WITH_RESPONSE_HEADER</code>, <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>.
      description: Specifies the method setting properties.
    MapOfMethodSettings:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MethodSetting"
    MethodSnapshot:
      type: object
      properties:
        authorizationType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
        apiKeyRequired:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether the method requires a valid ApiKey.
      description: Represents a summary of a Method resource, given a particular date and time.
    MapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MethodSnapshot"
    MapOfStringToBoolean:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/NullableBoolean"
    MapOfStringToList:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ListOfString"
    UnauthorizedCacheControlHeaderStrategy:
      type: string
      enum:
        - FAIL_WITH_403
        - SUCCEED_WITH_RESPONSE_HEADER
        - SUCCEED_WITHOUT_RESPONSE_HEADER
    Op:
      type: string
      enum:
        - add
        - remove
        - replace
        - move
        - copy
        - test
    PutGatewayResponseRequest:
      type: object
      title: PutGatewayResponseRequest
      properties:
        statusCode:
          allOf:
            - $ref: "#/components/schemas/StatusCode"
            - description: The HTTP status code of the GatewayResponse.
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        responseTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
      description: Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
    PutIntegrationRequest:
      type: object
      required:
        - type
      title: PutIntegrationRequest
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/IntegrationType"
            - description: Specifies a put integration input's type.
        integrationHttpMethod:
          allOf:
            - $ref: "#/components/schemas/String"
            - xml:
                name: httpMethod
              description: The HTTP method for the integration.
        uri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.
        connectionType:
          allOf:
            - $ref: "#/components/schemas/ConnectionType"
            - description: The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
        connectionId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.
        credentials:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies whether credentials are required for a put integration.
        requestParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.
        requestTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        passthroughBehavior:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. "
        cacheNamespace:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.
        cacheKeyParameters:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.
        contentHandling:
          allOf:
            - $ref: "#/components/schemas/ContentHandlingStrategy"
            - description: <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
        timeoutInMillis:
          allOf:
            - $ref: "#/components/schemas/NullableInteger"
            - description: Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        tlsConfig:
          $ref: "#/components/schemas/TlsConfig"
      description: Sets up a method's integration.
    PutIntegrationResponseRequest:
      type: object
      title: PutIntegrationResponseRequest
      properties:
        selectionPattern:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the selection pattern of a put integration response.
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.
        responseTemplates:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Specifies a put integration response's templates.
        contentHandling:
          allOf:
            - $ref: "#/components/schemas/ContentHandlingStrategy"
            - description: <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
      description: Represents a put integration response request.
    PutMethodRequest:
      type: object
      required:
        - authorizationType
      title: PutMethodRequest
      properties:
        authorizationType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
        authorizerId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
        apiKeyRequired:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Specifies whether the method required a valid ApiKey.
        operationName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.
        requestParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToBoolean"
            - description: A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
        requestModels:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
        requestValidatorId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The identifier of a RequestValidator for validating the method request.
        authorizationScopes:
          allOf:
            - $ref: "#/components/schemas/ListOfString"
            - description: A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
      description: Request to add a method to an existing Resource resource.
    PutMethodResponseRequest:
      type: object
      title: PutMethodResponseRequest
      properties:
        responseParameters:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToBoolean"
            - description: A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)
        responseModels:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
      description: Request to add a MethodResponse to an existing Method resource.
    PutRestApiRequest:
      type: object
      required:
        - body
      title: PutRestApiRequest
      properties:
        body:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.
      description: A PUT request to update an existing API, with external API definitions specified as the request body.
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
      description: Adds or updates a tag on a given resource.
    TestInvokeAuthorizerRequest:
      type: object
      title: TestInvokeAuthorizerRequest
      properties:
        headers:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
        multiValueHeaders:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToList"
            - description: The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
        pathWithQueryString:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        body:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The simulated request body of an incoming invocation request.
        stageVariables:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map of stage variables to simulate an invocation on a deployed Stage.
        additionalContext:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map of additional context variables.
      description: Make a request to simulate the invocation of an Authorizer.
    TestInvokeMethodRequest:
      type: object
      title: TestInvokeMethodRequest
      properties:
        pathWithQueryString:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        body:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The simulated request body of an incoming invocation request.
        headers:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map of headers to simulate an incoming invocation request.
        multiValueHeaders:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToList"
            - description: The headers as a map from string to list of values to simulate an incoming invocation request.
        clientCertificateId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
        stageVariables:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: A key-value map of stage variables to simulate an invocation on a deployed Stage.
      description: Make a request to simulate the invocation of a Method.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
      description: Removes a tag from a given resource.
    UpdateAccountRequest:
      type: object
      title: UpdateAccountRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Requests API Gateway to change information about the current Account resource.
    UpdateApiKeyRequest:
      type: object
      title: UpdateApiKeyRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: A request to change information about an ApiKey resource.
    UpdateAuthorizerRequest:
      type: object
      title: UpdateAuthorizerRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Request to update an existing Authorizer resource.
    UpdateBasePathMappingRequest:
      type: object
      title: UpdateBasePathMappingRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: A request to change information about the BasePathMapping resource.
    UpdateClientCertificateRequest:
      type: object
      title: UpdateClientCertificateRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: A request to change information about an ClientCertificate resource.
    UpdateDeploymentRequest:
      type: object
      title: UpdateDeploymentRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Requests API Gateway to change information about a Deployment resource.
    UpdateDocumentationPartRequest:
      type: object
      title: UpdateDocumentationPartRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Updates an existing documentation part of a given API.
    UpdateDocumentationVersionRequest:
      type: object
      title: UpdateDocumentationVersionRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Updates an existing documentation version of an API.
    UpdateDomainNameRequest:
      type: object
      title: UpdateDomainNameRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: A request to change information about the DomainName resource.
    UpdateGatewayResponseRequest:
      type: object
      title: UpdateGatewayResponseRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Updates a GatewayResponse of a specified response type on the given RestApi.
    UpdateIntegrationRequest:
      type: object
      title: UpdateIntegrationRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Represents an update integration request.
    UpdateIntegrationResponseRequest:
      type: object
      title: UpdateIntegrationResponseRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Represents an update integration response request.
    UpdateMethodRequest:
      type: object
      title: UpdateMethodRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Request to update an existing Method resource.
    UpdateMethodResponseRequest:
      type: object
      title: UpdateMethodResponseRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: A request to update an existing MethodResponse resource.
    UpdateModelRequest:
      type: object
      title: UpdateModelRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Request to update an existing model in an existing RestApi resource.
    UpdateRequestValidatorRequest:
      type: object
      title: UpdateRequestValidatorRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Updates a RequestValidator of a given RestApi.
    UpdateResourceRequest:
      type: object
      title: UpdateResourceRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Request to change information about a Resource resource.
    UpdateRestApiRequest:
      type: object
      title: UpdateRestApiRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Request to update an existing RestApi resource in your collection.
    UpdateStageRequest:
      type: object
      title: UpdateStageRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Requests API Gateway to change information about a Stage resource.
    UpdateUsagePlanRequest:
      type: object
      title: UpdateUsagePlanRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: The PATCH request to update a usage plan of a given plan Id.
    UpdateUsageRequest:
      type: object
      title: UpdateUsageRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: The PATCH request to grant a temporary extension to the remaining quota of a usage plan associated with a specified API key.
    UpdateVpcLinkRequest:
      type: object
      title: UpdateVpcLinkRequest
      properties:
        patchOperations:
          allOf:
            - $ref: "#/components/schemas/ListOfPatchOperation"
            - description: For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.
      description: Updates an existing VpcLink of a specified identifier.
    VpcLinkStatus:
      type: string
      enum:
        - AVAILABLE
        - PENDING
        - DELETING
        - FAILED
security:
  - hmac: []
