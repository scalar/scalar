openapi: 3.0.0
info:
  version: 2017-07-25
  x-release: v4
  title: AWS AppSync
  description: AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: appsync
  x-aws-signingName: appsync
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appsync-2017-07-25.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/appsync/
servers:
  - url: http://appsync.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWSAppSync multi-region endpoint
  - url: https://appsync.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWSAppSync multi-region endpoint
  - url: http://appsync.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWSAppSync endpoint for China (Beijing) and China (Ningxia)
  - url: https://appsync.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWSAppSync endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  "/v1/domainnames/{domainName}/apiassociation":
    post:
      operationId: AssociateApi
      description: Maps an endpoint to your custom domain.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociateApiResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
              properties:
                apiId:
                  description: The API ID.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DisassociateApi
      description: Removes an <code>ApiAssociation</code> object from a custom domain.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisassociateApiResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
    get:
      operationId: GetApiAssociation
      description: Retrieves an <code>ApiAssociation</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiAssociationResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
  "/v1/apis/{apiId}/ApiCaches":
    post:
      operationId: CreateApiCache
      description: Creates a cache for the GraphQL API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiCacheResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ttl
                - apiCachingBehavior
                - type
              properties:
                ttl:
                  description: <p>TTL in seconds for cache entries.</p> <p>Valid values are 1–3,600 seconds.</p>
                  type: integer
                transitEncryptionEnabled:
                  description: Transit encryption flag when connecting to cache. You cannot update this setting after creation.
                  type: boolean
                atRestEncryptionEnabled:
                  description: At-rest encryption flag for cache. You cannot update this setting after creation.
                  type: boolean
                apiCachingBehavior:
                  description: "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>"
                  type: string
                  enum:
                    - FULL_REQUEST_CACHING
                    - PER_RESOLVER_CACHING
                type:
                  description: "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>"
                  type: string
                  enum:
                    - T2_SMALL
                    - T2_MEDIUM
                    - R4_LARGE
                    - R4_XLARGE
                    - R4_2XLARGE
                    - R4_4XLARGE
                    - R4_8XLARGE
                    - SMALL
                    - MEDIUM
                    - LARGE
                    - XLARGE
                    - LARGE_2X
                    - LARGE_4X
                    - LARGE_8X
                    - LARGE_12X
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteApiCache
      description: Deletes an <code>ApiCache</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteApiCacheResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
    get:
      operationId: GetApiCache
      description: Retrieves an <code>ApiCache</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiCacheResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
  "/v1/apis/{apiId}/apikeys":
    post:
      operationId: CreateApiKey
      description: Creates a unique key that you can distribute to clients who invoke your API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiKeyResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: ApiKeyLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyLimitExceededException"
        "487":
          description: ApiKeyValidityOutOfBoundsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyValidityOutOfBoundsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for your GraphQL API.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description of the purpose of the API key.
                  type: string
                expires:
                  description: From the creation time, the time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .
                  type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListApiKeys
      description: <p>Lists the API keys for a given API.</p> <note> <p>API keys are deleted automatically 60 days after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call <code>DeleteApiKey</code> to manually delete a key before it's automatically deleted.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListApiKeysResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  "/v1/apis/{apiId}/datasources":
    post:
      operationId: CreateDataSource
      description: Creates a <code>DataSource</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDataSourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID for the GraphQL API for the <code>DataSource</code>.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  description: A user-supplied name for the <code>DataSource</code>.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                description:
                  description: A description of the <code>DataSource</code>.
                  type: string
                type:
                  description: The type of the <code>DataSource</code>.
                  type: string
                  enum:
                    - AWS_LAMBDA
                    - AMAZON_DYNAMODB
                    - AMAZON_ELASTICSEARCH
                    - NONE
                    - HTTP
                    - RELATIONAL_DATABASE
                    - AMAZON_OPENSEARCH_SERVICE
                    - AMAZON_EVENTBRIDGE
                serviceRoleArn:
                  description: The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.
                  type: string
                dynamodbConfig:
                  description: Describes an Amazon DynamoDB data source configuration.
                  type: object
                  properties:
                    tableName:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The table name.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                    useCallerCredentials:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to use Amazon Cognito credentials with this data source.
                    deltaSyncConfig:
                      allOf:
                        - $ref: "#/components/schemas/DeltaSyncConfig"
                        - description: The <code>DeltaSyncConfig</code> for a versioned data source.
                    versioned:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to use Conflict Detection and Resolution with this data source.
                lambdaConfig:
                  description: Describes an Lambda data source configuration.
                  type: object
                  properties:
                    lambdaFunctionArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Resource Name (ARN) for the Lambda function.
                elasticsearchConfig:
                  description: <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The endpoint.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                openSearchServiceConfig:
                  description: Describes an OpenSearch data source configuration.
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The endpoint.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                httpConfig:
                  description: Describes an HTTP data source configuration.
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The HTTP URL endpoint. You can specify either the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If you don't specify the port, AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.
                    authorizationConfig:
                      allOf:
                        - $ref: "#/components/schemas/AuthorizationConfig"
                        - description: The authorization configuration in case the HTTP endpoint requires authorization.
                relationalDatabaseConfig:
                  description: Describes a relational database data source configuration.
                  type: object
                  properties:
                    relationalDatabaseSourceType:
                      allOf:
                        - $ref: "#/components/schemas/RelationalDatabaseSourceType"
                        - description: "<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon Relational Database Service (Amazon RDS) HTTP endpoint.</p> </li> </ul>"
                    rdsHttpEndpointConfig:
                      allOf:
                        - $ref: "#/components/schemas/RdsHttpEndpointConfig"
                        - description: Amazon RDS HTTP endpoint settings.
                eventBridgeConfig:
                  description: Describes an Amazon EventBridge bus data source configuration.
                  type: object
                  properties:
                    eventBusArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The ARN of the event bus. For more information about event buses, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html">Amazon EventBridge event buses</a>.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDataSources
      description: Lists the data sources for a given API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataSourcesResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  /v1/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a custom <code>DomainName</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDomainNameResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
                - certificateArn
              properties:
                domainName:
                  description: The domain name.
                  type: string
                  pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
                  minLength: 1
                  maxLength: 253
                certificateArn:
                  description: The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.
                  type: string
                  pattern: ^arn:[a-z-]*:(acm|iam):[a-z0-9-]*:\d{12}:(certificate|server-certificate)/[0-9A-Za-z_/-]*$
                  minLength: 20
                  maxLength: 2048
                description:
                  description: A description of the <code>DomainName</code>.
                  type: string
                  pattern: ^.*$
                  minLength: 0
                  maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDomainNames
      description: Lists multiple custom domain names.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDomainNamesResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The API token.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  "/v1/apis/{apiId}/functions":
    post:
      operationId: CreateFunction
      description: <p>Creates a <code>Function</code> object.</p> <p>A function is a reusable entity. You can use multiple functions to compose the resolver logic.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFunctionResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - dataSourceName
              properties:
                name:
                  description: The <code>Function</code> name. The function name does not have to be unique.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                description:
                  description: The <code>Function</code> description.
                  type: string
                dataSourceName:
                  description: The <code>Function</code> <code>DataSource</code> name.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                requestMappingTemplate:
                  description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                responseMappingTemplate:
                  description: The <code>Function</code> response mapping template.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                functionVersion:
                  description: The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29. Note that when using VTL and mapping templates, the <code>functionVersion</code> is required.
                  type: string
                syncConfig:
                  description: <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
                  type: object
                  properties:
                    conflictHandler:
                      allOf:
                        - $ref: "#/components/schemas/ConflictHandlerType"
                        - description: "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>"
                    conflictDetection:
                      allOf:
                        - $ref: "#/components/schemas/ConflictDetectionType"
                        - description: "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>"
                    lambdaConflictHandlerConfig:
                      allOf:
                        - $ref: "#/components/schemas/LambdaConflictHandlerConfig"
                        - description: The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.
                maxBatchSize:
                  description: The maximum batching size for a resolver.
                  type: integer
                  minimum: 0
                  maximum: 2000
                runtime:
                  description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/RuntimeName"
                        - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
                    runtimeVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
                code:
                  description: The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
                  type: string
                  minLength: 1
                  maxLength: 32768
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListFunctions
      description: List multiple functions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFunctionsResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  /v1/apis:
    post:
      operationId: CreateGraphqlApi
      description: Creates a <code>GraphqlApi</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGraphqlApiResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ApiLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiLimitExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - authenticationType
              properties:
                name:
                  description: A user-supplied name for the <code>GraphqlApi</code>.
                  type: string
                logConfig:
                  description: The Amazon CloudWatch Logs configuration.
                  type: object
                  properties:
                    fieldLogLevel:
                      allOf:
                        - $ref: "#/components/schemas/FieldLogLevel"
                        - description: "<p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>"
                    cloudWatchLogsRoleArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The service role that AppSync assumes to publish to CloudWatch logs in your account.
                    excludeVerboseContent:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.
                authenticationType:
                  description: "The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda."
                  type: string
                  enum:
                    - API_KEY
                    - AWS_IAM
                    - AMAZON_COGNITO_USER_POOLS
                    - OPENID_CONNECT
                    - AWS_LAMBDA
                userPoolConfig:
                  description: Describes an Amazon Cognito user pool configuration.
                  type: object
                  properties:
                    userPoolId:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The user pool ID.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region in which the user pool was created.
                    defaultAction:
                      allOf:
                        - $ref: "#/components/schemas/DefaultAction"
                        - description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
                    appIdClientRegex:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.
                openIDConnectConfig:
                  description: Describes an OpenID Connect (OIDC) configuration.
                  type: object
                  properties:
                    issuer:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
                    clientId:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time.
                    iatTTL:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: The number of milliseconds that a token is valid after it's issued to a user.
                    authTTL:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: The number of milliseconds that a token is valid after being authenticated.
                tags:
                  description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                additionalAuthenticationProviders:
                  description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
                  type: array
                  items:
                    $ref: "#/components/schemas/AdditionalAuthenticationProvider"
                xrayEnabled:
                  description: A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.
                  type: boolean
                lambdaAuthorizerConfig:
                  description: A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.
                  type: object
                  properties:
                    authorizerResultTtlInSeconds:
                      allOf:
                        - $ref: "#/components/schemas/TTL"
                        - description: The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response. A value of 0 disables caching of responses.
                    authorizerUri:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: '<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>'
                    identityValidationExpression:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: A regular expression for validation of tokens before the Lambda function is called.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListGraphqlApis
      description: Lists your GraphQL APIs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGraphqlApisResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  "/v1/apis/{apiId}/types/{typeName}/resolvers":
    post:
      operationId: CreateResolver
      description: <p>Creates a <code>Resolver</code> object.</p> <p>A resolver converts incoming requests into a format that a data source can understand, and converts the data source's responses into GraphQL.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResolverResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for the GraphQL API for which the resolver is being created.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The name of the <code>Type</code>.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fieldName
              properties:
                fieldName:
                  description: The name of the field to attach the resolver to.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                dataSourceName:
                  description: The name of the data source for which the resolver is being created.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                requestMappingTemplate:
                  description: <p>The mapping template to use for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                responseMappingTemplate:
                  description: The mapping template to use for responses from the data source.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                kind:
                  description: "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"
                  type: string
                  enum:
                    - UNIT
                    - PIPELINE
                pipelineConfig:
                  description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
                  type: object
                  properties:
                    functions:
                      allOf:
                        - $ref: "#/components/schemas/FunctionsIds"
                        - description: A list of <code>Function</code> objects.
                syncConfig:
                  description: <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
                  type: object
                  properties:
                    conflictHandler:
                      allOf:
                        - $ref: "#/components/schemas/ConflictHandlerType"
                        - description: "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>"
                    conflictDetection:
                      allOf:
                        - $ref: "#/components/schemas/ConflictDetectionType"
                        - description: "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>"
                    lambdaConflictHandlerConfig:
                      allOf:
                        - $ref: "#/components/schemas/LambdaConflictHandlerConfig"
                        - description: The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.
                cachingConfig:
                  description: The caching configuration for a resolver that has caching activated.
                  type: object
                  properties:
                    ttl:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: <p>The TTL in seconds for a resolver that has caching activated.</p> <p>Valid values are 1–3,600 seconds.</p>
                    cachingKeys:
                      allOf:
                        - $ref: "#/components/schemas/CachingKeys"
                        - description: <p>The caching keys for a resolver that has caching activated.</p> <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
                maxBatchSize:
                  description: The maximum batching size for a resolver.
                  type: integer
                  minimum: 0
                  maximum: 2000
                runtime:
                  description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/RuntimeName"
                        - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
                    runtimeVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
                code:
                  description: The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
                  type: string
                  minLength: 1
                  maxLength: 32768
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListResolvers
      description: Lists the resolvers for a given API and type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResolversResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
  "/v1/apis/{apiId}/types":
    post:
      operationId: CreateType
      description: Creates a <code>Type</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTypeResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - definition
                - format
              properties:
                definition:
                  description: <p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>
                  type: string
                format:
                  description: "The type format: SDL or JSON."
                  type: string
                  enum:
                    - SDL
                    - JSON
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/apikeys/{id}":
    delete:
      operationId: DeleteApiKey
      description: Deletes an API key.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteApiKeyResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The ID for the API key.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: UpdateApiKey
      description: Updates an API key. You can update the key as long as it's not deleted.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiKeyResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ApiKeyValidityOutOfBoundsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyValidityOutOfBoundsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for the GraphQL API.
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The API key ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description of the purpose of the API key.
                  type: string
                expires:
                  description: From the update time, the time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .
                  type: integer
  "/v1/apis/{apiId}/datasources/{name}":
    delete:
      operationId: DeleteDataSource
      description: Deletes a <code>DataSource</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDataSourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The name of the data source.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDataSource
      description: Retrieves a <code>DataSource</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataSourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The name of the data source.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    post:
      operationId: UpdateDataSource
      description: Updates a <code>DataSource</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDataSourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The new name for the data source.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                description:
                  description: The new description for the data source.
                  type: string
                type:
                  description: The new data source type.
                  type: string
                  enum:
                    - AWS_LAMBDA
                    - AMAZON_DYNAMODB
                    - AMAZON_ELASTICSEARCH
                    - NONE
                    - HTTP
                    - RELATIONAL_DATABASE
                    - AMAZON_OPENSEARCH_SERVICE
                    - AMAZON_EVENTBRIDGE
                serviceRoleArn:
                  description: The new service role Amazon Resource Name (ARN) for the data source.
                  type: string
                dynamodbConfig:
                  description: Describes an Amazon DynamoDB data source configuration.
                  type: object
                  properties:
                    tableName:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The table name.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                    useCallerCredentials:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to use Amazon Cognito credentials with this data source.
                    deltaSyncConfig:
                      allOf:
                        - $ref: "#/components/schemas/DeltaSyncConfig"
                        - description: The <code>DeltaSyncConfig</code> for a versioned data source.
                    versioned:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to use Conflict Detection and Resolution with this data source.
                lambdaConfig:
                  description: Describes an Lambda data source configuration.
                  type: object
                  properties:
                    lambdaFunctionArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Resource Name (ARN) for the Lambda function.
                elasticsearchConfig:
                  description: <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The endpoint.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                openSearchServiceConfig:
                  description: Describes an OpenSearch data source configuration.
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The endpoint.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region.
                httpConfig:
                  description: Describes an HTTP data source configuration.
                  type: object
                  properties:
                    endpoint:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The HTTP URL endpoint. You can specify either the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If you don't specify the port, AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.
                    authorizationConfig:
                      allOf:
                        - $ref: "#/components/schemas/AuthorizationConfig"
                        - description: The authorization configuration in case the HTTP endpoint requires authorization.
                relationalDatabaseConfig:
                  description: Describes a relational database data source configuration.
                  type: object
                  properties:
                    relationalDatabaseSourceType:
                      allOf:
                        - $ref: "#/components/schemas/RelationalDatabaseSourceType"
                        - description: "<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon Relational Database Service (Amazon RDS) HTTP endpoint.</p> </li> </ul>"
                    rdsHttpEndpointConfig:
                      allOf:
                        - $ref: "#/components/schemas/RdsHttpEndpointConfig"
                        - description: Amazon RDS HTTP endpoint settings.
                eventBridgeConfig:
                  description: Describes an Amazon EventBridge bus data source configuration.
                  type: object
                  properties:
                    eventBusArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The ARN of the event bus. For more information about event buses, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html">Amazon EventBridge event buses</a>.
  "/v1/domainnames/{domainName}":
    delete:
      operationId: DeleteDomainName
      description: Deletes a custom <code>DomainName</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDomainNameResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDomainName
      description: Retrieves a custom <code>DomainName</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDomainNameResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
    post:
      operationId: UpdateDomainName
      description: Updates a custom <code>DomainName</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDomainNameResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
            pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
            minLength: 1
            maxLength: 253
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description of the <code>DomainName</code>.
                  type: string
                  pattern: ^.*$
                  minLength: 0
                  maxLength: 255
  "/v1/apis/{apiId}/functions/{functionId}":
    delete:
      operationId: DeleteFunction
      description: Deletes a <code>Function</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFunctionResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
        - name: functionId
          in: path
          required: true
          description: The <code>Function</code> ID.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetFunction
      description: Get a <code>Function</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFunctionResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
        - name: functionId
          in: path
          required: true
          description: The <code>Function</code> ID.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    post:
      operationId: UpdateFunction
      description: Updates a <code>Function</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateFunctionResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
        - name: functionId
          in: path
          required: true
          description: The function ID.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - dataSourceName
              properties:
                name:
                  description: The <code>Function</code> name.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                description:
                  description: The <code>Function</code> description.
                  type: string
                dataSourceName:
                  description: The <code>Function</code> <code>DataSource</code> name.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                requestMappingTemplate:
                  description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                responseMappingTemplate:
                  description: The <code>Function</code> request mapping template.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                functionVersion:
                  description: The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29. Note that when using VTL and mapping templates, the <code>functionVersion</code> is required.
                  type: string
                syncConfig:
                  description: <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
                  type: object
                  properties:
                    conflictHandler:
                      allOf:
                        - $ref: "#/components/schemas/ConflictHandlerType"
                        - description: "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>"
                    conflictDetection:
                      allOf:
                        - $ref: "#/components/schemas/ConflictDetectionType"
                        - description: "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>"
                    lambdaConflictHandlerConfig:
                      allOf:
                        - $ref: "#/components/schemas/LambdaConflictHandlerConfig"
                        - description: The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.
                maxBatchSize:
                  description: The maximum batching size for a resolver.
                  type: integer
                  minimum: 0
                  maximum: 2000
                runtime:
                  description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/RuntimeName"
                        - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
                    runtimeVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
                code:
                  description: The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
                  type: string
                  minLength: 1
                  maxLength: 32768
  "/v1/apis/{apiId}":
    delete:
      operationId: DeleteGraphqlApi
      description: Deletes a <code>GraphqlApi</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGraphqlApiResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetGraphqlApi
      description: Retrieves a <code>GraphqlApi</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGraphqlApiResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID for the GraphQL API.
          schema:
            type: string
    post:
      operationId: UpdateGraphqlApi
      description: Updates a <code>GraphqlApi</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGraphqlApiResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: The new name for the <code>GraphqlApi</code> object.
                  type: string
                logConfig:
                  description: The Amazon CloudWatch Logs configuration.
                  type: object
                  properties:
                    fieldLogLevel:
                      allOf:
                        - $ref: "#/components/schemas/FieldLogLevel"
                        - description: "<p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>"
                    cloudWatchLogsRoleArn:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The service role that AppSync assumes to publish to CloudWatch logs in your account.
                    excludeVerboseContent:
                      allOf:
                        - $ref: "#/components/schemas/Boolean"
                        - description: Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.
                authenticationType:
                  description: The new authentication type for the <code>GraphqlApi</code> object.
                  type: string
                  enum:
                    - API_KEY
                    - AWS_IAM
                    - AMAZON_COGNITO_USER_POOLS
                    - OPENID_CONNECT
                    - AWS_LAMBDA
                userPoolConfig:
                  description: Describes an Amazon Cognito user pool configuration.
                  type: object
                  properties:
                    userPoolId:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The user pool ID.
                    awsRegion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The Amazon Web Services Region in which the user pool was created.
                    defaultAction:
                      allOf:
                        - $ref: "#/components/schemas/DefaultAction"
                        - description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
                    appIdClientRegex:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.
                openIDConnectConfig:
                  description: Describes an OpenID Connect (OIDC) configuration.
                  type: object
                  properties:
                    issuer:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
                    clientId:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time.
                    iatTTL:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: The number of milliseconds that a token is valid after it's issued to a user.
                    authTTL:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: The number of milliseconds that a token is valid after being authenticated.
                additionalAuthenticationProviders:
                  description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
                  type: array
                  items:
                    $ref: "#/components/schemas/AdditionalAuthenticationProvider"
                xrayEnabled:
                  description: A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.
                  type: boolean
                lambdaAuthorizerConfig:
                  description: A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.
                  type: object
                  properties:
                    authorizerResultTtlInSeconds:
                      allOf:
                        - $ref: "#/components/schemas/TTL"
                        - description: The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response. A value of 0 disables caching of responses.
                    authorizerUri:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: '<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>'
                    identityValidationExpression:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: A regular expression for validation of tokens before the Lambda function is called.
  "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}":
    delete:
      operationId: DeleteResolver
      description: Deletes a <code>Resolver</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResolverResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The name of the resolver type.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The resolver field name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetResolver
      description: Retrieves a <code>Resolver</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResolverResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The resolver type name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The resolver field name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    post:
      operationId: UpdateResolver
      description: Updates a <code>Resolver</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResolverResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The new type name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The new field name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dataSourceName:
                  description: The new data source name.
                  type: string
                  pattern: "[_A-Za-z][_0-9A-Za-z]*"
                  minLength: 1
                  maxLength: 65536
                requestMappingTemplate:
                  description: <p>The new request mapping template.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                responseMappingTemplate:
                  description: The new response mapping template.
                  type: string
                  pattern: ^.*$
                  minLength: 1
                  maxLength: 65536
                kind:
                  description: "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"
                  type: string
                  enum:
                    - UNIT
                    - PIPELINE
                pipelineConfig:
                  description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
                  type: object
                  properties:
                    functions:
                      allOf:
                        - $ref: "#/components/schemas/FunctionsIds"
                        - description: A list of <code>Function</code> objects.
                syncConfig:
                  description: <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
                  type: object
                  properties:
                    conflictHandler:
                      allOf:
                        - $ref: "#/components/schemas/ConflictHandlerType"
                        - description: "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>"
                    conflictDetection:
                      allOf:
                        - $ref: "#/components/schemas/ConflictDetectionType"
                        - description: "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>"
                    lambdaConflictHandlerConfig:
                      allOf:
                        - $ref: "#/components/schemas/LambdaConflictHandlerConfig"
                        - description: The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.
                cachingConfig:
                  description: The caching configuration for a resolver that has caching activated.
                  type: object
                  properties:
                    ttl:
                      allOf:
                        - $ref: "#/components/schemas/Long"
                        - description: <p>The TTL in seconds for a resolver that has caching activated.</p> <p>Valid values are 1–3,600 seconds.</p>
                    cachingKeys:
                      allOf:
                        - $ref: "#/components/schemas/CachingKeys"
                        - description: <p>The caching keys for a resolver that has caching activated.</p> <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
                maxBatchSize:
                  description: The maximum batching size for a resolver.
                  type: integer
                  minimum: 0
                  maximum: 2000
                runtime:
                  description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/RuntimeName"
                        - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
                    runtimeVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
                code:
                  description: The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
                  type: string
                  minLength: 1
                  maxLength: 32768
  "/v1/apis/{apiId}/types/{typeName}":
    delete:
      operationId: DeleteType
      description: Deletes a <code>Type</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTypeResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: UpdateType
      description: Updates a <code>Type</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTypeResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The new type name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - format
              properties:
                definition:
                  description: The new definition.
                  type: string
                format:
                  description: "The new type format: SDL or JSON."
                  type: string
                  enum:
                    - SDL
                    - JSON
  /v1/dataplane-evaluatecode:
    post:
      operationId: EvaluateCode
      description: "Evaluates the given code and returns the response. The code definition requirements depend on the specified runtime. For <code>APPSYNC_JS</code> runtimes, the code defines the request and response functions. The request function takes the incoming request after a GraphQL operation is parsed and converts it into a request configuration for the selected data source operation. The response function interprets responses from the data source and maps it to the shape of the GraphQL field output type. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateCodeResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - runtime
                - code
                - context
              properties:
                runtime:
                  description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/RuntimeName"
                        - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
                    runtimeVersion:
                      allOf:
                        - $ref: "#/components/schemas/String"
                        - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
                code:
                  description: The code definition to be evaluated. Note that <code>code</code> and <code>runtime</code> are both required for this action. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
                  type: string
                  minLength: 1
                  maxLength: 32768
                context:
                  description: The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.
                  type: string
                  pattern: ^[\s\S]*$
                  minLength: 2
                  maxLength: 28000
                function:
                  description: The function within the code to be evaluated. If provided, the valid values are <code>request</code> and <code>response</code>.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /v1/dataplane-evaluatetemplate:
    post:
      operationId: EvaluateMappingTemplate
      description: <p>Evaluates a given template and returns the response. The mapping template can be a request or response template.</p> <p>Request templates take the incoming request after a GraphQL operation is parsed and convert it into a request configuration for the selected data source operation. Response templates interpret responses from the data source and map it to the shape of the GraphQL field output type.</p> <p>Mapping templates are written in the Apache Velocity Template Language (VTL).</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateMappingTemplateResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - template
                - context
              properties:
                template:
                  description: The mapping template; this can be a request or response template. A <code>template</code> is required for this action.
                  type: string
                  pattern: ^[\s\S]*$
                  minLength: 2
                  maxLength: 65536
                context:
                  description: The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.
                  type: string
                  pattern: ^[\s\S]*$
                  minLength: 2
                  maxLength: 28000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/FlushCache":
    delete:
      operationId: FlushApiCache
      description: Flushes an <code>ApiCache</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlushApiCacheResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/schema#format":
    get:
      operationId: GetIntrospectionSchema
      description: Retrieves the introspection schema for a GraphQL API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntrospectionSchemaResponse"
        "480":
          description: GraphQLSchemaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GraphQLSchemaException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: format
          in: query
          required: true
          description: "The schema format: SDL or JSON."
          schema:
            type: string
            enum:
              - SDL
              - JSON
        - name: includeDirectives
          in: query
          required: false
          description: A flag that specifies whether the schema introspection should contain directives.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/schemacreation":
    get:
      operationId: GetSchemaCreationStatus
      description: Retrieves the current status of a schema creation operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSchemaCreationStatusResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: StartSchemaCreation
      description: <p>Adds a new schema to your GraphQL API.</p> <p>This operation is asynchronous. Use to determine when it has completed.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartSchemaCreationResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - definition
              properties:
                definition:
                  description: The schema definition, in GraphQL schema language format.
                  type: string
  "/v1/apis/{apiId}/types/{typeName}#format":
    get:
      operationId: GetType
      description: Retrieves a <code>Type</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTypeResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          schema:
            type: string
            pattern: "[_A-Za-z][_0-9A-Za-z]*"
            minLength: 1
            maxLength: 65536
        - name: format
          in: query
          required: true
          description: "The type format: SDL or JSON."
          schema:
            type: string
            enum:
              - SDL
              - JSON
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/functions/{functionId}/resolvers":
    get:
      operationId: ListResolversByFunction
      description: List the resolvers that are associated with a specific function.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResolversByFunctionResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: functionId
          in: path
          required: true
          description: The function ID.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/tags/{resourceArn}":
    get:
      operationId: ListTagsForResource
      description: Lists the tags for a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
            minLength: 70
            maxLength: 75
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Tags a resource with user-supplied tags.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
            minLength: 70
            maxLength: 75
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
  "/v1/apis/{apiId}/types#format":
    get:
      operationId: ListTypes
      description: Lists the types for a given API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTypesResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          schema:
            type: string
        - name: format
          in: query
          required: true
          description: "The type format: SDL or JSON."
          schema:
            type: string
            enum:
              - SDL
              - JSON
        - name: nextToken
          in: query
          required: false
          description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
          schema:
            type: string
            pattern: "[\\\\S]+"
            minLength: 1
            maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results that you want the request to return.
          schema:
            type: integer
            minimum: 0
            maximum: 25
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/tags/{resourceArn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Untags a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
            minLength: 70
            maxLength: 75
        - name: tagKeys
          in: query
          required: true
          description: A list of <code>TagKey</code> objects.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TagKey"
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v1/apis/{apiId}/ApiCaches/update":
    post:
      operationId: UpdateApiCache
      description: Updates the cache for the GraphQL API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiCacheResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ttl
                - apiCachingBehavior
                - type
              properties:
                ttl:
                  description: <p>TTL in seconds for cache entries.</p> <p>Valid values are 1–3,600 seconds.</p>
                  type: integer
                apiCachingBehavior:
                  description: "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>"
                  type: string
                  enum:
                    - FULL_REQUEST_CACHING
                    - PER_RESOLVER_CACHING
                type:
                  description: "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>"
                  type: string
                  enum:
                    - T2_SMALL
                    - T2_MEDIUM
                    - R4_LARGE
                    - R4_XLARGE
                    - R4_2XLARGE
                    - R4_4XLARGE
                    - R4_8XLARGE
                    - SMALL
                    - MEDIUM
                    - LARGE
                    - XLARGE
                    - LARGE_2X
                    - LARGE_4X
                    - LARGE_8X
                    - LARGE_12X
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateApiResponse:
      type: object
      properties:
        apiAssociation:
          allOf:
            - $ref: "#/components/schemas/ApiAssociation"
            - description: The <code>ApiAssociation</code> object.
    AccessDeniedException: {}
    BadRequestException: {}
    InternalFailureException: {}
    NotFoundException: {}
    CreateApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
            - $ref: "#/components/schemas/ApiCache"
            - description: The <code>ApiCache</code> object.
      description: Represents the output of a <code>CreateApiCache</code> operation.
    ConcurrentModificationException: {}
    UnauthorizedException: {}
    CreateApiKeyResponse:
      type: object
      properties:
        apiKey:
          allOf:
            - $ref: "#/components/schemas/ApiKey"
            - description: The API key.
    LimitExceededException: {}
    ApiKeyLimitExceededException: {}
    ApiKeyValidityOutOfBoundsException: {}
    CreateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
            - $ref: "#/components/schemas/DataSource"
            - description: The <code>DataSource</code> object.
    String:
      type: string
    Boolean:
      type: boolean
    DeltaSyncConfig:
      type: object
      properties:
        baseTableTTL:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of minutes that an Item is stored in the data source.
        deltaSyncTableName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Delta Sync table name.
        deltaSyncTableTTL:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
      description: Describes a Delta Sync configuration.
    AuthorizationConfig:
      type: object
      required:
        - authorizationType
      properties:
        authorizationType:
          allOf:
            - $ref: "#/components/schemas/AuthorizationType"
            - description: "<p>The authorization type that the HTTP endpoint requires.</p> <ul> <li> <p> <b>AWS_IAM</b>: The authorization type is Signature Version 4 (SigV4).</p> </li> </ul>"
        awsIamConfig:
          allOf:
            - $ref: "#/components/schemas/AwsIamConfig"
            - description: The Identity and Access Management (IAM) settings.
      description: The authorization configuration in case the HTTP endpoint requires authorization.
    RelationalDatabaseSourceType:
      type: string
      enum:
        - RDS_HTTP_ENDPOINT
    RdsHttpEndpointConfig:
      type: object
      properties:
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Amazon Web Services Region for Amazon RDS HTTP endpoint.
        dbClusterIdentifier:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Amazon RDS cluster Amazon Resource Name (ARN).
        databaseName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Logical database name.
        schema:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Logical schema name.
        awsSecretStoreArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Amazon Web Services secret store Amazon Resource Name (ARN) for database credentials.
      description: The Amazon Relational Database Service (Amazon RDS) HTTP endpoint configuration.
    CreateDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
            - $ref: "#/components/schemas/DomainNameConfig"
            - description: The configuration for the <code>DomainName</code>.
    CreateFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
            - $ref: "#/components/schemas/FunctionConfiguration"
            - description: The <code>Function</code> object.
    ConflictHandlerType:
      type: string
      enum:
        - OPTIMISTIC_CONCURRENCY
        - LAMBDA
        - AUTOMERGE
        - NONE
    ConflictDetectionType:
      type: string
      enum:
        - VERSION
        - NONE
    LambdaConflictHandlerConfig:
      type: object
      properties:
        lambdaConflictHandlerArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
      description: The <code>LambdaConflictHandlerConfig</code> object when configuring <code>LAMBDA</code> as the Conflict Handler.
    RuntimeName:
      type: string
      enum:
        - APPSYNC_JS
    CreateGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
            - $ref: "#/components/schemas/GraphqlApi"
            - description: The <code>GraphqlApi</code>.
    FieldLogLevel:
      type: string
      enum:
        - NONE
        - ERROR
        - ALL
    DefaultAction:
      type: string
      enum:
        - ALLOW
        - DENY
    Long:
      type: integer
    TagValue:
      type: string
      pattern: ^[\s\w+-=\.:/@]*$
      description: The value for the tag.
      maxLength: 256
    AdditionalAuthenticationProvider:
      type: object
      properties:
        authenticationType:
          allOf:
            - $ref: "#/components/schemas/AuthenticationType"
            - description: "The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda."
        openIDConnectConfig:
          allOf:
            - $ref: "#/components/schemas/OpenIDConnectConfig"
            - description: The OIDC configuration.
        userPoolConfig:
          allOf:
            - $ref: "#/components/schemas/CognitoUserPoolConfig"
            - description: The Amazon Cognito user pool configuration.
        lambdaAuthorizerConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaAuthorizerConfig"
            - description: Configuration for Lambda function authorization.
      description: Describes an additional authentication provider.
    TTL:
      type: integer
      minimum: 0
      maximum: 3600
    ApiLimitExceededException: {}
    CreateResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
            - $ref: "#/components/schemas/Resolver"
            - description: The <code>Resolver</code> object.
    FunctionsIds:
      type: array
      items:
        $ref: "#/components/schemas/String"
    CachingKeys:
      type: array
      items:
        $ref: "#/components/schemas/String"
    CreateTypeResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The <code>Type</code> object.
    DeleteApiCacheResponse:
      type: object
      properties: {}
      description: Represents the output of a <code>DeleteApiCache</code> operation.
    DeleteApiKeyResponse:
      type: object
      properties: {}
    DeleteDataSourceResponse:
      type: object
      properties: {}
    DeleteDomainNameResponse:
      type: object
      properties: {}
    DeleteFunctionResponse:
      type: object
      properties: {}
    DeleteGraphqlApiResponse:
      type: object
      properties: {}
    DeleteResolverResponse:
      type: object
      properties: {}
    DeleteTypeResponse:
      type: object
      properties: {}
    DisassociateApiResponse:
      type: object
      properties: {}
    EvaluateCodeResponse:
      type: object
      properties:
        evaluationResult:
          allOf:
            - $ref: "#/components/schemas/EvaluationResult"
            - description: The result of the evaluation operation.
        error:
          allOf:
            - $ref: "#/components/schemas/EvaluateCodeErrorDetail"
            - description: Contains the payload of the response error.
        logs:
          allOf:
            - $ref: "#/components/schemas/Logs"
            - description: A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.
    EvaluateMappingTemplateResponse:
      type: object
      properties:
        evaluationResult:
          allOf:
            - $ref: "#/components/schemas/EvaluationResult"
            - description: The mapping template; this can be a request or response template.
        error:
          allOf:
            - $ref: "#/components/schemas/ErrorDetail"
            - description: The <code>ErrorDetail</code> object.
        logs:
          allOf:
            - $ref: "#/components/schemas/Logs"
            - description: A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.
    FlushApiCacheResponse:
      type: object
      properties: {}
      description: Represents the output of a <code>FlushApiCache</code> operation.
    GetApiAssociationResponse:
      type: object
      properties:
        apiAssociation:
          allOf:
            - $ref: "#/components/schemas/ApiAssociation"
            - description: The <code>ApiAssociation</code> object.
    GetApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
            - $ref: "#/components/schemas/ApiCache"
            - description: The <code>ApiCache</code> object.
      description: Represents the output of a <code>GetApiCache</code> operation.
    GetDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
            - $ref: "#/components/schemas/DataSource"
            - description: The <code>DataSource</code> object.
    GetDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
            - $ref: "#/components/schemas/DomainNameConfig"
            - description: The configuration for the <code>DomainName</code>.
    GetFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
            - $ref: "#/components/schemas/FunctionConfiguration"
            - description: The <code>Function</code> object.
    GetGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
            - $ref: "#/components/schemas/GraphqlApi"
            - description: The <code>GraphqlApi</code> object.
    GetIntrospectionSchemaResponse:
      type: object
      properties:
        schema:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: <p>The schema, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>
    GraphQLSchemaException: {}
    GetResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
            - $ref: "#/components/schemas/Resolver"
            - description: The <code>Resolver</code> object.
    GetSchemaCreationStatusResponse:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/SchemaStatus"
            - description: The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.
        details:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Detailed information about the status of the schema creation operation.
    GetTypeResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The <code>Type</code> object.
    ListApiKeysResponse:
      type: object
      properties:
        apiKeys:
          allOf:
            - $ref: "#/components/schemas/ApiKeys"
            - description: The <code>ApiKey</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier to pass in the next request to this operation to return the next set of items in the list.
    ListDataSourcesResponse:
      type: object
      properties:
        dataSources:
          allOf:
            - $ref: "#/components/schemas/DataSources"
            - description: The <code>DataSource</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier to pass in the next request to this operation to return the next set of items in the list.
    ListDomainNamesResponse:
      type: object
      properties:
        domainNameConfigs:
          allOf:
            - $ref: "#/components/schemas/DomainNameConfigs"
            - description: Lists configurations for multiple domain names.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The API token.
    ListFunctionsResponse:
      type: object
      properties:
        functions:
          allOf:
            - $ref: "#/components/schemas/Functions"
            - description: A list of <code>Function</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
    ListGraphqlApisResponse:
      type: object
      properties:
        graphqlApis:
          allOf:
            - $ref: "#/components/schemas/GraphqlApis"
            - description: The <code>GraphqlApi</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier to pass in the next request to this operation to return the next set of items in the list.
    ListResolversResponse:
      type: object
      properties:
        resolvers:
          allOf:
            - $ref: "#/components/schemas/Resolvers"
            - description: The <code>Resolver</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier to pass in the next request to this operation to return the next set of items in the list.
    ListResolversByFunctionResponse:
      type: object
      properties:
        resolvers:
          allOf:
            - $ref: "#/components/schemas/Resolvers"
            - description: The list of resolvers.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier that you can use to return the next set of items in the list.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: A <code>TagMap</code> object.
    ListTypesResponse:
      type: object
      properties:
        types:
          allOf:
            - $ref: "#/components/schemas/TypeList"
            - description: The <code>Type</code> objects.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: An identifier to pass in the next request to this operation to return the next set of items in the list.
    StartSchemaCreationResponse:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/SchemaStatus"
            - description: The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: ^(?!aws:)[ a-zA-Z+-=._:/]+$
      description: The key for the tag.
      minLength: 1
      maxLength: 128
    UpdateApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
            - $ref: "#/components/schemas/ApiCache"
            - description: The <code>ApiCache</code> object.
      description: Represents the output of a <code>UpdateApiCache</code> operation.
    UpdateApiKeyResponse:
      type: object
      properties:
        apiKey:
          allOf:
            - $ref: "#/components/schemas/ApiKey"
            - description: The API key.
    UpdateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
            - $ref: "#/components/schemas/DataSource"
            - description: The updated <code>DataSource</code> object.
    UpdateDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
            - $ref: "#/components/schemas/DomainNameConfig"
            - description: The configuration for the <code>DomainName</code>.
    UpdateFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
            - $ref: "#/components/schemas/FunctionConfiguration"
            - description: The <code>Function</code> object.
    UpdateGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
            - $ref: "#/components/schemas/GraphqlApi"
            - description: The updated <code>GraphqlApi</code> object.
    UpdateResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
            - $ref: "#/components/schemas/Resolver"
            - description: The updated <code>Resolver</code> object.
    UpdateTypeResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The updated <code>Type</code> object.
    AuthenticationType:
      type: string
      enum:
        - API_KEY
        - AWS_IAM
        - AMAZON_COGNITO_USER_POOLS
        - OPENID_CONNECT
        - AWS_LAMBDA
    OpenIDConnectConfig:
      type: object
      required:
        - issuer
      properties:
        issuer:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
        clientId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time.
        iatTTL:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that a token is valid after it's issued to a user.
        authTTL:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The number of milliseconds that a token is valid after being authenticated.
      description: Describes an OpenID Connect (OIDC) configuration.
    CognitoUserPoolConfig:
      type: object
      required:
        - userPoolId
        - awsRegion
      properties:
        userPoolId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user pool ID.
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Web Services Region in which the user pool was created.
        appIdClientRegex:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.
      description: Describes an Amazon Cognito user pool configuration.
    LambdaAuthorizerConfig:
      type: object
      required:
        - authorizerUri
      properties:
        authorizerResultTtlInSeconds:
          allOf:
            - $ref: "#/components/schemas/TTL"
            - description: The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response. A value of 0 disables caching of responses.
        authorizerUri:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: '<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>'
        identityValidationExpression:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A regular expression for validation of tokens before the Lambda function is called.
      description: A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.
    AdditionalAuthenticationProviders:
      type: array
      items:
        $ref: "#/components/schemas/AdditionalAuthenticationProvider"
    DomainName:
      type: string
      pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
      minLength: 1
      maxLength: 253
    AssociationStatus:
      type: string
      enum:
        - PROCESSING
        - FAILED
        - SUCCESS
    ApiAssociation:
      type: object
      properties:
        domainName:
          allOf:
            - $ref: "#/components/schemas/DomainName"
            - description: The domain name.
        apiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API ID.
        associationStatus:
          allOf:
            - $ref: "#/components/schemas/AssociationStatus"
            - description: "<p>Identifies the status of an association.</p> <ul> <li> <p> <b>PROCESSING</b>: The API association is being created. You cannot modify association requests during processing.</p> </li> <li> <p> <b>SUCCESS</b>: The API association was successful. You can modify associations after success.</p> </li> <li> <p> <b>FAILED</b>: The API association has failed. You can modify associations after failure.</p> </li> </ul>"
        deploymentDetail:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: Details about the last deployment status.
      description: Describes an <code>ApiAssociation</code> object.
    ApiCachingBehavior:
      type: string
      enum:
        - FULL_REQUEST_CACHING
        - PER_RESOLVER_CACHING
    ApiCacheType:
      type: string
      enum:
        - T2_SMALL
        - T2_MEDIUM
        - R4_LARGE
        - R4_XLARGE
        - R4_2XLARGE
        - R4_4XLARGE
        - R4_8XLARGE
        - SMALL
        - MEDIUM
        - LARGE
        - XLARGE
        - LARGE_2X
        - LARGE_4X
        - LARGE_8X
        - LARGE_12X
    ApiCacheStatus:
      type: string
      enum:
        - AVAILABLE
        - CREATING
        - DELETING
        - MODIFYING
        - FAILED
    ApiCache:
      type: object
      properties:
        ttl:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: <p>TTL in seconds for cache entries.</p> <p>Valid values are 1–3,600 seconds.</p>
        apiCachingBehavior:
          allOf:
            - $ref: "#/components/schemas/ApiCachingBehavior"
            - description: "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>"
        transitEncryptionEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Transit encryption flag when connecting to cache. You cannot update this setting after creation.
        atRestEncryptionEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: At-rest encryption flag for cache. You cannot update this setting after creation.
        type:
          allOf:
            - $ref: "#/components/schemas/ApiCacheType"
            - description: "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>"
        status:
          allOf:
            - $ref: "#/components/schemas/ApiCacheStatus"
            - description: "<p>The cache instance status.</p> <ul> <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li> <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li> <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li> <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li> <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li> </ul>"
      description: The <code>ApiCache</code> object.
    ApiKey:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API key ID.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description of the purpose of the API key.
        expires:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.
        deletes:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.
      description: "<p>Describes an API key.</p> <p>Customers invoke AppSync GraphQL API operations with API keys as an identity mechanism. There are two key versions:</p> <p> <b>da1</b>: We introduced this version at launch in November 2017. These keys always expire after 7 days. Amazon DynamoDB TTL manages key expiration. These keys ceased to be valid after February 21, 2018, and they should no longer be used.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we deleted these keys from the table on February 21, 2018.</p> </li> </ul> <p> <b>da2</b>: We introduced this version in February 2018 when AppSync added support to extend key expiration.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time and deletion time in seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time and deletion time in seconds and accepts a user-provided expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code> returns the expiration time and and deletion time in seconds and accepts a user-provided expiration time in seconds. Expired API keys are kept for 60 days after the expiration time. You can update the key expiration time as long as the key isn't deleted.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as seconds. After the expiration time, using the key to authenticate will fail. However, you can reinstate the key before deletion.</p> </li> <li> <p>Deletion is stored in DynamoDB as seconds. The key is deleted after deletion time.</p> </li> </ul>"
    ApiKeys:
      type: array
      items:
        $ref: "#/components/schemas/ApiKey"
    AppSyncRuntime:
      type: object
      required:
        - name
        - runtimeVersion
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/RuntimeName"
            - description: The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.
        runtimeVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.
      description: Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
    AssociateApiRequest:
      type: object
      required:
        - apiId
      title: AssociateApiRequest
      properties:
        apiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API ID.
    AuthorizationType:
      type: string
      enum:
        - AWS_IAM
    AwsIamConfig:
      type: object
      properties:
        signingRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The signing Amazon Web Services Region for IAM authorization.
        signingServiceName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The signing service name for IAM authorization.
      description: The Identity and Access Management (IAM) configuration.
    Blob:
      type: string
    BooleanValue:
      type: boolean
    CachingConfig:
      type: object
      required:
        - ttl
      properties:
        ttl:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: <p>The TTL in seconds for a resolver that has caching activated.</p> <p>Valid values are 1–3,600 seconds.</p>
        cachingKeys:
          allOf:
            - $ref: "#/components/schemas/CachingKeys"
            - description: <p>The caching keys for a resolver that has caching activated.</p> <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
      description: The caching configuration for a resolver that has caching activated.
    CertificateArn:
      type: string
      pattern: ^arn:[a-z-]*:(acm|iam):[a-z0-9-]*:\d{12}:(certificate|server-certificate)/[0-9A-Za-z_/-]*$
      minLength: 20
      maxLength: 2048
    Code:
      type: string
      minLength: 1
      maxLength: 32768
    CodeErrorLocation:
      type: object
      properties:
        line:
          allOf:
            - $ref: "#/components/schemas/CodeErrorLine"
            - description: The line number in the code. Defaults to <code>0</code> if unknown.
        column:
          allOf:
            - $ref: "#/components/schemas/CodeErrorColumn"
            - description: The column number in the code. Defaults to <code>0</code> if unknown.
        span:
          allOf:
            - $ref: "#/components/schemas/CodeErrorSpan"
            - description: The span/length of the error. Defaults to <code>-1</code> if unknown.
      description: Describes the location of the error in a code sample.
    CodeError:
      type: object
      properties:
        errorType:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "<p>The type of code error. </p> <p>Examples include, but aren't limited to: <code>LINT_ERROR</code>, <code>PARSER_ERROR</code>.</p>"
        value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: "<p>A user presentable error.</p> <p>Examples include, but aren't limited to: <code>Parsing error: Unterminated string literal</code>.</p>"
        location:
          allOf:
            - $ref: "#/components/schemas/CodeErrorLocation"
            - description: The line, column, and span location of the error in the code.
      description: Describes an AppSync error.
    CodeErrorColumn:
      type: integer
    CodeErrorLine:
      type: integer
    CodeErrorSpan:
      type: integer
    CodeErrors:
      type: array
      items:
        $ref: "#/components/schemas/CodeError"
    Context:
      type: string
      pattern: ^[\s\S]*$
      minLength: 2
      maxLength: 28000
    CreateApiCacheRequest:
      type: object
      required:
        - ttl
        - apiCachingBehavior
        - type
      title: CreateApiCacheRequest
      properties:
        ttl:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: <p>TTL in seconds for cache entries.</p> <p>Valid values are 1–3,600 seconds.</p>
        transitEncryptionEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Transit encryption flag when connecting to cache. You cannot update this setting after creation.
        atRestEncryptionEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: At-rest encryption flag for cache. You cannot update this setting after creation.
        apiCachingBehavior:
          allOf:
            - $ref: "#/components/schemas/ApiCachingBehavior"
            - description: "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>"
        type:
          allOf:
            - $ref: "#/components/schemas/ApiCacheType"
            - description: "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>"
      description: Represents the input of a <code>CreateApiCache</code> operation.
    CreateApiKeyRequest:
      type: object
      title: CreateApiKeyRequest
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description of the purpose of the API key.
        expires:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: From the creation time, the time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .
    ResourceName:
      type: string
      pattern: "[_A-Za-z][_0-9A-Za-z]*"
      minLength: 1
      maxLength: 65536
    DataSourceType:
      type: string
      enum:
        - AWS_LAMBDA
        - AMAZON_DYNAMODB
        - AMAZON_ELASTICSEARCH
        - NONE
        - HTTP
        - RELATIONAL_DATABASE
        - AMAZON_OPENSEARCH_SERVICE
        - AMAZON_EVENTBRIDGE
    DynamodbDataSourceConfig:
      type: object
      required:
        - tableName
        - awsRegion
      properties:
        tableName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The table name.
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Web Services Region.
        useCallerCredentials:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Set to TRUE to use Amazon Cognito credentials with this data source.
        deltaSyncConfig:
          allOf:
            - $ref: "#/components/schemas/DeltaSyncConfig"
            - description: The <code>DeltaSyncConfig</code> for a versioned data source.
        versioned:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Set to TRUE to use Conflict Detection and Resolution with this data source.
      description: Describes an Amazon DynamoDB data source configuration.
    LambdaDataSourceConfig:
      type: object
      required:
        - lambdaFunctionArn
      properties:
        lambdaFunctionArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Resource Name (ARN) for the Lambda function.
      description: Describes an Lambda data source configuration.
    ElasticsearchDataSourceConfig:
      type: object
      required:
        - endpoint
        - awsRegion
      properties:
        endpoint:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The endpoint.
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Web Services Region.
      description: <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
    OpenSearchServiceDataSourceConfig:
      type: object
      required:
        - endpoint
        - awsRegion
      properties:
        endpoint:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The endpoint.
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Web Services Region.
      description: Describes an OpenSearch data source configuration.
    HttpDataSourceConfig:
      type: object
      properties:
        endpoint:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The HTTP URL endpoint. You can specify either the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If you don't specify the port, AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.
        authorizationConfig:
          allOf:
            - $ref: "#/components/schemas/AuthorizationConfig"
            - description: The authorization configuration in case the HTTP endpoint requires authorization.
      description: Describes an HTTP data source configuration.
    RelationalDatabaseDataSourceConfig:
      type: object
      properties:
        relationalDatabaseSourceType:
          allOf:
            - $ref: "#/components/schemas/RelationalDatabaseSourceType"
            - description: "<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon Relational Database Service (Amazon RDS) HTTP endpoint.</p> </li> </ul>"
        rdsHttpEndpointConfig:
          allOf:
            - $ref: "#/components/schemas/RdsHttpEndpointConfig"
            - description: Amazon RDS HTTP endpoint settings.
      description: Describes a relational database data source configuration.
    EventBridgeDataSourceConfig:
      type: object
      required:
        - eventBusArn
      properties:
        eventBusArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ARN of the event bus. For more information about event buses, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html">Amazon EventBridge event buses</a>.
      description: Describes an Amazon EventBridge bus data source configuration.
    CreateDataSourceRequest:
      type: object
      required:
        - name
        - type
      title: CreateDataSourceRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: A user-supplied name for the <code>DataSource</code>.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description of the <code>DataSource</code>.
        type:
          allOf:
            - $ref: "#/components/schemas/DataSourceType"
            - description: The type of the <code>DataSource</code>.
        serviceRoleArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.
        dynamodbConfig:
          allOf:
            - $ref: "#/components/schemas/DynamodbDataSourceConfig"
            - description: Amazon DynamoDB settings.
        lambdaConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaDataSourceConfig"
            - description: Lambda settings.
        elasticsearchConfig:
          allOf:
            - $ref: "#/components/schemas/ElasticsearchDataSourceConfig"
            - description: <p>Amazon OpenSearch Service settings.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>CreateDataSourceRequest$openSearchServiceConfig</a> to create an OpenSearch data source.</p>
        openSearchServiceConfig:
          allOf:
            - $ref: "#/components/schemas/OpenSearchServiceDataSourceConfig"
            - description: Amazon OpenSearch Service settings.
        httpConfig:
          allOf:
            - $ref: "#/components/schemas/HttpDataSourceConfig"
            - description: HTTP endpoint settings.
        relationalDatabaseConfig:
          allOf:
            - $ref: "#/components/schemas/RelationalDatabaseDataSourceConfig"
            - description: Relational database settings.
        eventBridgeConfig:
          allOf:
            - $ref: "#/components/schemas/EventBridgeDataSourceConfig"
            - description: Amazon EventBridge settings.
    DataSource:
      type: object
      properties:
        dataSourceArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The data source Amazon Resource Name (ARN).
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the data source.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The description of the data source.
        type:
          allOf:
            - $ref: "#/components/schemas/DataSourceType"
            - description: "<p>The type of the data source.</p> <ul> <li> <p> <b>AWS_LAMBDA</b>: The data source is an Lambda function.</p> </li> <li> <p> <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB table.</p> </li> <li> <p> <b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon OpenSearch Service domain.</p> </li> <li> <p> <b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon OpenSearch Service domain.</p> </li> <li> <p> <b>AMAZON_EVENTBRIDGE</b>: The data source is an Amazon EventBridge configuration.</p> </li> <li> <p> <b>NONE</b>: There is no data source. Use this type when you want to invoke a GraphQL operation without connecting to a data source, such as when you're performing data transformation with resolvers or invoking a subscription from a mutation.</p> </li> <li> <p> <b>HTTP</b>: The data source is an HTTP endpoint.</p> </li> <li> <p> <b>RELATIONAL_DATABASE</b>: The data source is a relational database.</p> </li> </ul>"
        serviceRoleArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.
        dynamodbConfig:
          allOf:
            - $ref: "#/components/schemas/DynamodbDataSourceConfig"
            - description: DynamoDB settings.
        lambdaConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaDataSourceConfig"
            - description: Lambda settings.
        elasticsearchConfig:
          allOf:
            - $ref: "#/components/schemas/ElasticsearchDataSourceConfig"
            - description: Amazon OpenSearch Service settings.
        openSearchServiceConfig:
          allOf:
            - $ref: "#/components/schemas/OpenSearchServiceDataSourceConfig"
            - description: Amazon OpenSearch Service settings.
        httpConfig:
          allOf:
            - $ref: "#/components/schemas/HttpDataSourceConfig"
            - description: HTTP endpoint settings.
        relationalDatabaseConfig:
          allOf:
            - $ref: "#/components/schemas/RelationalDatabaseDataSourceConfig"
            - description: Relational database settings.
        eventBridgeConfig:
          allOf:
            - $ref: "#/components/schemas/EventBridgeDataSourceConfig"
            - description: Amazon EventBridge settings.
      description: Describes a data source.
    Description:
      type: string
      pattern: ^.*$
      minLength: 0
      maxLength: 255
    CreateDomainNameRequest:
      type: object
      required:
        - domainName
        - certificateArn
      title: CreateDomainNameRequest
      properties:
        domainName:
          allOf:
            - $ref: "#/components/schemas/DomainName"
            - description: The domain name.
        certificateArn:
          allOf:
            - $ref: "#/components/schemas/CertificateArn"
            - description: The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.
        description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: A description of the <code>DomainName</code>.
    DomainNameConfig:
      type: object
      properties:
        domainName:
          allOf:
            - $ref: "#/components/schemas/DomainName"
            - description: The domain name.
        description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: A description of the <code>DomainName</code> configuration.
        certificateArn:
          allOf:
            - $ref: "#/components/schemas/CertificateArn"
            - description: The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.
        appsyncDomainName:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The domain name that AppSync provides.
        hostedZoneId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ID of your Amazon Route 53 hosted zone.
      description: Describes a configuration for a custom domain.
    MappingTemplate:
      type: string
      pattern: ^.*$
      minLength: 1
      maxLength: 65536
    SyncConfig:
      type: object
      properties:
        conflictHandler:
          allOf:
            - $ref: "#/components/schemas/ConflictHandlerType"
            - description: "<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the <code>LambdaConflictHandlerConfig</code>.</p> </li> </ul>"
        conflictDetection:
          allOf:
            - $ref: "#/components/schemas/ConflictDetectionType"
            - description: "<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when invoking this resolver.</p> </li> </ul>"
        lambdaConflictHandlerConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaConflictHandlerConfig"
            - description: The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the Conflict Handler.
      description: <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
    MaxBatchSize:
      type: integer
      minimum: 0
      maximum: 2000
    CreateFunctionRequest:
      type: object
      required:
        - name
        - dataSourceName
      title: CreateFunctionRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The <code>Function</code> name. The function name does not have to be unique.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>Function</code> description.
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The <code>Function</code> <code>DataSource</code> name.
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> response mapping template.
        functionVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29. Note that when using VTL and mapping templates, the <code>functionVersion</code> is required.
        syncConfig:
          $ref: "#/components/schemas/SyncConfig"
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
    FunctionConfiguration:
      type: object
      properties:
        functionId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A unique ID representing the <code>Function</code> object.
        functionArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Resource Name (ARN) of the <code>Function</code> object.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the <code>Function</code> object.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>Function</code> description.
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the <code>DataSource</code>.
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> response mapping template.
        functionVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
        syncConfig:
          $ref: "#/components/schemas/SyncConfig"
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
      description: A function is a reusable entity. You can use multiple functions to compose the resolver logic.
    LogConfig:
      type: object
      required:
        - fieldLogLevel
        - cloudWatchLogsRoleArn
      properties:
        fieldLogLevel:
          allOf:
            - $ref: "#/components/schemas/FieldLogLevel"
            - description: "<p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>"
        cloudWatchLogsRoleArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The service role that AppSync assumes to publish to CloudWatch logs in your account.
        excludeVerboseContent:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.
      description: The Amazon CloudWatch Logs configuration.
    UserPoolConfig:
      type: object
      required:
        - userPoolId
        - awsRegion
        - defaultAction
      properties:
        userPoolId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The user pool ID.
        awsRegion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Web Services Region in which the user pool was created.
        defaultAction:
          allOf:
            - $ref: "#/components/schemas/DefaultAction"
            - description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
        appIdClientRegex:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.
      description: Describes an Amazon Cognito user pool configuration.
    TagMap:
      type: object
      description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    CreateGraphqlApiRequest:
      type: object
      required:
        - name
        - authenticationType
      title: CreateGraphqlApiRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A user-supplied name for the <code>GraphqlApi</code>.
        logConfig:
          allOf:
            - $ref: "#/components/schemas/LogConfig"
            - description: The Amazon CloudWatch Logs configuration.
        authenticationType:
          allOf:
            - $ref: "#/components/schemas/AuthenticationType"
            - description: "The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda."
        userPoolConfig:
          allOf:
            - $ref: "#/components/schemas/UserPoolConfig"
            - description: The Amazon Cognito user pool configuration.
        openIDConnectConfig:
          allOf:
            - $ref: "#/components/schemas/OpenIDConnectConfig"
            - description: The OIDC configuration.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: A <code>TagMap</code> object.
        additionalAuthenticationProviders:
          allOf:
            - $ref: "#/components/schemas/AdditionalAuthenticationProviders"
            - description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
        xrayEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.
        lambdaAuthorizerConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaAuthorizerConfig"
            - description: Configuration for Lambda function authorization.
    GraphqlApi:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The API name.
        apiId:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The API ID.
        authenticationType:
          allOf:
            - $ref: "#/components/schemas/AuthenticationType"
            - description: The authentication type.
        logConfig:
          allOf:
            - $ref: "#/components/schemas/LogConfig"
            - description: The Amazon CloudWatch Logs configuration.
        userPoolConfig:
          allOf:
            - $ref: "#/components/schemas/UserPoolConfig"
            - description: The Amazon Cognito user pool configuration.
        openIDConnectConfig:
          allOf:
            - $ref: "#/components/schemas/OpenIDConnectConfig"
            - description: The OpenID Connect configuration.
        arn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The Amazon Resource Name (ARN).
        uris:
          allOf:
            - $ref: "#/components/schemas/MapOfStringToString"
            - description: The URIs.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags.
        additionalAuthenticationProviders:
          allOf:
            - $ref: "#/components/schemas/AdditionalAuthenticationProviders"
            - description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
        xrayEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A flag indicating whether to use X-Ray tracing for this <code>GraphqlApi</code>.
        wafWebAclArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The ARN of the WAF access control list (ACL) associated with this <code>GraphqlApi</code>, if one exists.
        lambdaAuthorizerConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaAuthorizerConfig"
            - description: Configuration for Lambda function authorization.
      description: Describes a GraphQL API.
    ResolverKind:
      type: string
      enum:
        - UNIT
        - PIPELINE
    PipelineConfig:
      type: object
      properties:
        functions:
          allOf:
            - $ref: "#/components/schemas/FunctionsIds"
            - description: A list of <code>Function</code> objects.
      description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
    CreateResolverRequest:
      type: object
      required:
        - fieldName
      title: CreateResolverRequest
      properties:
        fieldName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the field to attach the resolver to.
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the data source for which the resolver is being created.
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: <p>The mapping template to use for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The mapping template to use for responses from the data source.
        kind:
          allOf:
            - $ref: "#/components/schemas/ResolverKind"
            - description: "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"
        pipelineConfig:
          allOf:
            - $ref: "#/components/schemas/PipelineConfig"
            - description: The <code>PipelineConfig</code>.
        syncConfig:
          allOf:
            - $ref: "#/components/schemas/SyncConfig"
            - description: The <code>SyncConfig</code> for a resolver attached to a versioned data source.
        cachingConfig:
          allOf:
            - $ref: "#/components/schemas/CachingConfig"
            - description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
    Resolver:
      type: object
      properties:
        typeName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The resolver type name.
        fieldName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The resolver field name.
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The resolver data source name.
        resolverArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The resolver Amazon Resource Name (ARN).
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The request mapping template.
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The response mapping template.
        kind:
          allOf:
            - $ref: "#/components/schemas/ResolverKind"
            - description: "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"
        pipelineConfig:
          allOf:
            - $ref: "#/components/schemas/PipelineConfig"
            - description: The <code>PipelineConfig</code>.
        syncConfig:
          allOf:
            - $ref: "#/components/schemas/SyncConfig"
            - description: The <code>SyncConfig</code> for a resolver attached to a versioned data source.
        cachingConfig:
          allOf:
            - $ref: "#/components/schemas/CachingConfig"
            - description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
      description: Describes a resolver.
    TypeDefinitionFormat:
      type: string
      enum:
        - SDL
        - JSON
    CreateTypeRequest:
      type: object
      required:
        - definition
        - format
      title: CreateTypeRequest
      properties:
        definition:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: <p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>
        format:
          allOf:
            - $ref: "#/components/schemas/TypeDefinitionFormat"
            - description: "The type format: SDL or JSON."
    Type:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The type name.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The type description.
        arn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The type Amazon Resource Name (ARN).
        definition:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The type definition.
        format:
          allOf:
            - $ref: "#/components/schemas/TypeDefinitionFormat"
            - description: "The type format: SDL or JSON."
      description: Describes a type.
    DataSources:
      type: array
      items:
        $ref: "#/components/schemas/DataSource"
    DeleteApiCacheRequest:
      type: object
      title: DeleteApiCacheRequest
      properties: {}
      description: Represents the input of a <code>DeleteApiCache</code> operation.
    DeleteApiKeyRequest:
      type: object
      title: DeleteApiKeyRequest
      properties: {}
    DeleteDataSourceRequest:
      type: object
      title: DeleteDataSourceRequest
      properties: {}
    DeleteDomainNameRequest:
      type: object
      title: DeleteDomainNameRequest
      properties: {}
    DeleteFunctionRequest:
      type: object
      title: DeleteFunctionRequest
      properties: {}
    DeleteGraphqlApiRequest:
      type: object
      title: DeleteGraphqlApiRequest
      properties: {}
    DeleteResolverRequest:
      type: object
      title: DeleteResolverRequest
      properties: {}
    DeleteTypeRequest:
      type: object
      title: DeleteTypeRequest
      properties: {}
    DisassociateApiRequest:
      type: object
      title: DisassociateApiRequest
      properties: {}
    DomainNameConfigs:
      type: array
      items:
        $ref: "#/components/schemas/DomainNameConfig"
    ErrorMessage:
      type: string
    ErrorDetail:
      type: object
      properties:
        message:
          allOf:
            - $ref: "#/components/schemas/ErrorMessage"
            - description: The error payload.
      description: Contains the list of errors generated. When using JavaScript, this will apply to the request or response function evaluation.
    EvaluateCodeErrorDetail:
      type: object
      properties:
        message:
          allOf:
            - $ref: "#/components/schemas/ErrorMessage"
            - description: The error payload.
        codeErrors:
          allOf:
            - $ref: "#/components/schemas/CodeErrors"
            - description: Contains the list of <code>CodeError</code> objects.
      description: Contains the list of errors from a code evaluation response.
    EvaluateCodeRequest:
      type: object
      required:
        - runtime
        - code
        - context
      title: EvaluateCodeRequest
      properties:
        runtime:
          allOf:
            - $ref: "#/components/schemas/AppSyncRuntime"
            - description: The runtime to be used when evaluating the code. Currently, only the <code>APPSYNC_JS</code> runtime is supported.
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The code definition to be evaluated. Note that <code>code</code> and <code>runtime</code> are both required for this action. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
        context:
          allOf:
            - $ref: "#/components/schemas/Context"
            - description: The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.
        function:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The function within the code to be evaluated. If provided, the valid values are <code>request</code> and <code>response</code>.
    EvaluationResult:
      type: string
      pattern: ^[\s\S]*$
      minLength: 0
      maxLength: 65536
    Logs:
      type: array
      items:
        $ref: "#/components/schemas/String"
    Template:
      type: string
      pattern: ^[\s\S]*$
      minLength: 2
      maxLength: 65536
    EvaluateMappingTemplateRequest:
      type: object
      required:
        - template
        - context
      title: EvaluateMappingTemplateRequest
      properties:
        template:
          allOf:
            - $ref: "#/components/schemas/Template"
            - description: The mapping template; this can be a request or response template. A <code>template</code> is required for this action.
        context:
          allOf:
            - $ref: "#/components/schemas/Context"
            - description: The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.
    FlushApiCacheRequest:
      type: object
      title: FlushApiCacheRequest
      properties: {}
      description: Represents the input of a <code>FlushApiCache</code> operation.
    Functions:
      type: array
      items:
        $ref: "#/components/schemas/FunctionConfiguration"
    GetApiAssociationRequest:
      type: object
      title: GetApiAssociationRequest
      properties: {}
    GetApiCacheRequest:
      type: object
      title: GetApiCacheRequest
      properties: {}
      description: Represents the input of a <code>GetApiCache</code> operation.
    GetDataSourceRequest:
      type: object
      title: GetDataSourceRequest
      properties: {}
    GetDomainNameRequest:
      type: object
      title: GetDomainNameRequest
      properties: {}
    GetFunctionRequest:
      type: object
      title: GetFunctionRequest
      properties: {}
    GetGraphqlApiRequest:
      type: object
      title: GetGraphqlApiRequest
      properties: {}
    OutputType:
      type: string
      enum:
        - SDL
        - JSON
    GetIntrospectionSchemaRequest:
      type: object
      title: GetIntrospectionSchemaRequest
      properties: {}
    GetResolverRequest:
      type: object
      title: GetResolverRequest
      properties: {}
    GetSchemaCreationStatusRequest:
      type: object
      title: GetSchemaCreationStatusRequest
      properties: {}
    SchemaStatus:
      type: string
      enum:
        - PROCESSING
        - ACTIVE
        - DELETING
        - FAILED
        - SUCCESS
        - NOT_APPLICABLE
    GetTypeRequest:
      type: object
      title: GetTypeRequest
      properties: {}
    MapOfStringToString:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    GraphqlApis:
      type: array
      items:
        $ref: "#/components/schemas/GraphqlApi"
    PaginationToken:
      type: string
      pattern: "[\\\\S]+"
      minLength: 1
      maxLength: 65536
    MaxResults:
      type: integer
      minimum: 0
      maximum: 25
    ListApiKeysRequest:
      type: object
      title: ListApiKeysRequest
      properties: {}
    ListDataSourcesRequest:
      type: object
      title: ListDataSourcesRequest
      properties: {}
    ListDomainNamesRequest:
      type: object
      title: ListDomainNamesRequest
      properties: {}
    ListFunctionsRequest:
      type: object
      title: ListFunctionsRequest
      properties: {}
    ListGraphqlApisRequest:
      type: object
      title: ListGraphqlApisRequest
      properties: {}
    ListResolversByFunctionRequest:
      type: object
      title: ListResolversByFunctionRequest
      properties: {}
    Resolvers:
      type: array
      items:
        $ref: "#/components/schemas/Resolver"
    ListResolversRequest:
      type: object
      title: ListResolversRequest
      properties: {}
    ResourceArn:
      type: string
      pattern: ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
      minLength: 70
      maxLength: 75
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListTypesRequest:
      type: object
      title: ListTypesRequest
      properties: {}
    TypeList:
      type: array
      items:
        $ref: "#/components/schemas/Type"
    StartSchemaCreationRequest:
      type: object
      required:
        - definition
      title: StartSchemaCreationRequest
      properties:
        definition:
          allOf:
            - $ref: "#/components/schemas/Blob"
            - description: The schema definition, in GraphQL schema language format.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: A <code>TagMap</code> object.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateApiCacheRequest:
      type: object
      required:
        - ttl
        - apiCachingBehavior
        - type
      title: UpdateApiCacheRequest
      properties:
        ttl:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: <p>TTL in seconds for cache entries.</p> <p>Valid values are 1–3,600 seconds.</p>
        apiCachingBehavior:
          allOf:
            - $ref: "#/components/schemas/ApiCachingBehavior"
            - description: "<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>"
        type:
          allOf:
            - $ref: "#/components/schemas/ApiCacheType"
            - description: "<p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>"
      description: Represents the input of a <code>UpdateApiCache</code> operation.
    UpdateApiKeyRequest:
      type: object
      title: UpdateApiKeyRequest
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: A description of the purpose of the API key.
        expires:
          allOf:
            - $ref: "#/components/schemas/Long"
            - description: From the update time, the time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .
    UpdateDataSourceRequest:
      type: object
      required:
        - type
      title: UpdateDataSourceRequest
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The new description for the data source.
        type:
          allOf:
            - $ref: "#/components/schemas/DataSourceType"
            - description: The new data source type.
        serviceRoleArn:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The new service role Amazon Resource Name (ARN) for the data source.
        dynamodbConfig:
          allOf:
            - $ref: "#/components/schemas/DynamodbDataSourceConfig"
            - description: The new Amazon DynamoDB configuration.
        lambdaConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaDataSourceConfig"
            - description: The new Lambda configuration.
        elasticsearchConfig:
          allOf:
            - $ref: "#/components/schemas/ElasticsearchDataSourceConfig"
            - description: <p>The new OpenSearch configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. Instead, use <a>UpdateDataSourceRequest$openSearchServiceConfig</a> to update an OpenSearch data source.</p>
        openSearchServiceConfig:
          allOf:
            - $ref: "#/components/schemas/OpenSearchServiceDataSourceConfig"
            - description: The new OpenSearch configuration.
        httpConfig:
          allOf:
            - $ref: "#/components/schemas/HttpDataSourceConfig"
            - description: The new HTTP endpoint configuration.
        relationalDatabaseConfig:
          allOf:
            - $ref: "#/components/schemas/RelationalDatabaseDataSourceConfig"
            - description: The new relational database configuration.
        eventBridgeConfig:
          allOf:
            - $ref: "#/components/schemas/EventBridgeDataSourceConfig"
            - description: The new Amazon EventBridge settings.
    UpdateDomainNameRequest:
      type: object
      title: UpdateDomainNameRequest
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: A description of the <code>DomainName</code>.
    UpdateFunctionRequest:
      type: object
      required:
        - name
        - dataSourceName
      title: UpdateFunctionRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The <code>Function</code> name.
        description:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>Function</code> description.
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The <code>Function</code> <code>DataSource</code> name.
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The <code>Function</code> request mapping template.
        functionVersion:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29. Note that when using VTL and mapping templates, the <code>functionVersion</code> is required.
        syncConfig:
          $ref: "#/components/schemas/SyncConfig"
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
    UpdateGraphqlApiRequest:
      type: object
      required:
        - name
      title: UpdateGraphqlApiRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The new name for the <code>GraphqlApi</code> object.
        logConfig:
          allOf:
            - $ref: "#/components/schemas/LogConfig"
            - description: The Amazon CloudWatch Logs configuration for the <code>GraphqlApi</code> object.
        authenticationType:
          allOf:
            - $ref: "#/components/schemas/AuthenticationType"
            - description: The new authentication type for the <code>GraphqlApi</code> object.
        userPoolConfig:
          allOf:
            - $ref: "#/components/schemas/UserPoolConfig"
            - description: The new Amazon Cognito user pool configuration for the <code>~GraphqlApi</code> object.
        openIDConnectConfig:
          allOf:
            - $ref: "#/components/schemas/OpenIDConnectConfig"
            - description: The OpenID Connect configuration for the <code>GraphqlApi</code> object.
        additionalAuthenticationProviders:
          allOf:
            - $ref: "#/components/schemas/AdditionalAuthenticationProviders"
            - description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
        xrayEnabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.
        lambdaAuthorizerConfig:
          allOf:
            - $ref: "#/components/schemas/LambdaAuthorizerConfig"
            - description: Configuration for Lambda function authorization.
    UpdateResolverRequest:
      type: object
      title: UpdateResolverRequest
      properties:
        dataSourceName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The new data source name.
        requestMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: <p>The new request mapping template.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
        responseMappingTemplate:
          allOf:
            - $ref: "#/components/schemas/MappingTemplate"
            - description: The new response mapping template.
        kind:
          allOf:
            - $ref: "#/components/schemas/ResolverKind"
            - description: "<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"
        pipelineConfig:
          allOf:
            - $ref: "#/components/schemas/PipelineConfig"
            - description: The <code>PipelineConfig</code>.
        syncConfig:
          allOf:
            - $ref: "#/components/schemas/SyncConfig"
            - description: The <code>SyncConfig</code> for a resolver attached to a versioned data source.
        cachingConfig:
          allOf:
            - $ref: "#/components/schemas/CachingConfig"
            - description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
            - $ref: "#/components/schemas/MaxBatchSize"
            - description: The maximum batching size for a resolver.
        runtime:
          $ref: "#/components/schemas/AppSyncRuntime"
        code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
    UpdateTypeRequest:
      type: object
      required:
        - format
      title: UpdateTypeRequest
      properties:
        definition:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The new definition.
        format:
          allOf:
            - $ref: "#/components/schemas/TypeDefinitionFormat"
            - description: "The new type format: SDL or JSON."
security:
  - hmac: []
