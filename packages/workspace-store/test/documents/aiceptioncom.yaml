swagger: "2.0"
schemes:
  - https
host: aiception.com
basePath: /api/v2.1
info:
  contact:
    x-twitter: AIception
  description: Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
  title: AIception Interactive
  version: 1.0.0
  x-apisguru-categories:
    - machine_learning
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_AIception_profile_image.jpeg
  x-origin:
    - format: swagger
      url: https://aiception.com/static/swagger.json
      version: "2.0"
  x-providerName: aiception.com
securityDefinitions:
  UserSecurity:
    type: basic
security:
  - UserSecurity: []
tags:
  - description: Everything about AIception vision API
    externalDocs:
      description: Find out more
      url: https://aiception.com
    name: vision
  - description: What will you make?
    name: creative
  - description: Speech to text, text to speech, natural language processing
    externalDocs:
      description: Find out more
      url: https://aiception.com
    name: language
paths:
  /adult_content:
    post:
      consumes:
        - application/json
      description: Creates a new adult_content task that tells the if the image has nudity or sexual content.
      parameters:
        - description: The image to analyze
          in: body
          name: body
          required: true
          schema:
            properties:
              async:
                default: true
                type: boolean
              image_url:
                type: string
            required:
              - image_url
      produces:
        - application/json
      responses:
        "201":
          description: Task succesfully created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Task could not be created.
      summary: Image contains nudity or sexually explicit content? [ image_url -> id ]
      tags:
        - vision
  "/adult_content/{taskId}":
    get:
      description: Gets the adult_content task.
      parameters:
        - description: An internal id for the task
          in: path
          name: taskId
          required: true
          type: string
      responses:
        "200":
          description: The contents of the adult_content task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: The Task does not exists.
      summary: Gets the adult_content task [ id -> adult content task ]
      tags:
        - vision
  /artistic_image:
    post:
      consumes:
        - application/json
      description: Given an image content and a style image create a new stylized image of the content.
      parameters:
        - description: The content image and the style image
          in: body
          name: body
          required: true
          schema:
            properties:
              async:
                default: true
                type: boolean
              image_url:
                type: string
              style_url:
                type: string
            required:
              - image_url
              - style_url
      produces:
        - application/json
      responses:
        "201":
          description: Task succesfully created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Task could not be created.
      summary: Create an artistic image [ image_url, style_url -> id ]
      tags:
        - creative
  "/artistic_image/{taskId}":
    get:
      description: The artistic_image will have the urls of the stylized images.
      parameters:
        - description: An internal id for the task
          in: path
          name: taskId
          required: true
          type: string
      responses:
        "200":
          description: The contents of the artistic_image task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: The Task does not exists.
      summary: Gets a artistic image by task id [ id -> artistic image task ]
      tags:
        - creative
  /detect_object:
    post:
      consumes:
        - application/json
      description: Creates a new detect object task that recognizes the object in the image.
      parameters:
        - description: The image to analyze
          in: body
          name: body
          required: true
          schema:
            properties:
              async:
                default: true
                type: boolean
              image_url:
                type: string
            required:
              - image_url
      produces:
        - application/json
      responses:
        "201":
          description: Task succesfully created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Task could not be created.
      summary: What is that object? [ image_url -> id ]
      tags:
        - vision
  "/detect_object/{taskId}":
    get:
      description: Gets the detect_object task.
      parameters:
        - description: An internal id for the task
          in: path
          name: taskId
          required: true
          type: string
      responses:
        "200":
          description: The contents of the detect_object task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: The Task does not exists.
      summary: Gets the detect_object task [ id -> detect object task]
      tags:
        - vision
  /face:
    post:
      consumes:
        - application/json
      description: Get a list of all the locations of the faces in the image.
      parameters:
        - description: The image to analyze
          in: body
          name: body
          required: true
          schema:
            properties:
              async:
                default: true
                type: boolean
              image_url:
                type: string
            required:
              - image_url
      produces:
        - application/json
      responses:
        "201":
          description: Task succesfully created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Task could not be created.
      summary: Find all faces in the image [ image_url -> id ]
      tags:
        - vision
  "/face/{taskId}":
    get:
      description: Gets the face task.
      parameters:
        - description: An internal id for the task
          in: path
          name: taskId
          required: true
          type: string
      responses:
        "200":
          description: The contents of the face task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: The Task does not exists.
      summary: Gets the face task [ id -> face task ]
      tags:
        - vision
  /face_age:
    post:
      consumes:
        - application/json
      description: Creates a new face age task that approximates the age of the person in the image.
      parameters:
        - description: The image to analyze
          in: body
          name: body
          required: true
          schema:
            properties:
              async:
                default: true
                type: boolean
              image_url:
                type: string
            required:
              - image_url
      produces:
        - application/json
      responses:
        "201":
          description: Task succesfully created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Task could not be created.
      summary: How old is the person in the image? [ image_url -> id ]
      tags:
        - vision
  "/face_age/{taskId}":
    get:
      description: Gets the face_age task.
      parameters:
        - description: An internal id for the task
          in: path
          name: taskId
          required: true
          type: string
      responses:
        "200":
          description: The contents of the face_age task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: The Task does not exists.
      summary: Gets the face_age task [ id -> face age task ]
      tags:
        - vision
definitions:
  AgeAnswer:
    properties:
      max:
        type: integer
      min:
        type: integer
      score:
        type: number
  Person:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
    required:
      - username
  Persons:
    items:
      $ref: "#/definitions/Person"
    type: array
  Task:
    properties:
      answer:
        description: The answer you are looking for.
        readOnly: true
        type: number
      image_url:
        description: The url of the image that will be processed.
        type: string
      this_url:
        description: Use this url to get this task.
        readOnly: true
        type: string
    required:
      - image_url
