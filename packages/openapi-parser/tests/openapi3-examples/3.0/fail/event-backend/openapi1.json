{
  "openapi": "3.0.0",
  "info": {
    "title": "api",
    "description": "Baucis generated OpenAPI v.3 documentation.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [
    {
      "name": "_config",
      "description": "_config resource.",
      "x-resource": true
    },
    {
      "name": "_webhooks",
      "description": "_webhooks resource.",
      "x-resource": true
    },
    {
      "name": "_users",
      "description": "_users resource.",
      "x-resource": true
    },
    {
      "name": "_providers",
      "description": "_providers resource.",
      "x-resource": true
    },
    {
      "name": "_permissions",
      "description": "_permissions resource.",
      "x-resource": true
    },
    {
      "name": "place",
      "description": "Place resource.",
      "x-resource": true
    },
    {
      "name": "sessionTalk",
      "description": "SessionTalk resource.",
      "x-resource": true
    },
    {
      "name": "speaker",
      "description": "Speaker resource.",
      "x-resource": true
    },
    {
      "name": "sponsor",
      "description": "Sponsor resource.",
      "x-resource": true
    }
  ],
  "paths": {
    "/admin-config/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_config"
            }
          },
          "404": {
            "description": "No _config was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "get_configById",
        "summary": "Get a _config by its unique ID",
        "description": "Retrieve a _config by its ID.",
        "tags": ["_config"]
      },
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/_config"
            }
          },
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_config"
            }
          },
          "404": {
            "description": "No _config was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "update_config",
        "summary": "Modify a _config by its unique ID",
        "description": "Update an existing _config by its ID.",
        "tags": ["_config"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_config"
            }
          },
          "404": {
            "description": "No _config was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_configById",
        "summary": "Delete a _config by its unique ID",
        "description": "Deletes an existing _config by its ID.",
        "tags": ["_config"]
      }
    },
    "/admin-config": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_config"
              }
            }
          },
          "404": {
            "description": "No admin-config matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "query_config",
        "summary": "Query some admin-config",
        "description": "Query over admin-config.",
        "tags": ["_config"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_config"
            }
          },
          "404": {
            "description": "No admin-config matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "create_config",
        "summary": "Create some admin-config",
        "description": "Create one or more admin-config.",
        "tags": ["_config"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_config"
              }
            }
          },
          "404": {
            "description": "No admin-config matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_configByQuery",
        "summary": "Delete some admin-config by query",
        "description": "Delete all admin-config matching the specified query.",
        "tags": ["_config"]
      }
    },
    "/admin-webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_webhooks"
            }
          },
          "404": {
            "description": "No _webhooks was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "get_webhooksById",
        "summary": "Get a _webhooks by its unique ID",
        "description": "Retrieve a _webhooks by its ID.",
        "tags": ["_webhooks"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_webhooks"
            }
          },
          "404": {
            "description": "No _webhooks was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a _webhooks by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/_webhooks"
              }
            }
          }
        },
        "operationId": "update_webhooks",
        "summary": "Modify a _webhooks by its unique ID",
        "description": "Update an existing _webhooks by its ID.",
        "tags": ["_webhooks"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_webhooks"
            }
          },
          "404": {
            "description": "No _webhooks was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_webhooksById",
        "summary": "Delete a _webhooks by its unique ID",
        "description": "Deletes an existing _webhooks by its ID.",
        "tags": ["_webhooks"]
      }
    },
    "/admin-webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_webhooks"
              }
            }
          },
          "404": {
            "description": "No admin-webhooks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "query_webhooks",
        "summary": "Query some admin-webhooks",
        "description": "Query over admin-webhooks.",
        "tags": ["_webhooks"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_webhooks"
            }
          },
          "404": {
            "description": "No admin-webhooks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "create_webhooks",
        "summary": "Create some admin-webhooks",
        "description": "Create one or more admin-webhooks.",
        "tags": ["_webhooks"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_webhooks"
              }
            }
          },
          "404": {
            "description": "No admin-webhooks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_webhooksByQuery",
        "summary": "Delete some admin-webhooks by query",
        "description": "Delete all admin-webhooks matching the specified query.",
        "tags": ["_webhooks"]
      }
    },
    "/admin-users/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_users"
            }
          },
          "404": {
            "description": "No _users was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "get_usersById",
        "summary": "Get a _users by its unique ID",
        "description": "Retrieve a _users by its ID.",
        "tags": ["_users"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_users"
            }
          },
          "404": {
            "description": "No _users was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a _users by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/_users"
              }
            }
          }
        },
        "operationId": "update_users",
        "summary": "Modify a _users by its unique ID",
        "description": "Update an existing _users by its ID.",
        "tags": ["_users"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_users"
            }
          },
          "404": {
            "description": "No _users was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_usersById",
        "summary": "Delete a _users by its unique ID",
        "description": "Deletes an existing _users by its ID.",
        "tags": ["_users"]
      }
    },
    "/admin-users": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_users"
              }
            }
          },
          "404": {
            "description": "No admin-users matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "query_users",
        "summary": "Query some admin-users",
        "description": "Query over admin-users.",
        "tags": ["_users"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_users"
            }
          },
          "404": {
            "description": "No admin-users matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "create_users",
        "summary": "Create some admin-users",
        "description": "Create one or more admin-users.",
        "tags": ["_users"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_users"
              }
            }
          },
          "404": {
            "description": "No admin-users matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_usersByQuery",
        "summary": "Delete some admin-users by query",
        "description": "Delete all admin-users matching the specified query.",
        "tags": ["_users"]
      }
    },
    "/admin-providers/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_providers"
            }
          },
          "404": {
            "description": "No _providers was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "get_providersById",
        "summary": "Get a _providers by its unique ID",
        "description": "Retrieve a _providers by its ID.",
        "tags": ["_providers"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_providers"
            }
          },
          "404": {
            "description": "No _providers was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a _providers by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/_providers"
              }
            }
          }
        },
        "operationId": "update_providers",
        "summary": "Modify a _providers by its unique ID",
        "description": "Update an existing _providers by its ID.",
        "tags": ["_providers"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_providers"
            }
          },
          "404": {
            "description": "No _providers was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_providersById",
        "summary": "Delete a _providers by its unique ID",
        "description": "Deletes an existing _providers by its ID.",
        "tags": ["_providers"]
      }
    },
    "/admin-providers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_providers"
              }
            }
          },
          "404": {
            "description": "No admin-providers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "query_providers",
        "summary": "Query some admin-providers",
        "description": "Query over admin-providers.",
        "tags": ["_providers"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_providers"
            }
          },
          "404": {
            "description": "No admin-providers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "create_providers",
        "summary": "Create some admin-providers",
        "description": "Create one or more admin-providers.",
        "tags": ["_providers"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_providers"
              }
            }
          },
          "404": {
            "description": "No admin-providers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_providersByQuery",
        "summary": "Delete some admin-providers by query",
        "description": "Delete all admin-providers matching the specified query.",
        "tags": ["_providers"]
      }
    },
    "/admin-permissions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_permissions"
            }
          },
          "404": {
            "description": "No _permissions was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "get_permissionsById",
        "summary": "Get a _permissions by its unique ID",
        "description": "Retrieve a _permissions by its ID.",
        "tags": ["_permissions"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_permissions"
            }
          },
          "404": {
            "description": "No _permissions was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a _permissions by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/_permissions"
              }
            }
          }
        },
        "operationId": "update_permissions",
        "summary": "Modify a _permissions by its unique ID",
        "description": "Update an existing _permissions by its ID.",
        "tags": ["_permissions"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_permissions"
            }
          },
          "404": {
            "description": "No _permissions was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_permissionsById",
        "summary": "Delete a _permissions by its unique ID",
        "description": "Deletes an existing _permissions by its ID.",
        "tags": ["_permissions"]
      }
    },
    "/admin-permissions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_permissions"
              }
            }
          },
          "404": {
            "description": "No admin-permissions matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "query_permissions",
        "summary": "Query some admin-permissions",
        "description": "Query over admin-permissions.",
        "tags": ["_permissions"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/_permissions"
            }
          },
          "404": {
            "description": "No admin-permissions matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "create_permissions",
        "summary": "Create some admin-permissions",
        "description": "Create one or more admin-permissions.",
        "tags": ["_permissions"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/_permissions"
              }
            }
          },
          "404": {
            "description": "No admin-permissions matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "delete_permissionsByQuery",
        "summary": "Delete some admin-permissions by query",
        "description": "Delete all admin-permissions matching the specified query.",
        "tags": ["_permissions"]
      }
    },
    "/places/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Place"
            }
          },
          "404": {
            "description": "No place was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "getPlaceById",
        "summary": "Get a place by its unique ID",
        "description": "Retrieve a place by its ID.",
        "tags": ["place"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Place"
            }
          },
          "404": {
            "description": "No place was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a place by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/place"
              }
            }
          }
        },
        "operationId": "updatePlace",
        "summary": "Modify a place by its unique ID",
        "description": "Update an existing place by its ID.",
        "tags": ["place"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Place"
            }
          },
          "404": {
            "description": "No place was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deletePlaceById",
        "summary": "Delete a place by its unique ID",
        "description": "Deletes an existing place by its ID.",
        "tags": ["place"]
      }
    },
    "/places": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Place"
              }
            }
          },
          "404": {
            "description": "No places matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "queryPlace",
        "summary": "Query some places",
        "description": "Query over places.",
        "tags": ["place"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Place"
            }
          },
          "404": {
            "description": "No places matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "createPlace",
        "summary": "Create some places",
        "description": "Create one or more places.",
        "tags": ["place"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Place"
              }
            }
          },
          "404": {
            "description": "No places matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deletePlaceByQuery",
        "summary": "Delete some places by query",
        "description": "Delete all places matching the specified query.",
        "tags": ["place"]
      }
    },
    "/sessionTalks/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/SessionTalk"
            }
          },
          "404": {
            "description": "No sessionTalk was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "getSessionTalkById",
        "summary": "Get a sessionTalk by its unique ID",
        "description": "Retrieve a sessionTalk by its ID.",
        "tags": ["sessionTalk"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/SessionTalk"
            }
          },
          "404": {
            "description": "No sessionTalk was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a sessionTalk by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/sessionTalk"
              }
            }
          }
        },
        "operationId": "updateSessionTalk",
        "summary": "Modify a sessionTalk by its unique ID",
        "description": "Update an existing sessionTalk by its ID.",
        "tags": ["sessionTalk"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/SessionTalk"
            }
          },
          "404": {
            "description": "No sessionTalk was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSessionTalkById",
        "summary": "Delete a sessionTalk by its unique ID",
        "description": "Deletes an existing sessionTalk by its ID.",
        "tags": ["sessionTalk"]
      }
    },
    "/sessionTalks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionTalk"
              }
            }
          },
          "404": {
            "description": "No sessionTalks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "querySessionTalk",
        "summary": "Query some sessionTalks",
        "description": "Query over sessionTalks.",
        "tags": ["sessionTalk"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/SessionTalk"
            }
          },
          "404": {
            "description": "No sessionTalks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "createSessionTalk",
        "summary": "Create some sessionTalks",
        "description": "Create one or more sessionTalks.",
        "tags": ["sessionTalk"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionTalk"
              }
            }
          },
          "404": {
            "description": "No sessionTalks matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSessionTalkByQuery",
        "summary": "Delete some sessionTalks by query",
        "description": "Delete all sessionTalks matching the specified query.",
        "tags": ["sessionTalk"]
      }
    },
    "/speakers/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Speaker"
            }
          },
          "404": {
            "description": "No speaker was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "getSpeakerById",
        "summary": "Get a speaker by its unique ID",
        "description": "Retrieve a speaker by its ID.",
        "tags": ["speaker"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Speaker"
            }
          },
          "404": {
            "description": "No speaker was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a speaker by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/speaker"
              }
            }
          }
        },
        "operationId": "updateSpeaker",
        "summary": "Modify a speaker by its unique ID",
        "description": "Update an existing speaker by its ID.",
        "tags": ["speaker"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Speaker"
            }
          },
          "404": {
            "description": "No speaker was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSpeakerById",
        "summary": "Delete a speaker by its unique ID",
        "description": "Deletes an existing speaker by its ID.",
        "tags": ["speaker"]
      }
    },
    "/speakers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Speaker"
              }
            }
          },
          "404": {
            "description": "No speakers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "querySpeaker",
        "summary": "Query some speakers",
        "description": "Query over speakers.",
        "tags": ["speaker"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Speaker"
            }
          },
          "404": {
            "description": "No speakers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "createSpeaker",
        "summary": "Create some speakers",
        "description": "Create one or more speakers.",
        "tags": ["speaker"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Speaker"
              }
            }
          },
          "404": {
            "description": "No speakers matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSpeakerByQuery",
        "summary": "Delete some speakers by query",
        "description": "Delete all speakers matching the specified query.",
        "tags": ["speaker"]
      }
    },
    "/sponsors/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Sponsor"
            }
          },
          "404": {
            "description": "No sponsor was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "getSponsorById",
        "summary": "Get a sponsor by its unique ID",
        "description": "Retrieve a sponsor by its ID.",
        "tags": ["sponsor"]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Baucis-Update-Operator"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Sponsor"
            }
          },
          "404": {
            "description": "No sponsor was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Update a sponsor by sending the paths to be updated in the request body.",
              "schema": {
                "$ref": "#/components/schemas/sponsor"
              }
            }
          }
        },
        "operationId": "updateSponsor",
        "summary": "Modify a sponsor by its unique ID",
        "description": "Update an existing sponsor by its ID.",
        "tags": ["sponsor"]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Sponsor"
            }
          },
          "404": {
            "description": "No sponsor was found with that ID.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSponsorById",
        "summary": "Delete a sponsor by its unique ID",
        "description": "Deletes an existing sponsor by its ID.",
        "tags": ["sponsor"]
      }
    },
    "/sponsors": {
      "parameters": [
        {
          "$ref": "#/components/parameters/select"
        },
        {
          "$ref": "#/components/parameters/populate"
        },
        {
          "$ref": "#/components/parameters/sort"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Sponsor"
              }
            }
          },
          "404": {
            "description": "No sponsors matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "querySponsor",
        "summary": "Query some sponsors",
        "description": "Query over sponsors.",
        "tags": ["sponsor"]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Sucessful response. Single resource.",
            "schema": {
              "$ref": "#/components/schemas/Sponsor"
            }
          },
          "404": {
            "description": "No sponsors matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation error.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "createSponsor",
        "summary": "Create some sponsors",
        "description": "Create one or more sponsors.",
        "tags": ["sponsor"]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/conditions"
          },
          {
            "$ref": "#/components/parameters/distinct"
          },
          {
            "$ref": "#/components/parameters/hint"
          },
          {
            "$ref": "#/components/parameters/comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful response. Collection of resources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Sponsor"
              }
            }
          },
          "404": {
            "description": "No sponsors matched that query.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "type": "string"
            }
          }
        },
        "operationId": "deleteSponsorByQuery",
        "summary": "Delete some sponsors by query",
        "description": "Delete all sponsors matching the specified query.",
        "tags": ["sponsor"]
      }
    }
  },
  "components": {
    "schemas": {
      "_config": {
        "required": ["key"],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "_webhooks": {
        "required": [
          "enabled",
          "resource",
          "operation",
          "httpMethod",
          "urlTemplate"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "resource": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "httpMethod": {
            "type": "string"
          },
          "urlTemplate": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_webhooksParameters"
            }
          },
          "contentType": {
            "type": "string"
          },
          "bodyTemplate": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "_webhooksParameters": {
        "required": ["type", "key"],
        "properties": {
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "_users": {
        "required": ["accountType", "username", "createdAt", "enabled", "role"],
        "properties": {
          "accountType": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastAccessOn": {
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "type": "boolean"
          },
          "role": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "_providers": {
        "required": ["name", "enable", "autoEnroll", "order"],
        "properties": {
          "name": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "autoEnroll": {
            "type": "boolean"
          },
          "defaultRole": {
            "type": "string"
          },
          "order": {
            "type": "number",
            "format": "double"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "_permissions": {
        "required": ["role", "resource"],
        "properties": {
          "role": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "operations.allow": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operations.deny": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "horizontalSecurity.type": {
            "type": "string"
          },
          "fields.allow": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fields.deny": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Place": {
        "required": ["name", "location.type"],
        "properties": {
          "_ownerId": {
            "type": "string"
          },
          "_createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zipCode": {
            "type": "number",
            "format": "double"
          },
          "image": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "location.type": {
            "type": "string"
          },
          "location.coordinates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SessionTalk": {
        "required": ["sessionType", "name", "track", "language"],
        "properties": {
          "_ownerId": {
            "type": "string"
          },
          "_createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sessionType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "track": {
            "type": "number",
            "format": "double"
          },
          "language": {
            "type": "string"
          },
          "starts": {
            "type": "string",
            "format": "date-time"
          },
          "ends": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "speaker": {
            "$ref": "#/components/schemas/Speaker"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Speaker": {
        "required": ["name", "surname"],
        "properties": {
          "_ownerId": {
            "type": "string"
          },
          "_createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          },
          "blog": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "github": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Sponsor": {
        "required": ["name", "level", "logo"],
        "properties": {
          "_ownerId": {
            "type": "string"
          },
          "_createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "__v": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "required": ["message", "name", "kind", "path"],
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ValidationErrorProperties"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "ValidationErrorProperties": {
        "required": ["type", "message", "path"],
        "properties": {
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      }
    },
    "responses": {},
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "description": "The identifier of the resource.",
        "type": "string",
        "required": true
      },
      "skip": {
        "name": "skip",
        "in": "query",
        "description": "How many documents to skip. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#skip)",
        "type": "integer",
        "format": "int32",
        "required": false
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of documents to send. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#limit)",
        "type": "integer",
        "format": "int32",
        "required": false
      },
      "count": {
        "name": "count",
        "in": "query",
        "description": "Set to true to return count instead of documents. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#count)",
        "type": "boolean",
        "required": false
      },
      "conditions": {
        "name": "conditions",
        "in": "query",
        "description": "Set the conditions used to find or remove the document(s). [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#conditions)",
        "type": "string",
        "required": false
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Set the fields by which to sort. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#sort)",
        "type": "string",
        "required": false
      },
      "distinct": {
        "name": "distinct",
        "in": "query",
        "description": "Set to a path name to retrieve an array of distinct values. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#distinct)",
        "type": "string",
        "required": false
      },
      "hint": {
        "name": "hint",
        "in": "query",
        "description": "Add an index hint to the query (must be enabled per controller). [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#hint)",
        "type": "string",
        "required": false
      },
      "comment": {
        "name": "comment",
        "in": "query",
        "description": "Add a comment to a query (must be enabled per controller). [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#comment)",
        "type": "string",
        "required": false
      },
      "select": {
        "name": "select",
        "in": "query",
        "description": "Select which paths will be returned by the query. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#select)",
        "type": "string",
        "required": false
      },
      "populate": {
        "name": "populate",
        "in": "query",
        "description": "Specify which paths to populate. [doc](https://github.com/wprl/baucis/wiki/Query-String-Parameters#populate)",
        "type": "string",
        "required": false
      },
      "X-Baucis-Update-Operator": {
        "name": "X-Baucis-Update-Operator",
        "in": "header",
        "description": "**BYPASSES VALIDATION** May be used with PUT to update the document using $push, $pull, or $set. [doc](https://github.com/wprl/baucis/wiki/HTTP-Headers)",
        "type": "string",
        "required": false
      }
    },
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {},
    "links": {},
    "callbacks": {}
  }
}
