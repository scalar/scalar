import type { RouteRecordInfo, RouteRecordRaw } from 'vue-router'

/** Full path of the example page */
const EXAMPLE_PATH = '/workspace/default/document/default/path/default/method/default/example/default'

/** Full path of the document overview page */
const DOCUMENT_OVERVIEW_PATH = '/workspace/default/document/default/overview'

/** Model route is just an example */
export const modalRoutes = [
  // Example page
  {
    name: 'example',
    path: '/workspace/:workspaceSlug/document/:documentSlug/path/:pathEncoded/method/:method/example/:exampleName',
    props: true,
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  // This will redirect to the example page for every incomplete path (just in case)
  {
    path: '(.*)',
    redirect: EXAMPLE_PATH,
  },
] satisfies RouteRecordRaw[]

/** Routes for the API client app and web, the same as modal + workspace routes */
export const appRoutes = [
  {
    name: 'workspace',
    path: '/workspace/:workspaceSlug',
    children: [
      // Workspace overview
      {
        name: 'workspace.overview',
        path: 'overview',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Workspace servers
      {
        name: 'workspace.servers',
        path: 'servers',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Workspace environment
      {
        name: 'workspace.environment',
        path: 'environment',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Workspace authentication
      {
        name: 'workspace.authentication',
        path: 'authentication',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Workspace cookies
      {
        name: 'workspace.cookies',
        path: 'cookies',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Workspace settings
      {
        name: 'workspace.settings',
        path: 'settings',
        props: true,
        component: () => import('@/v2/components/TempReplaceMe.vue'),
      },
      // Document
      {
        name: 'document',
        path: 'document/:documentSlug',
        children: [
          // Document overview
          {
            name: 'document.overview',
            path: 'overview',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Document servers
          {
            name: 'document.servers',
            path: 'servers',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Document environment
          {
            name: 'document.environment',
            path: 'environment',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Document authentication
          {
            name: 'document.authentication',
            path: 'authentication',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Document cookies
          {
            name: 'document.cookies',
            path: 'cookies',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Document settings
          {
            name: 'document.settings',
            path: 'settings',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
          // Example page
          {
            name: 'example',
            path: 'path/:pathEncoded/method/:method/example/:exampleName',
            props: true,
            component: () => import('@/v2/components/TempReplaceMe.vue'),
          },
        ],
      },
      {
        path: '(.*)',
        redirect: DOCUMENT_OVERVIEW_PATH,
      },
    ],
  },
  {
    path: '(.*)',
    redirect: DOCUMENT_OVERVIEW_PATH,
  },
] satisfies RouteRecordRaw[]

/**
 * Type-safe route map for the API client application.
 * Defines all routes with their paths, parameters, and children relationships.
 *
 * [Generated by claude]
 *
 * @see {@link https://router.vuejs.org/guide/advanced/typed-routes.html}
 */
type RouteNamedMap = {
  workspace: RouteRecordInfo<
    'workspace',
    '/workspace/:workspaceSlug',
    { workspaceSlug: string },
    { workspaceSlug: string },
    | 'workspace.overview'
    | 'workspace.servers'
    | 'workspace.environment'
    | 'workspace.authentication'
    | 'workspace.cookies'
    | 'workspace.settings'
    | 'document'
  >
  'workspace.overview': RouteRecordInfo<
    'workspace.overview',
    '/workspace/:workspaceSlug/overview',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.servers': RouteRecordInfo<
    'workspace.servers',
    '/workspace/:workspaceSlug/servers',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.environment': RouteRecordInfo<
    'workspace.environment',
    '/workspace/:workspaceSlug/environment',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.authentication': RouteRecordInfo<
    'workspace.authentication',
    '/workspace/:workspaceSlug/authentication',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.cookies': RouteRecordInfo<
    'workspace.cookies',
    '/workspace/:workspaceSlug/cookies',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.settings': RouteRecordInfo<
    'workspace.settings',
    '/workspace/:workspaceSlug/settings',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  document: RouteRecordInfo<
    'document',
    '/workspace/:workspaceSlug/document/:documentSlug',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    | 'document.overview'
    | 'document.servers'
    | 'document.environment'
    | 'document.authentication'
    | 'document.cookies'
    | 'document.settings'
    | 'example'
  >
  'document.overview': RouteRecordInfo<
    'document.overview',
    '/workspace/:workspaceSlug/document/:documentSlug/overview',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'document.servers': RouteRecordInfo<
    'document.servers',
    '/workspace/:workspaceSlug/document/:documentSlug/servers',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'document.environment': RouteRecordInfo<
    'document.environment',
    '/workspace/:workspaceSlug/document/:documentSlug/environment',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'document.authentication': RouteRecordInfo<
    'document.authentication',
    '/workspace/:workspaceSlug/document/:documentSlug/authentication',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'document.cookies': RouteRecordInfo<
    'document.cookies',
    '/workspace/:workspaceSlug/document/:documentSlug/cookies',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'document.settings': RouteRecordInfo<
    'document.settings',
    '/workspace/:workspaceSlug/document/:documentSlug/settings',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  example: RouteRecordInfo<
    'example',
    '/workspace/:workspaceSlug/document/:documentSlug/path/:pathEncoded/method/:method/example/:exampleName',
    { workspaceSlug: string; documentSlug: string; pathEncoded: string; method: string; exampleName: string },
    { workspaceSlug: string; documentSlug: string; pathEncoded: string; method: string; exampleName: string },
    never
  >
}

declare module 'vue-router' {
  interface TypesConfig {
    RouteNamedMap: RouteNamedMap
  }
}
