import type { RouteRecordInfo, RouteRecordRaw } from 'vue-router'

/** Create the nested routes used by both the workspace and collection routes */
const createNestedRoutes = (routePrefix: string): RouteRecordRaw[] => [
  {
    name: `${routePrefix}.overview`,
    path: 'overview',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  {
    name: `${routePrefix}.servers`,
    path: 'servers',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  {
    name: `${routePrefix}.environment`,
    path: 'environment',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  {
    name: `${routePrefix}.authentication`,
    path: 'authentication',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  {
    name: `${routePrefix}.cookies`,
    path: 'cookies',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  {
    name: `${routePrefix}.settings`,
    path: 'settings',
    component: () => import('@/v2/components/TempReplaceMe.vue'),
  },
  // {
  //   name: `${routePrefix}.scripts`,
  //   path: 'scripts',
  //   component: () => import('@/v2/components/TempReplaceMe.vue'),
  // },
  // {
  //   name: `${routePrefix}.sync`,
  //   path: 'sync',
  //   component: () => import('@/v2/components/TempReplaceMe.vue'),
  // },
]

/** Routes required by the API client modal, no workspace routes OR collection routes */
export const modalRoutes = [
  {
    name: 'workspace',
    path: '/workspace/:workspaceSlug',
    children: [
      {
        name: 'document',
        path: 'document/:documentSlug',
        component: () => import('@/v2/components/TempReplaceMe.vue'),
        children: [
          {
            name: 'paths',
            path: '/paths/:pathEncoded/:method',
            children: [
              // Operation page (will be added later)
              // {
              //   name: 'operation',
              //   path: 'operation',
              //   component: () => import('@/v2/components/TempReplaceMe.vue'),
              // },
              // Example page
              {
                name: 'example',
                path: ':exampleName',
                component: () => import('@/v2/components/TempReplaceMe.vue'),
              },
            ],
          },
        ],
      },
    ],
  },
] satisfies RouteRecordRaw[]

/** Routes for the API client app and web, the same as modal + workspace routes */
export const appRoutes = [
  {
    name: 'workspace',
    path: '/workspace/:workspaceSlug',
    children: [
      // Workspace routes
      ...createNestedRoutes('workspace'),
      {
        name: 'document',
        path: 'document/:documentSlug',
        component: () => import('@/v2/components/TempReplaceMe.vue'),
        children: [
          // Collection routes
          ...createNestedRoutes('collection'),
          {
            name: 'paths',
            path: '/paths/:pathEncoded/:method',
            children: [
              // Operation page (will be added later)
              // {
              //   name: 'operation',
              //   path: 'operation',
              //   component: () => import('@/v2/components/TempReplaceMe.vue'),
              // },
              // Example page
              {
                name: 'example',
                path: ':exampleName',
                component: () => import('@/v2/components/TempReplaceMe.vue'),
              },
            ],
          },
        ],
      },
    ],
  },
] satisfies RouteRecordRaw[]

/**
 * Type-safe route map for the API client application.
 * Defines all routes with their paths, parameters, and children relationships.
 *
 * [Generated by claude]
 *
 * @see {@link https://router.vuejs.org/guide/advanced/typed-routes.html}
 */
type RouteNamedMap = {
  workspace: RouteRecordInfo<
    'workspace',
    '/workspace/:workspaceSlug',
    { workspaceSlug: string },
    { workspaceSlug: string },
    | 'workspace.overview'
    | 'workspace.servers'
    | 'workspace.environment'
    | 'workspace.authentication'
    | 'workspace.cookies'
    | 'workspace.settings'
    | 'document'
  >
  'workspace.overview': RouteRecordInfo<
    'workspace.overview',
    '/workspace/:workspaceSlug/overview',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.servers': RouteRecordInfo<
    'workspace.servers',
    '/workspace/:workspaceSlug/servers',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.environment': RouteRecordInfo<
    'workspace.environment',
    '/workspace/:workspaceSlug/environment',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.authentication': RouteRecordInfo<
    'workspace.authentication',
    '/workspace/:workspaceSlug/authentication',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.cookies': RouteRecordInfo<
    'workspace.cookies',
    '/workspace/:workspaceSlug/cookies',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  'workspace.settings': RouteRecordInfo<
    'workspace.settings',
    '/workspace/:workspaceSlug/settings',
    { workspaceSlug: string },
    { workspaceSlug: string },
    never
  >
  document: RouteRecordInfo<
    'document',
    '/workspace/:workspaceSlug/document/:documentSlug',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    | 'collection.overview'
    | 'collection.servers'
    | 'collection.environment'
    | 'collection.authentication'
    | 'collection.cookies'
    | 'collection.settings'
    | 'paths'
  >
  'collection.overview': RouteRecordInfo<
    'collection.overview',
    '/workspace/:workspaceSlug/document/:documentSlug/overview',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'collection.servers': RouteRecordInfo<
    'collection.servers',
    '/workspace/:workspaceSlug/document/:documentSlug/servers',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'collection.environment': RouteRecordInfo<
    'collection.environment',
    '/workspace/:workspaceSlug/document/:documentSlug/environment',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'collection.authentication': RouteRecordInfo<
    'collection.authentication',
    '/workspace/:workspaceSlug/document/:documentSlug/authentication',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'collection.cookies': RouteRecordInfo<
    'collection.cookies',
    '/workspace/:workspaceSlug/document/:documentSlug/cookies',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  'collection.settings': RouteRecordInfo<
    'collection.settings',
    '/workspace/:workspaceSlug/document/:documentSlug/settings',
    { workspaceSlug: string; documentSlug: string },
    { workspaceSlug: string; documentSlug: string },
    never
  >
  paths: RouteRecordInfo<
    'paths',
    '/paths/:pathEncoded/:method',
    { pathEncoded: string; method: string },
    { pathEncoded: string; method: string },
    'example'
  >
  example: RouteRecordInfo<
    'example',
    '/paths/:pathEncoded/:method/:exampleName',
    { pathEncoded: string; method: string; exampleName: string },
    { pathEncoded: string; method: string; exampleName: string },
    never
  >
}

declare module 'vue-router' {
  interface TypesConfig {
    RouteNamedMap: RouteNamedMap
  }
}
