import { z } from 'zod'

const DescriptionSchema = z.object({
  /**
   * A description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description: z.string().optional(),
})

export const ApiKeyInValues = ['query', 'header', 'cookie'] as const

export const ApiKeySchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('apiKey'),
  /**
   * REQUIRED. The name of the header, query or cookie parameter to be used.
   */
  name: z.string(),
  /**
   * REQUIRED. The location of the API key. Valid values are "query", "header", or "cookie".
   */
  in: z.enum(ApiKeyInValues),
})

export const HttpSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('http'),
  /**
   * REQUIRED. The name of the HTTP Authentication scheme to be used in the Authorization header as defined in RFC7235.
   * The values used SHOULD be registered in the IANA Authentication Scheme registry. The value is case-insensitive,
   * as defined in RFC7235.
   * This enum is sourced from the registry linked here
   * @see https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml
   */
  scheme: z
    .string()
    .toLowerCase()
    .pipe(
      z.union([
        z.string().nonempty(),
        z.enum([
          'bearer',
          'basic',
          'digest',
          'hoba',
          'mutual',
          'negotiate',
          'oauth',
          'scram-sha-1',
          'scram-sha-256',
          'vapid',
        ]),
      ]),
    ),

  /**
   * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an
   * authorization server, so this information is primarily for documentation purposes.
   */
  bearerFormat: z.union([z.literal('JWT'), z.literal('bearer'), z.string().nonempty()]).optional(),
})

export const OpenIdConnectSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('openIdConnect'),
  /**
   * REQUIRED. Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
   */
  openIdConnectUrl: z.url(),
})

/**
 * REQUIRED. The authorization URL to be used for this flow. This MUST be in
 * the form of a URL. The OAuth2 standard requires the use of TLS.
 */
const authorizationUrl = z.url()

/**
 * REQUIRED. The token URL to be used for this flow. This MUST be in the
 * form of a URL. The OAuth2 standard requires the use of TLS.
 */
const tokenUrl = z.url()

/**
 * The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires
 * the use of TLS.
 */
const refreshUrl = z.url().optional()

/**
 * OAuth Flow Object
 *
 * Configuration details for a supported OAuth Flow
 */
export const OAuthFlowObjectSchema = z.object({
  /**
   * REQUIRED. The available scopes for the OAuth2 security scheme. A map
   * between the scope name and a short description for it. The map MAY be empty.
   */
  scopes: z.record(z.string(), z.string()),
})

export const ImplicitFlowSchema = OAuthFlowObjectSchema.extend({
  authorizationUrl,
})

export const PasswordFlowSchema = OAuthFlowObjectSchema.extend({
  tokenUrl,
})

export const ClientCredentialsFlowSchema = OAuthFlowObjectSchema.extend({
  tokenUrl,
})

export const AuthorizationCodeFlowSchema = OAuthFlowObjectSchema.extend({
  authorizationUrl,
  tokenUrl,
  refreshUrl,
})

/**
 * OAuth Flows Object
 *
 * Allows configuration of the supported OAuth Flows.
 *
 * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#oauth-flows-object
 */
export const OAuthFlowsObjectSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('oauth2'),
  /**
   * REQUIRED. An object containing configuration information for the flow types supported.
   */
  flows: z
    .object({
      /**
       * Configuration for the OAuth Implicit flow
       */
      implicit: ImplicitFlowSchema.optional(),
      /**
       * Configuration for the OAuth Resource Owner Password flow
       */
      password: PasswordFlowSchema.optional(),
      /**
       * Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.
       */
      clientCredentials: ClientCredentialsFlowSchema.optional(),
      /**
       * Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.
       */
      authorizationCode: AuthorizationCodeFlowSchema.optional(),
    })
    .partial(),
})

export const MutualTlsSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('mutualTLS'),
})

/**
 * Security Scheme Object
 *
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query
 * parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials
 * and authorization code) as defined in RFC6749, and [[OpenID-Connect-Core]]. Please note that as of 2020, the implicit
 * flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use cases is
 * Authorization Code Grant flow with PKCE.
 *
 * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#security-scheme-object
 */
export const SecuritySchemeObjectSchema = z.union([
  ApiKeySchema,
  HttpSchema,
  MutualTlsSchema,
  OAuthFlowsObjectSchema,
  OpenIdConnectSchema,
])
